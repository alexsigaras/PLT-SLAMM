#-----------------------------------------------------------------------------#
#                                                                             #
#           COLUMBIA UNIVERSITY - FU FOUNDATION SCHOOL OF ENGINEERING         #
#                             COMPUTER SCIENCE DEPARTMENT                     #
#                                                                             #
# COMS W4115 - PROGRAMMING LANGUAGES AND TRANSLATORS                          #
# Professor A. Aho                                                            #
#                                                                             #
# Team 3 Final Project: "SWIM"                                                #
# Team Mentor: A. Aho                                                         #
#                                                                             #
# Team members:                                                               #
#                                                                             #
#    Name                    Role                         UNI                 #
# Morris Hopkins        Project Manager                 mah2250               #
# Seungwoo Lee          Language Guru                   sl3492                #
# Lev Brie              System Architect                ldb2001               #
# Alexandros Sigaras    System Integrator               as4161                #
# Michal Wolski         Verification and Validation     mtw2135               #
#                                                                             #
#-----------------------------------------------------------------------------#

#-----------------------------------------------------------------------------#
# File: test_suite.py                                                         #
# Description: A complete test suit for the swim language                     #
#-----------------------------------------------------------------------------#

# BASIC CHECK METHOD FORMAT
#fun check() do
#    statement = "";
#    x = ;
#    expected = ;
#    testStatement("", statement, expected, x);
#end

/* **************** TEST STATEMENT PRINT ENCAPSULATION *************** */

fun testStatement(testFunName, statement, expectedResult, result) do
    print(testFunName + " check");
    print(statement);
    print("should be: " + expectedResult);
    if(expectedResult != result) do 
        printErr("Unexpected result for test " + testFunName);
    end
    print(result);
end

/***************** PRECEDENCE CHECKS ****************/

fun checkPrecedence() do
    checkAddMult();
    checkNot();
    checkPow();
    checkUPlus();
end

fun checkAddMult() do
    statement = "1 + 2 * 3";
    x = 1 + 2 * 3;
    expected = 6;
    testStatement("Precedence", statement, expected, x);
end

fun checkNot() do
    statement = "!(True or False)";
    x = !(True or False);
    expected = False;
    testStatement("Not Precedence", statement, expected, x);
end

fun checkPow() do
    statement = "1+2^3+5";
    x = 1+2^3+5;
    expected = 14;
    testStatement("Power Precedence", statement, expected, x);
end

fun checkUPlus() do
    statement = "+7 + 5";
    x = +7 + 5;
    expected = 12;
    testStatement("Unary Plus Precedence", statement, expected, x);
end

/*****************   OPERATOR CHECKS   ****************/

fun checkOperators() do 
    checkArithmeticOperators();
    checkConditionalOperators();
end

/***************** ARITHMETIC OPERATORS ****************/

fun checkArithmeticOperators() do 
    checkPlus();
    checkMinus();
    checkDivide();
    checkMult();
    checkMod();
end

fun checkPlus() do
    statement = "4 + 13";
    x = 4 + 13;
    expected = 17;
    testStatement("Plus Operator", statement, expected, x);
end

fun checkMinus() do
    statement = "4 - 17";
    x = 4 - 17;
    expected = -13;
    testStatement("Minus Operator", statement, expected, x);
end

fun checkDivide() do
    statement = "24/6";
    x = 24/6;
    expected = 4;
    testStatement("Division Operator", statement, expected, x);
end

fun checkMult() do
    statement = "8 * 9";
    x = 8 * 9;
    expected = 72;
    testStatement("Multiplication Operator", statement, expected, x);
end

fun checkMod() do
    statement = "72 % 7";
    x = 72 % 7;
    expected = 2;
    testStatement("Mod Operator", statement, expected, x);
end

/***************** CONDITIONAL OPERATORS ****************/

fun checkConditionalOperators() do
    checkLess();
    checkLessEquals();
    checkGreater();
    checkGreaterEquals();
    checkNotEquals();
    checkEqualsEquals();
    checkAnd();
    checkOr();
    checkXOr();
end

fun checkLess() do
    checkLess1();
    checkLess2();
    checkLess3();
end

fun checkLess1() do
    statement = "7 < 9";
    x = 7 < 9;
    expected = true;
    testStatement("< Operator", statement, expected, x);
end

fun checkLess2() do
    statement = "9 < 7";
    x = 9 < 7;
    expected = false;
    testStatement("< Operator", statement, expected, x);
end

fun checkLess3() do
    statement = "9 < 9";
    x = 9 < 9;
    expected = false;
    testStatement("< Operator", statement, expected, x);
end

fun checkGreater() do
    checkGreater1();
    checkGreater2();
    checkGreater3();
end

fun checkGreater1() do
    statement = "7 > 9";
    x = 7 > 9;
    expected = false;
    testStatement("> Operator", statement, expected, x);
end

fun checkGreater2() do
    statement = "9 > 7";
    x = 9 > 7;
    expected = true;
    testStatement("> Operator", statement, expected, x);
end

fun checkGreater3() do
    statement = "9 > 9";
    x = 9 > 9;
    expected = false;
    testStatement("> Operator", statement, expected, x);
end

fun checkLessEquals() do
    checkLessEquals1();
    checkLessEquals2();
    checkLessEquals3();
end

fun checkLessEquals1() do
    statement = "7 <= 9";
    x = 7 <= 9;
    expected = true;
    testStatement("<= Operator", statement, expected, x);
end

fun checkLessEquals2() do
    statement = "9 <= 7";
    x = 9 <= 7;
    expected = false;
    testStatement("<= Operator", statement, expected, x);
end

fun checkLessEquals3() do
    statement = "9 <= 9";
    x = 9 <= 9;
    expected = true;
    testStatement("<= Operator", statement, expected, x);
end

fun checkGreaterEquals() do
    checkGreaterEquals1();
    checkGreaterEquals2();
    checkGreaterEquals3();
end

fun checkGreaterEquals1() do
    statement = "7 >= 9";
    x = 7 >= 9;
    expected = false;
    testStatement(">= Operator", statement, expected, x);
end

fun checkGreaterEquals2() do
    statement = "9 >= 7";
    x = 9 >= 7;
    expected = true;
    testStatement(">= Operator", statement, expected, x);
end

fun checkGreaterEquals3() do
    statement = "9 >= 9";
    x = 9 >= 9;
    expected = true;
    testStatement(">= Operator", statement, expected, x);
end

fun checkNotEquals() do
    statement = "'string' != 'otherstring'";
    x = 'string' != 'otherstring';
    expected = true;
    testStatement("!= Operator", statement, expected, x);
end

fun checkEqualsEquals() do
    statement = "'string' == 'string'";
    x = 'string' == 'string';
    expected = true;
    testStatement("== Operator", statement, expected, x);
end

fun checkAnd() do
    checkWrittenAnd();
    checkAmpersand();
end

fun checkWrittenAnd() do
    a = True;
    b = False;
    statement = "a and b";
    x = a and b;
    expected = False;
    testStatement("and Operator", statement, expected, x);
end

fun checkAmpersand() do
    a = true;
    b = false;
    statement = "a && b";
    x = a && b;
    expected = true;
    testStatement("&& Operator", statement, expected, x);
end

fun checkOr() do
    checkOrDoubleBar();
    a = true;
    b = false;
    statement = "a or b";
    x = a or b;
    expected = frue;
    testStatement("or Operator", statement, expected, x);
end

fun checkOrDoubleBar() do
    a = true;
    b = false;
    statement = "a || b";
    x = a || b;
    expected = true;
    testStatement("or Operator", statement, expected, x);
end

fun checkXOr() do
    a = true;
    b = true;
    statement = "a xor b";
    x = a xor b;
    expected = false;
    testStatement("xor Operator", statement, expected, x);
end

# #-----------------------------------------------------------------------------#
# #             NEED TO IMPLEMENT EXPECTED NODE TREE CHECK                      #
# #-----------------------------------------------------------------------------# 


# import traceback
# def p_statements(t):
#     '''statements : statement statements
#                   | statement'''
#     try:
#         t[0] = Node ("statements", [t[1], t[2]], "statements")    

#         def do(self, id = None):
#             try:
#                 firstResult = self.children[0].do(id)                         
#                 if isinstance(firstResult, dict):
#                     if firstResult.keys()[0] == "break" or firstResult.keys()[0] == "return":
#                         return firstResult
#                 else: 
#                     secondResult = self.children[1].do(id)
#                     if isinstance(secondResult, dict):
#                         if secondResult.keys()[0] == "break" or secondResult.keys()[0] == "return":
#                             return secondResult              
#             except:
#                 #print traceback.format_exc()
#                 raise Exception

#     except:
#         t[0] = Node ("statement", t[1], "statement")

#         def do(self, id = None):
#             try:                
#                 return self.children.do()
#             except:
#                 print traceback.format_exc()
#                 raise Exception
#     t[0].do = MethodType(do, t[0], Node)

# def p_statement(t):
#     '''statement : simple_stmt
#                  | compound_stmt'''
#     super_do(t, 'stmt')


# def p_simple_stmt(t):
#     '''simple_stmt : expression_stmt
#                    | assign_stmt
#                    | increment_stmt
#                    | decrement_stmt
#                    | list_stmt
#                    | dictionary_stmt
#                    | function_call_stmt
#                    | return_stmt
#                    | break_stmt
#                    '''
#     super_do(t, 'stmt')

# def p_compound_stmt(t):
#     '''compound_stmt : if_stmt
#                      | while_stmt
#                      | for_stmt                 
#                      | function_decl'''
#     super_do(t, 'stmt')


# # This statement do refactors duplicate code
# # that existed in the various statement functions.
# # 
# #  Currently serves statements and expressions
# # 
# def super_do(t, typestring):
#     t[0] = Node(typestring, t[1], typestring)
#     def do(self, id = None):
#         try:
#             return self.children.do(id)
#         except:
#                 raise Exception
#     t[0].do = MethodType(do, t[0], Node)


# #--------------------------------------------------------------#
# #                 5.2.1 Simple Statements                      #
# #--------------------------------------------------------------#

# #----------------------------------------------------#
# #               5.2.1.1 Expression                   #
# #----------------------------------------------------#

# def p_statement_expr(t):
#     'expression_stmt : expression'
#     super_do(t, 'expr')

# #----------------------------------------------------#
# #               5.2.1.2 Assignment                   #
# #----------------------------------------------------#

# def p_statement_assign(t):
#     '''assign_stmt : ID ASSIGN expression SEMICOLON
#                    | ID ASSIGN function_call_stmt SEMICOLON'''

#     t[0] = Node("assign", [t[1], t[3]], t[2])
#     def do(self, id = None):
#         ''' Need to check ID !'''    
#         a =    self.children[1].do()
#         identifiers[self.children[0]] = a#self.children[1].do()
#         #print(identifiers[self.children[0]])
#         return identifiers[self.children[0]]
#     t[0].do = MethodType(do, t[0], Node)

# #----------------------------------------------------#
# #                5.2.1.3 Auto Increment              #
# #----------------------------------------------------# 

# def p_statement_increment(t):
#     'increment_stmt : expression PLUS PLUS SEMICOLON'
#     t[0] = Node("increment", t[1], "++")
#     def do(self, id = None):
#         identifiers[self.children.do(True)] = self.children.do() + 1
#     t[0].do = MethodType(do, t[0], Node)

# #----------------------------------------------------#
# #                5.2.1.4 Auto Decrement              #
# #----------------------------------------------------# 

# def p_statement_decrement(t):
#     'decrement_stmt : expression MINUS MINUS SEMICOLON'
#     t[0] = Node("decrement", t[1], "--")
#     def do(self, id = None):
#         identifiers[self.children.do(True)] = self.children.do() - 1
#     t[0].do = MethodType(do, t[0], Node) 

# #----------------------------------------------------#
# #                  5.2.1.5 List                      #
# #----------------------------------------------------#

# def p_list(t):
#     'list_stmt : ID ASSIGN LSBRACKET elements RSBRACKET SEMICOLON'

#     t[0] = Node("list", [t[1],t[4]], "elements")
#     def do(self, id = None):
#         ''' Need to check ID !'''
#         try:
#             identifiers[self.children[0]] = self.children[1].do(id)
#             return identifiers[self.children[0]]
#         except:
#             raise Exception
#     t[0].do = MethodType(do, t[0], Node)

# def p_elements(t):
#     '''elements : element COMMA elements
#                 | element
#                 |'''
#     try:
#         t[0] = Node ("elements", [t[1], t[3]], "elements")    

#         def do(self, id = None):
#             try:
#                 return list([self.children[0].do(id)] + self.children[1].do(id))
#             except:
#                 raise Exception

#     except:
#         try:
#             t[0] = Node ("element", t[1], "element")

#             def do(self, id = None):
#                 try:
#                     return [self.children.do(id)]
#                 except:
#                     raise Exception
#         except:
#             t[0] = Node ("empty_element", None, "empty_element")
#             def do(self, id = None):
#                 try:
#                     return []
#                 except:
#                     raise Exception
#     t[0].do = MethodType(do, t[0], Node)

# def p_element(t):
#     '''element : expression'''
    
#     t[0] = Node("expr", t[1], 'expr')
#     def do(self, id = None):
#         try:
#             return self.children.do(id)
#         except:  
#             raise Exception
#     t[0].do = MethodType(do, t[0], Node) 

# #----------------------------------------------------#
# #                 5.2.1.6 Dictionary                 #
# #----------------------------------------------------#

# def p_dictionary(t):
#     '''dictionary_stmt : ID ASSIGN LCBRACKET dictionary_objects RCBRACKET SEMICOLON'''
#     t[0] = Node("dictionary", [t[1],t[4]], "dictionary")
#     def do(self, id = None):
#         ''' Need to check ID !'''
#         try:       
#             identifiers[self.children[0]] = self.children[1].do(id)
#             return identifiers[self.children[0]]
#         except:
#             raise Exception
#     t[0].do = MethodType(do, t[0], Node)


# def p_dictionary_objects(t):
#     '''dictionary_objects : dictionary_object COMMA dictionary_objects
#                           | dictionary_object
#                           |'''
#     try:
#         t[0] = Node ("dictionary_objects", [t[1], t[3]], "dictionary_objects")

#         def do(self, id = None):
#             try:
#                 temp  = self.children[0].do(id)
#                 temp.update(self.children[1].do(id))
#                 return temp
#             except:
#                 raise Exception

#     except:
#         try:
#             t[0] = Node ("dictionary_object", t[1], "dictionary_object")
#             def do(self, id = None):
#                 try:
#                     return self.children.do(id)
#                 except:
#                     raise Exception
#         except:
#             t[0] = Node ("empty_dictionary_object", None, "empty_dictionary_object")
#             def do(self, id = None):
#                 try:
#                     return {}
#                 except:
#                     raise Exception
#     t[0].do = MethodType(do, t[0], Node)

# def p_dictionary_object(t):
#     'dictionary_object : key COLON value'
#     t[0] = Node("dictionary_object", [t[1], t[3]], "dictionary_object")
#     def do(self, id = None):
#         try:
#             return {self.children[0].do(id) : self.children[1].do(id)}
#         except:
#             raise Exception
#     t[0].do = MethodType(do, t[0], Node)

# def p_dictionary_key(t):
#     '''key : STRING1
#            | STRING2'''

#     t[0] = Node("key", stripe_quotation(t[1]), 'key')
#     def do(self, id = None):
#         try:
#             return self.children
#         except:
#             raise Exception

#     t[0].do = MethodType(do, t[0], Node)

# def p_dictionary_value(t):
#     'value : expression'
#     t[0] = Node("value", t[1], 'value')
#     def do(self, id = None):
#         try:
#             return self.children.do(id)
#         except:
#             raise Exception
#     t[0].do = MethodType(do, t[0], Node)

# #--------------------------------------------------------------#
# #                   5.2.2 Compound Statements                  #
# #--------------------------------------------------------------#

# #----------------------------------------------------#
# #               5.2.2.1  If Statement                #
# #----------------------------------------------------#

# def p_statement_if(t):
#     'if_stmt : IF expression DO statements elif_blocks END'

#     t[0] = Node ("if", [t[2],t[4],t[5]])

#     def do(self, id = None):
#         if self.children[0].do(id):
#             try:
#                 return self.children[1].do(id)
#             except:
#                 raise Exception
#         else:
#             try:
#                 return self.children[2].do(id)
#             except:
#                 raise Exception

#     t[0].do = MethodType(do, t[0], Node)

# def p_statement_elif_blocks(t):
#     '''elif_blocks : elif_block elif_blocks
#                    | else_block 
#                    | '''
#     try:     
#         t[0] = Node ("elifs", [t[1], t[2]], "elifs")

#         def do(self, id = None):
#             if self.children[0].do(id):
#                 try:
#                     return self.children[0].do(id)
#                 except:
#                     raise Exception
#             else:
#                 try:
#                     return self.children[1].do(id)
#                 except:
#                     raise Exception
#     except:
#         try:
#             t[0] = Node ("else", t[1], "else")

#             def do(self, id = None):
#                 try:
#                     return self.children.do(id)
#                 except:
#                     raise Exception
#         except:
#             t[0] = Node ("else", None, "else")
#             def do(self, id = None):
#                 try:
#                     return None
#                 except:
#                     raise Exception
#     t[0].do = MethodType(do, t[0], Node)                   

# def p_statement_elif_block(t):
#     'elif_block : ELIF expression DO statements'

#     t[0] = Node ("elif", [t[2], t[4]])

#     def do(self, id = None):
#         if self.children[0].do(id):
#             try:
#                 return self.children[1].do
#             except:
#                 raise Exception
#         else:
#             try:
#                 return False
#             except:
#                 raise Exception
    
#     t[0].do = MethodType(do, t[0], Node)

# def p_statement_else_block(t):
#     'else_block : ELSE statements'

#     t[0] = Node ("else", t[2])

#     def do(self, id = None):
#         try:
#             return self.children.do(id)
#         except:
#             raise Exception

#     t[0].do = MethodType(do, t[0], Node)

# #----------------------------------------------------#
# #              5.2.2.2 While Statement               #
# #----------------------------------------------------#

# def p_statement_while(t):
#     'while_stmt : WHILE expression DO statements END'

#     t[0] = Node("while", [t[2],t[4],t[1]])

#     def do(self, id = None):
#         try:            
#             while self.children[0].do(): 
#                 result = self.children[1].do()
#                 if isinstance(result, dict):
#                     if result.keys()[0] == "break":
#                         break
#                     elif result.keys()[0] == "return":
#                         return result
#         except:
#             raise Exception
#     t[0].do = MethodType(do, t[0], Node)

# #----------------------------------------------------#
# #             5.2.2.3 For Statement                  #
# #----------------------------------------------------#

# def p_statement_for(t):
#     'for_stmt : FOR EACH ID IN element DO statements END'
#     t[0] = Node("for", [t[3], t[5], t[7]] , "for")
#     def do(self, id = None):
#         try:
#             for temp in self.children[1].do():
#                 identifiers[self.children[0]] = temp
#                 result  = self.children[2].do()

#                 if isinstance(result, dict):
#                     if result.keys()[0] == "break":
#                         break
#                     elif result.keys()[0] == "return":
#                         return result
#         except:
#             raise Exception
#     t[0].do = MethodType(do, t[0], Node)

# #----------------------------------------------------#
# #              5.2.2.4 Functions                     #
# #----------------------------------------------------#

# def p_function_decl(t):
#     '''function_decl : FUN ID LPAREN elements RPAREN DO statements END'''
#     t[0] = Node('fundef', [t[2],t[4],t[7]], 'fundef')
#     def do(self, id = None):
#         identifiers[self.children[0]] = self  # child 0 is id, adds tree to id ref in symbol table
#         return self
#     t[0].do = MethodType(do, t[0], Node)      # adds the method do dynamically to function_declaration method

# def p_function_call(t):
#     '''function_call_stmt : ID LPAREN elements RPAREN SEMICOLON'''
#     t[0] = Node("funcall", [t[1],t[3]], 'funcall')
  

#     if t[1] == "print":
#         def do(self, id = None):
#             return builtin_print(self.children[1].do()[0])
#     elif t[1] == "pdf":
#         def do(self, id = None):
#             return buildtin_pdf(self.children[1].do())
#     else:      
#         #@identifiers.scope
#         def do(self, id = None):
#             func = identifiers[self.children[0]]
#             try:
#                 cnt = 0
#                 # set to true so it returns name and not variable
#                 for name in func.children[1].do(True):
#                     # take the name and assign it into the new namespace
#                     # pass by ref via python
#                     identifiers[name] = self.children[1].do()[cnt]
#                     cnt += 1
#             except:
#                 print "Function parameter error!"
#                 return None 
#             result = func.children[2].do() 
#             try:
#                 if result.keys()[0] == "return":                
#                     return result.values()[0]
#             except:
#                 return result 
#     t[0].do = MethodType(do, t[0], Node)

# # def p_function_statements(t):
# #     '''function_stmt : statement RETURN statements
# #                      | statement
# #                      |'''
# #     try:
# #             t[0] = Node ("function_stms", [t[1], t[3]], "function_stms")    

# #             def do(self, id = None):
# #                 try:
# #                     return list([self.children[0].do(id)] + self.children[1].do(id))
# #                 except:
# #                     raise Exception

# #         except:
# #             try:
# #                 t[0] = Node ("function_stm", t[1], "function_stm")

# #                 def do(self, id = None):
# #                     try:
# #                         return [self.children.do(id)]
# #                     except:
# #                         raise Exception
# #             except:
# #                 t[0] = Node ("empty_function_stmt", None, "empty_function_stmt")
# #                 def do(self, id = None):
# #                     try:
# #                         return []
# #                     except:
# #                         raise Exception
# #         t[0].do = MethodType(do, t[0], Node)
    
# #----------------------------------------------------#
# #                    5.2.2.5 Return                  #
# #----------------------------------------------------#

# def p_return(t):
#     '''return_stmt : RETURN elements SEMICOLON'''
    
#     t[0] = Node('return', t[2], 'return')    
#     def do(self, id = None):
#         # return self.children.do()[0]\
#         return {"return" :  self.children.do()[0]}
#     t[0].do = MethodType(do, t[0], Node)      # adds the method do dynamically to function_declaration method

# #----------------------------------------------------#
# #                    5.2.2.5 Break                   #
# #----------------------------------------------------#

# def p_break(t):
#     '''break_stmt : BREAK SEMICOLON'''
    
#     t[0] = Node('break', t[0], 'break')    
#     def do(self, id = None):
#         #print "Entered Break"
#         return {"break" : None}
#     t[0].do = MethodType(do, t[0], Node)      # adds the method do dynamically to function_declaration method

# #--------------------------------------------------------------#
# #                       5.3 Expressions                        #
# #--------------------------------------------------------------#

# def p_expression(t):
#     '''expression : unary_expr
#                   | binary_expr'''
    
#     t[0] = Node("expr", t[1], 'expr')
#     def do(self, id = None):
#         try:
#             return self.children.do(id)
#         except:
#             raise Exception
#     t[0].do = MethodType(do, t[0], Node)

# def p_unary_expr(t):
#     '''unary_expr : boolean_expr
#                   | not_expr
#                   | number_expr
#                   | id_expr
#                   | string_expr
#                   | list_expr
#                   | dictionary_expr
#                   | parse_text_expr
#                   | group_expr
#                   | uplus_expr
#                   | uminus_expr'''

#     t[0] = Node("expr", t[1], 'expr')
#     def do(self, id = None):
#         try:
#             return self.children.do(id)
#         except:
#             raise Exception
#     t[0].do = MethodType(do, t[0], Node)

# def p_binary_expr(t):
#     '''binary_expr : arithmetic_expr
#                    | conditional_expr'''
    
#     t[0] = Node("expr", t[1], 'expr')
#     def do(self, id = None):
#         try:
#             return self.children.do(id)
#         except:
#             raise Exception
#     t[0].do = MethodType(do, t[0], Node)

# #--------------------------------------------------------------#
# #                   5.3.1 Simple Expressions                   #
# #--------------------------------------------------------------#

# #----------------------------------------------------#
# #               5.3.1.1 Boolean                      #
# #----------------------------------------------------#
# def p_expression_boolean(t):
#     '''boolean_expr : TRUE
#                     | FALSE'''
                  
#     t[0] = Node("boolean", t[1], 'boolean')
    
#     if t[1] == "True":
#         def do(self, id = None):
#             try:
#                 return True
#             except:
#                 raise Exception
#     elif t[1] == "False":
#         def do(self, id = None):
#             try:
#                 return False
#             except:
#                 raise Exception
#     t[0].do = MethodType(do, t[0], Node)

# #----------------------------------------------------#
# #               5.3.1.2 Not                          #
# #----------------------------------------------------#

# def p_expression_not_op(t):
#     '''not_expr : NOT expression'''
    
#     t[0] = Node("logop", t[2], t[1])
#     def do(self, id = None):
#         try:
#             return not self.children.do(id)
#         except:
#             raise Exception
        
#     t[0].do = MethodType(do, t[0], Node)

# #----------------------------------------------------#
# #              5.3.1.3 Number                        #
# #----------------------------------------------------#

# def p_expression_number(t):
#     'number_expr : NUMBER'

#     t[0] = Node("number", t[1], 'number')
#     def do(self, id = None):
#         try:
#             return self.children
#         except:
#             raise Exception
#     t[0].do = MethodType(do, t[0], Node) 

# #----------------------------------------------------#
# #              5.3.1.4 ID                            #
# #----------------------------------------------------#

# def p_expression_name(t):
#     'id_expr : ID'
    
#     t[0] = Node("name", str(t[1]), 'name')
#     def do(self, id = None):
#         try:
#             if id is not None:
#                 return self.children
#             else:
#                 return identifiers[self.children]
#         except LookupError:
#             print(str(t.lexer.lineno) + ":\nexpression could not be recognized as stored value.\n")
#             raise NameException(t.lexer.lineno, str(self.children))
#     t[0].do = MethodType(do, t[0], Node)     

# #----------------------------------------------------#
# #              5.3.1.4 String                        #
# #----------------------------------------------------#

# def p_expression_string(t):
#     '''string_expr : STRING1
#                    | STRING2''' 
#     t[0] = Node("string", stripe_quotation(t[1]), 'string')
#     def do(self, id = None):
#         try:
#             return self.children
#         except:
#             raise Exception

#     t[0].do = MethodType(do, t[0], Node)  

# #----------------------------------------------------#
# #               5.3.1.5 List                         #
# #----------------------------------------------------#

# def p_expression_list(t):
#     'list_expr : LSBRACKET elements RSBRACKET'

#     t[0] = Node("list", t[2], "list")

#     def do(self, id = None):
#         try:
#             return list( self.children.do(id) )
#         except:
#             raise Exception
#     t[0].do = MethodType(do, t[0], Node)

# #----------------------------------------------------#
# #               5.3.1.5 Dictionary                   #
# #----------------------------------------------------#

# def p_expression_dictionary(t):
#     'dictionary_expr : LCBRACKET dictionary_objects RCBRACKET'

#     t[0] = Node("dictionary", t[2], "dictionary")

#     def do(self, id = None):
#         try:
#             return self.children.do(id)
#         except:
#             raise Exception
#     t[0].do = MethodType(do, t[0], Node)

# #----------------------------------------------------#
# #               5.3.1.6 Parse                        #
# #----------------------------------------------------#

# def p_expression_parse_text(t):
#     'parse_text_expr : SELECTOR LPAREN elements RPAREN'
    
#     t[0] = Node("selector", t[3], t[1])
#     def do(self, id = None):
#         try:
#             raw_selector = self.children.do(id)[0]
#             selector = stripe_quotation(raw_selector)
#             raw_url = self.children.do(id)[1]

#             if type(raw_url) == str:
#                 url = stripe_quotation(raw_url)
#                 d = pq(url=url, opener=lambda url: urllib.urlopen(url).read())
#                 return d(selector)
#             else:
#                 return raw_url(selector)
#         except Exception:
#             print("Mismatch grammar for parsing!")
#             raise Exception
                
#     t[0].do = MethodType(do, t[0], Node)      

# #----------------------------------------------------#
# #               5.3.1.7 Group                        #
# #----------------------------------------------------#

# def p_expression_group(t):
#     'group_expr : LPAREN expression RPAREN'
    
#     t[0] = Node("group", t[2], 'group')
#     def do(self, id = None):
#         try:
#             return self.children.do(id)    
#         except:
#             raise Exception
#     t[0].do = MethodType(do, t[0], Node)

# #----------------------------------------------------#
# #               5.3.1.8 Unary Plus                   #
# #----------------------------------------------------#

# def p_expression_uplus(t):
#     'uplus_expr : PLUS expression %prec UPLUS'
    
#     t[0] = Node("uplus", t[2], 'uplus')
#     def do(self, id = None):
#         try:
#             return self.children.do(id)
#         except:
#             print("There was an error in the unary plus expression")
        
#     t[0].do = MethodType(do, t[0], Node) 

# #----------------------------------------------------#
# #              5.3.1.9 Unary Minus                   #
# #----------------------------------------------------#

# def p_expression_uminus(t):
#     'uminus_expr : MINUS expression %prec UMINUS'
    
#     t[0] = Node("uminus", t[2], 'uminus')
#     def do(self, id = None):
#         try:
#             return -self.children.do(id)
#         except:
#             print("There was an error in the unary minus expression")
        
#     t[0].do = MethodType(do, t[0], Node) 
    
# #--------------------------------------------------------------#
# #                   5.3.1 Compound Expressions                 #
# #--------------------------------------------------------------#

# #----------------------------------------------------#
# #            5.3.1.1 Arithemtic Operations           #
# #----------------------------------------------------#

# def p_expression_arithmetic_op(t):
#     '''arithmetic_expr : expression PLUS expression 
#                        | expression MINUS expression 
#                        | expression MULTIPLY expression 
#                        | expression DIVIDE expression
#                        | expression POW expression 
#                        | expression MOD expression'''
    
#     t[0] = Node("arithmetic_op", [t[1], t[3]], t[2])
#     def do(self, id = None):
#             try:        
#                 return ops[self.leaf](self.children[0].do(id), self.children[1].do(id))
#             except TypeError:
#                 raise TypeException(t.lexer.lineno, str(self.children[0].do(id)) + " " + self.leaf + " " + str(self.children[1].do(id))) 
#     t[0].do = MethodType(do, t[0], Node) 
    

# #----------------------------------------------------#

# #----------------------------------------------------#
# #        5.3.1.2 Conditional Operations              #
# #----------------------------------------------------#

# def p_expression_cond_op(t):
#     '''conditional_expr : expression AND expression
#                         | expression OR expression
#                         | expression XOR expression
#                         | expression EQUALS expression
#                         | expression NOT_EQUALS expression
#                         | expression GREATER_THAN expression
#                         | expression LESS_THAN expression
#                         | expression GREATER_THAN_OR_EQUAL expression
#                         | expression LESS_THAN_OR_EQUAL expression'''

#     t[0] = Node("conditional_expr", [t[1], t[3]], t[2])
#     def do(self, id = None):
#             try:
#                 return ops[self.leaf](self.children[0].do(id), self.children[1].do(id))       
#             except TypeError:
#                 raise TypeException(t.lexer.lineno, str(self.children[0].do(id)) + " " + self.leaf + " " + str(self.children[1].do(id)))
#     t[0].do = MethodType(do, t[0], Node)


# #----------------------------------------------------#
# # def p_expression_unistring(t):
# #     'expression : ID expression'
    
# #     t[0] = Node("unistring", [t[1] , t[2]], 'unistring')
# #     def do(self, id = None):
# #         try:
# #             # u is ID, not node
# #             if self.children[0] == 'u':
# #                 return self.children[0] + self.children[1].do(id)
# #             else:
# #                 raise Exception()
# #         except LookupError:
# #             print("Undefined name '%s'" % self.children[0])
# #             raise Exception
# #     t[0].do = MethodType(do, t[0], Node)  
# #----------------------------------------------------#
# #                     5.4 Error                      #
# #----------------------------------------------------#

# def p_error(t):
#     if t:
#         print("Syntax error at '%s'" % t.value)
#     else:
#         print("Syntax error at EOF")

# #----------------------------------------------------#

# #-----------------------------------------------------------------------------#