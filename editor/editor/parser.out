Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    RETURN
    CLASS

Grammar

Rule 0     S' -> start
Rule 1     start -> statements
Rule 2     statements -> statement statements
Rule 3     statements -> statement
Rule 4     statement -> simple_stmt
Rule 5     statement -> compound_stmt
Rule 6     simple_stmt -> expression_stmt
Rule 7     simple_stmt -> assign_stmt
Rule 8     simple_stmt -> increment_stmt
Rule 9     simple_stmt -> decrement_stmt
Rule 10    simple_stmt -> list_stmt
Rule 11    simple_stmt -> dictionary_stmt
Rule 12    simple_stmt -> function_call
Rule 13    compound_stmt -> if_stmt
Rule 14    compound_stmt -> while_stmt
Rule 15    compound_stmt -> for_stmt
Rule 16    compound_stmt -> function_decl
Rule 17    expression_stmt -> expression
Rule 18    assign_stmt -> ID ASSIGN expression SEMICOLON
Rule 19    increment_stmt -> expression PLUS PLUS SEMICOLON
Rule 20    decrement_stmt -> expression MINUS MINUS SEMICOLON
Rule 21    list_stmt -> ID ASSIGN LSBRACKET elements RSBRACKET SEMICOLON
Rule 22    elements -> element COMMA elements
Rule 23    elements -> element
Rule 24    elements -> <empty>
Rule 25    element -> expression
Rule 26    dictionary_stmt -> ID ASSIGN LCBRACKET dictionary_objects RCBRACKET SEMICOLON
Rule 27    dictionary_objects -> dictionary_object COMMA dictionary_objects
Rule 28    dictionary_objects -> dictionary_object
Rule 29    dictionary_objects -> <empty>
Rule 30    dictionary_object -> key COLON value
Rule 31    key -> STRING1
Rule 32    key -> STRING2
Rule 33    value -> expression
Rule 34    if_stmt -> IF expression DO statements elif_blocks END
Rule 35    elif_blocks -> elif_block elif_blocks
Rule 36    elif_blocks -> else_block
Rule 37    elif_blocks -> <empty>
Rule 38    elif_block -> ELIF expression DO statements
Rule 39    else_block -> ELSE statements
Rule 40    while_stmt -> WHILE expression DO statements END
Rule 41    for_stmt -> FOR EACH ID IN element DO statements END
Rule 42    function_decl -> FUN ID LPAREN elements RPAREN DO statements END
Rule 43    function_call -> ID LPAREN elements RPAREN SEMICOLON
Rule 44    expression -> unary_expr
Rule 45    expression -> binary_expr
Rule 46    unary_expr -> boolean_expr
Rule 47    unary_expr -> not_expr
Rule 48    unary_expr -> number_expr
Rule 49    unary_expr -> id_expr
Rule 50    unary_expr -> string_expr
Rule 51    unary_expr -> list_expr
Rule 52    unary_expr -> parse_text_expr
Rule 53    unary_expr -> group_expr
Rule 54    unary_expr -> uplus_expr
Rule 55    unary_expr -> uminus_expr
Rule 56    binary_expr -> arithmetic_expr
Rule 57    binary_expr -> conditional_expr
Rule 58    boolean_expr -> TRUE
Rule 59    boolean_expr -> FALSE
Rule 60    not_expr -> NOT expression
Rule 61    number_expr -> NUMBER
Rule 62    id_expr -> ID
Rule 63    string_expr -> STRING1
Rule 64    string_expr -> STRING2
Rule 65    list_expr -> LSBRACKET elements RSBRACKET
Rule 66    parse_text_expr -> SELECTOR LPAREN elements RPAREN
Rule 67    group_expr -> LPAREN expression RPAREN
Rule 68    uplus_expr -> PLUS expression
Rule 69    uminus_expr -> MINUS expression
Rule 70    arithmetic_expr -> expression PLUS expression
Rule 71    arithmetic_expr -> expression MINUS expression
Rule 72    arithmetic_expr -> expression MULTIPLY expression
Rule 73    arithmetic_expr -> expression DIVIDE expression
Rule 74    arithmetic_expr -> expression POW expression
Rule 75    arithmetic_expr -> expression MOD expression
Rule 76    conditional_expr -> expression AND expression
Rule 77    conditional_expr -> expression OR expression
Rule 78    conditional_expr -> expression XOR expression
Rule 79    conditional_expr -> expression EQUALS expression
Rule 80    conditional_expr -> expression NOT_EQUALS expression
Rule 81    conditional_expr -> expression GREATER_THAN expression
Rule 82    conditional_expr -> expression LESS_THAN expression
Rule 83    conditional_expr -> expression GREATER_THAN_OR_EQUAL expression
Rule 84    conditional_expr -> expression LESS_THAN_OR_EQUAL expression

Terminals, with rules where they appear

AND                  : 76
ASSIGN               : 18 21 26
CLASS                : 
COLON                : 30
COMMA                : 22 27
DIVIDE               : 73
DO                   : 34 38 40 41 42
EACH                 : 41
ELIF                 : 38
ELSE                 : 39
END                  : 34 40 41 42
EQUALS               : 79
FALSE                : 59
FOR                  : 41
FUN                  : 42
GREATER_THAN         : 81
GREATER_THAN_OR_EQUAL : 83
ID                   : 18 21 26 41 42 43 62
IF                   : 34
IN                   : 41
LCBRACKET            : 26
LESS_THAN            : 82
LESS_THAN_OR_EQUAL   : 84
LPAREN               : 42 43 66 67
LSBRACKET            : 21 65
MINUS                : 20 20 69 71
MOD                  : 75
MULTIPLY             : 72
NOT                  : 60
NOT_EQUALS           : 80
NUMBER               : 61
OR                   : 77
PLUS                 : 19 19 68 70
POW                  : 74
RCBRACKET            : 26
RETURN               : 
RPAREN               : 42 43 66 67
RSBRACKET            : 21 65
SELECTOR             : 66
SEMICOLON            : 18 19 20 21 26 43
STRING1              : 31 63
STRING2              : 32 64
TRUE                 : 58
WHILE                : 40
XOR                  : 78
error                : 

Nonterminals, with rules where they appear

arithmetic_expr      : 56
assign_stmt          : 7
binary_expr          : 45
boolean_expr         : 46
compound_stmt        : 5
conditional_expr     : 57
decrement_stmt       : 9
dictionary_object    : 27 28
dictionary_objects   : 26 27
dictionary_stmt      : 11
element              : 22 23 41
elements             : 21 22 42 43 65 66
elif_block           : 35
elif_blocks          : 34 35
else_block           : 36
expression           : 17 18 19 20 25 33 34 38 40 60 67 68 69 70 70 71 71 72 72 73 73 74 74 75 75 76 76 77 77 78 78 79 79 80 80 81 81 82 82 83 83 84 84
expression_stmt      : 6
for_stmt             : 15
function_call        : 12
function_decl        : 16
group_expr           : 53
id_expr              : 49
if_stmt              : 13
increment_stmt       : 8
key                  : 30
list_expr            : 51
list_stmt            : 10
not_expr             : 47
number_expr          : 48
parse_text_expr      : 52
simple_stmt          : 4
start                : 0
statement            : 2 3
statements           : 1 2 34 38 39 40 41 42
string_expr          : 50
uminus_expr          : 55
unary_expr           : 44
uplus_expr           : 54
value                : 30
while_stmt           : 14

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . statements
    (2) statements -> . statement statements
    (3) statements -> . statement
    (4) statement -> . simple_stmt
    (5) statement -> . compound_stmt
    (6) simple_stmt -> . expression_stmt
    (7) simple_stmt -> . assign_stmt
    (8) simple_stmt -> . increment_stmt
    (9) simple_stmt -> . decrement_stmt
    (10) simple_stmt -> . list_stmt
    (11) simple_stmt -> . dictionary_stmt
    (12) simple_stmt -> . function_call
    (13) compound_stmt -> . if_stmt
    (14) compound_stmt -> . while_stmt
    (15) compound_stmt -> . for_stmt
    (16) compound_stmt -> . function_decl
    (17) expression_stmt -> . expression
    (18) assign_stmt -> . ID ASSIGN expression SEMICOLON
    (19) increment_stmt -> . expression PLUS PLUS SEMICOLON
    (20) decrement_stmt -> . expression MINUS MINUS SEMICOLON
    (21) list_stmt -> . ID ASSIGN LSBRACKET elements RSBRACKET SEMICOLON
    (26) dictionary_stmt -> . ID ASSIGN LCBRACKET dictionary_objects RCBRACKET SEMICOLON
    (43) function_call -> . ID LPAREN elements RPAREN SEMICOLON
    (34) if_stmt -> . IF expression DO statements elif_blocks END
    (40) while_stmt -> . WHILE expression DO statements END
    (41) for_stmt -> . FOR EACH ID IN element DO statements END
    (42) function_decl -> . FUN ID LPAREN elements RPAREN DO statements END
    (44) expression -> . unary_expr
    (45) expression -> . binary_expr
    (46) unary_expr -> . boolean_expr
    (47) unary_expr -> . not_expr
    (48) unary_expr -> . number_expr
    (49) unary_expr -> . id_expr
    (50) unary_expr -> . string_expr
    (51) unary_expr -> . list_expr
    (52) unary_expr -> . parse_text_expr
    (53) unary_expr -> . group_expr
    (54) unary_expr -> . uplus_expr
    (55) unary_expr -> . uminus_expr
    (56) binary_expr -> . arithmetic_expr
    (57) binary_expr -> . conditional_expr
    (58) boolean_expr -> . TRUE
    (59) boolean_expr -> . FALSE
    (60) not_expr -> . NOT expression
    (61) number_expr -> . NUMBER
    (62) id_expr -> . ID
    (63) string_expr -> . STRING1
    (64) string_expr -> . STRING2
    (65) list_expr -> . LSBRACKET elements RSBRACKET
    (66) parse_text_expr -> . SELECTOR LPAREN elements RPAREN
    (67) group_expr -> . LPAREN expression RPAREN
    (68) uplus_expr -> . PLUS expression
    (69) uminus_expr -> . MINUS expression
    (70) arithmetic_expr -> . expression PLUS expression
    (71) arithmetic_expr -> . expression MINUS expression
    (72) arithmetic_expr -> . expression MULTIPLY expression
    (73) arithmetic_expr -> . expression DIVIDE expression
    (74) arithmetic_expr -> . expression POW expression
    (75) arithmetic_expr -> . expression MOD expression
    (76) conditional_expr -> . expression AND expression
    (77) conditional_expr -> . expression OR expression
    (78) conditional_expr -> . expression XOR expression
    (79) conditional_expr -> . expression EQUALS expression
    (80) conditional_expr -> . expression NOT_EQUALS expression
    (81) conditional_expr -> . expression GREATER_THAN expression
    (82) conditional_expr -> . expression LESS_THAN expression
    (83) conditional_expr -> . expression GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> . expression LESS_THAN_OR_EQUAL expression

    ID              shift and go to state 34
    IF              shift and go to state 35
    WHILE           shift and go to state 11
    FOR             shift and go to state 28
    FUN             shift and go to state 13
    TRUE            shift and go to state 15
    FALSE           shift and go to state 37
    NOT             shift and go to state 44
    NUMBER          shift and go to state 7
    STRING1         shift and go to state 26
    STRING2         shift and go to state 25
    LSBRACKET       shift and go to state 4
    SELECTOR        shift and go to state 9
    LPAREN          shift and go to state 32
    PLUS            shift and go to state 24
    MINUS           shift and go to state 16

    list_expr                      shift and go to state 1
    statements                     shift and go to state 2
    unary_expr                     shift and go to state 3
    dictionary_stmt                shift and go to state 5
    group_expr                     shift and go to state 27
    function_call                  shift and go to state 8
    parse_text_expr                shift and go to state 14
    conditional_expr               shift and go to state 12
    list_stmt                      shift and go to state 17
    number_expr                    shift and go to state 33
    string_expr                    shift and go to state 18
    arithmetic_expr                shift and go to state 19
    assign_stmt                    shift and go to state 20
    start                          shift and go to state 21
    expression_stmt                shift and go to state 22
    statement                      shift and go to state 23
    compound_stmt                  shift and go to state 42
    simple_stmt                    shift and go to state 29
    function_decl                  shift and go to state 30
    for_stmt                       shift and go to state 31
    not_expr                       shift and go to state 6
    binary_expr                    shift and go to state 10
    decrement_stmt                 shift and go to state 36
    if_stmt                        shift and go to state 38
    uminus_expr                    shift and go to state 39
    id_expr                        shift and go to state 40
    boolean_expr                   shift and go to state 41
    while_stmt                     shift and go to state 43
    uplus_expr                     shift and go to state 45
    expression                     shift and go to state 46
    increment_stmt                 shift and go to state 47

state 1

    (51) unary_expr -> list_expr .

    PLUS            reduce using rule 51 (unary_expr -> list_expr .)
    MINUS           reduce using rule 51 (unary_expr -> list_expr .)
    MULTIPLY        reduce using rule 51 (unary_expr -> list_expr .)
    DIVIDE          reduce using rule 51 (unary_expr -> list_expr .)
    POW             reduce using rule 51 (unary_expr -> list_expr .)
    MOD             reduce using rule 51 (unary_expr -> list_expr .)
    AND             reduce using rule 51 (unary_expr -> list_expr .)
    OR              reduce using rule 51 (unary_expr -> list_expr .)
    XOR             reduce using rule 51 (unary_expr -> list_expr .)
    EQUALS          reduce using rule 51 (unary_expr -> list_expr .)
    NOT_EQUALS      reduce using rule 51 (unary_expr -> list_expr .)
    GREATER_THAN    reduce using rule 51 (unary_expr -> list_expr .)
    LESS_THAN       reduce using rule 51 (unary_expr -> list_expr .)
    GREATER_THAN_OR_EQUAL reduce using rule 51 (unary_expr -> list_expr .)
    LESS_THAN_OR_EQUAL reduce using rule 51 (unary_expr -> list_expr .)
    ID              reduce using rule 51 (unary_expr -> list_expr .)
    IF              reduce using rule 51 (unary_expr -> list_expr .)
    WHILE           reduce using rule 51 (unary_expr -> list_expr .)
    FOR             reduce using rule 51 (unary_expr -> list_expr .)
    FUN             reduce using rule 51 (unary_expr -> list_expr .)
    TRUE            reduce using rule 51 (unary_expr -> list_expr .)
    FALSE           reduce using rule 51 (unary_expr -> list_expr .)
    NOT             reduce using rule 51 (unary_expr -> list_expr .)
    NUMBER          reduce using rule 51 (unary_expr -> list_expr .)
    STRING1         reduce using rule 51 (unary_expr -> list_expr .)
    STRING2         reduce using rule 51 (unary_expr -> list_expr .)
    LSBRACKET       reduce using rule 51 (unary_expr -> list_expr .)
    SELECTOR        reduce using rule 51 (unary_expr -> list_expr .)
    LPAREN          reduce using rule 51 (unary_expr -> list_expr .)
    $end            reduce using rule 51 (unary_expr -> list_expr .)
    COMMA           reduce using rule 51 (unary_expr -> list_expr .)
    RSBRACKET       reduce using rule 51 (unary_expr -> list_expr .)
    DO              reduce using rule 51 (unary_expr -> list_expr .)
    END             reduce using rule 51 (unary_expr -> list_expr .)
    ELIF            reduce using rule 51 (unary_expr -> list_expr .)
    ELSE            reduce using rule 51 (unary_expr -> list_expr .)
    RPAREN          reduce using rule 51 (unary_expr -> list_expr .)
    SEMICOLON       reduce using rule 51 (unary_expr -> list_expr .)
    RCBRACKET       reduce using rule 51 (unary_expr -> list_expr .)


state 2

    (1) start -> statements .

    $end            reduce using rule 1 (start -> statements .)


state 3

    (44) expression -> unary_expr .

    PLUS            reduce using rule 44 (expression -> unary_expr .)
    MINUS           reduce using rule 44 (expression -> unary_expr .)
    MULTIPLY        reduce using rule 44 (expression -> unary_expr .)
    DIVIDE          reduce using rule 44 (expression -> unary_expr .)
    POW             reduce using rule 44 (expression -> unary_expr .)
    MOD             reduce using rule 44 (expression -> unary_expr .)
    AND             reduce using rule 44 (expression -> unary_expr .)
    OR              reduce using rule 44 (expression -> unary_expr .)
    XOR             reduce using rule 44 (expression -> unary_expr .)
    EQUALS          reduce using rule 44 (expression -> unary_expr .)
    NOT_EQUALS      reduce using rule 44 (expression -> unary_expr .)
    GREATER_THAN    reduce using rule 44 (expression -> unary_expr .)
    LESS_THAN       reduce using rule 44 (expression -> unary_expr .)
    GREATER_THAN_OR_EQUAL reduce using rule 44 (expression -> unary_expr .)
    LESS_THAN_OR_EQUAL reduce using rule 44 (expression -> unary_expr .)
    COMMA           reduce using rule 44 (expression -> unary_expr .)
    RPAREN          reduce using rule 44 (expression -> unary_expr .)
    ID              reduce using rule 44 (expression -> unary_expr .)
    IF              reduce using rule 44 (expression -> unary_expr .)
    WHILE           reduce using rule 44 (expression -> unary_expr .)
    FOR             reduce using rule 44 (expression -> unary_expr .)
    FUN             reduce using rule 44 (expression -> unary_expr .)
    TRUE            reduce using rule 44 (expression -> unary_expr .)
    FALSE           reduce using rule 44 (expression -> unary_expr .)
    NOT             reduce using rule 44 (expression -> unary_expr .)
    NUMBER          reduce using rule 44 (expression -> unary_expr .)
    STRING1         reduce using rule 44 (expression -> unary_expr .)
    STRING2         reduce using rule 44 (expression -> unary_expr .)
    LSBRACKET       reduce using rule 44 (expression -> unary_expr .)
    SELECTOR        reduce using rule 44 (expression -> unary_expr .)
    LPAREN          reduce using rule 44 (expression -> unary_expr .)
    ELIF            reduce using rule 44 (expression -> unary_expr .)
    ELSE            reduce using rule 44 (expression -> unary_expr .)
    END             reduce using rule 44 (expression -> unary_expr .)
    $end            reduce using rule 44 (expression -> unary_expr .)
    RSBRACKET       reduce using rule 44 (expression -> unary_expr .)
    DO              reduce using rule 44 (expression -> unary_expr .)
    SEMICOLON       reduce using rule 44 (expression -> unary_expr .)
    RCBRACKET       reduce using rule 44 (expression -> unary_expr .)


state 4

    (65) list_expr -> LSBRACKET . elements RSBRACKET
    (22) elements -> . element COMMA elements
    (23) elements -> . element
    (24) elements -> .
    (25) element -> . expression
    (44) expression -> . unary_expr
    (45) expression -> . binary_expr
    (46) unary_expr -> . boolean_expr
    (47) unary_expr -> . not_expr
    (48) unary_expr -> . number_expr
    (49) unary_expr -> . id_expr
    (50) unary_expr -> . string_expr
    (51) unary_expr -> . list_expr
    (52) unary_expr -> . parse_text_expr
    (53) unary_expr -> . group_expr
    (54) unary_expr -> . uplus_expr
    (55) unary_expr -> . uminus_expr
    (56) binary_expr -> . arithmetic_expr
    (57) binary_expr -> . conditional_expr
    (58) boolean_expr -> . TRUE
    (59) boolean_expr -> . FALSE
    (60) not_expr -> . NOT expression
    (61) number_expr -> . NUMBER
    (62) id_expr -> . ID
    (63) string_expr -> . STRING1
    (64) string_expr -> . STRING2
    (65) list_expr -> . LSBRACKET elements RSBRACKET
    (66) parse_text_expr -> . SELECTOR LPAREN elements RPAREN
    (67) group_expr -> . LPAREN expression RPAREN
    (68) uplus_expr -> . PLUS expression
    (69) uminus_expr -> . MINUS expression
    (70) arithmetic_expr -> . expression PLUS expression
    (71) arithmetic_expr -> . expression MINUS expression
    (72) arithmetic_expr -> . expression MULTIPLY expression
    (73) arithmetic_expr -> . expression DIVIDE expression
    (74) arithmetic_expr -> . expression POW expression
    (75) arithmetic_expr -> . expression MOD expression
    (76) conditional_expr -> . expression AND expression
    (77) conditional_expr -> . expression OR expression
    (78) conditional_expr -> . expression XOR expression
    (79) conditional_expr -> . expression EQUALS expression
    (80) conditional_expr -> . expression NOT_EQUALS expression
    (81) conditional_expr -> . expression GREATER_THAN expression
    (82) conditional_expr -> . expression LESS_THAN expression
    (83) conditional_expr -> . expression GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> . expression LESS_THAN_OR_EQUAL expression

    RSBRACKET       reduce using rule 24 (elements -> .)
    TRUE            shift and go to state 15
    FALSE           shift and go to state 37
    NOT             shift and go to state 44
    NUMBER          shift and go to state 7
    ID              shift and go to state 49
    STRING1         shift and go to state 26
    STRING2         shift and go to state 25
    LSBRACKET       shift and go to state 4
    SELECTOR        shift and go to state 9
    LPAREN          shift and go to state 32
    PLUS            shift and go to state 24
    MINUS           shift and go to state 16

    conditional_expr               shift and go to state 12
    elements                       shift and go to state 48
    number_expr                    shift and go to state 33
    string_expr                    shift and go to state 18
    unary_expr                     shift and go to state 3
    uminus_expr                    shift and go to state 39
    id_expr                        shift and go to state 40
    group_expr                     shift and go to state 27
    element                        shift and go to state 50
    arithmetic_expr                shift and go to state 19
    boolean_expr                   shift and go to state 41
    list_expr                      shift and go to state 1
    not_expr                       shift and go to state 6
    binary_expr                    shift and go to state 10
    parse_text_expr                shift and go to state 14
    uplus_expr                     shift and go to state 45
    expression                     shift and go to state 51

state 5

    (11) simple_stmt -> dictionary_stmt .

    ID              reduce using rule 11 (simple_stmt -> dictionary_stmt .)
    IF              reduce using rule 11 (simple_stmt -> dictionary_stmt .)
    WHILE           reduce using rule 11 (simple_stmt -> dictionary_stmt .)
    FOR             reduce using rule 11 (simple_stmt -> dictionary_stmt .)
    FUN             reduce using rule 11 (simple_stmt -> dictionary_stmt .)
    TRUE            reduce using rule 11 (simple_stmt -> dictionary_stmt .)
    FALSE           reduce using rule 11 (simple_stmt -> dictionary_stmt .)
    NOT             reduce using rule 11 (simple_stmt -> dictionary_stmt .)
    NUMBER          reduce using rule 11 (simple_stmt -> dictionary_stmt .)
    STRING1         reduce using rule 11 (simple_stmt -> dictionary_stmt .)
    STRING2         reduce using rule 11 (simple_stmt -> dictionary_stmt .)
    LSBRACKET       reduce using rule 11 (simple_stmt -> dictionary_stmt .)
    SELECTOR        reduce using rule 11 (simple_stmt -> dictionary_stmt .)
    LPAREN          reduce using rule 11 (simple_stmt -> dictionary_stmt .)
    PLUS            reduce using rule 11 (simple_stmt -> dictionary_stmt .)
    MINUS           reduce using rule 11 (simple_stmt -> dictionary_stmt .)
    END             reduce using rule 11 (simple_stmt -> dictionary_stmt .)
    ELIF            reduce using rule 11 (simple_stmt -> dictionary_stmt .)
    ELSE            reduce using rule 11 (simple_stmt -> dictionary_stmt .)
    $end            reduce using rule 11 (simple_stmt -> dictionary_stmt .)


state 6

    (47) unary_expr -> not_expr .

    PLUS            reduce using rule 47 (unary_expr -> not_expr .)
    MINUS           reduce using rule 47 (unary_expr -> not_expr .)
    MULTIPLY        reduce using rule 47 (unary_expr -> not_expr .)
    DIVIDE          reduce using rule 47 (unary_expr -> not_expr .)
    POW             reduce using rule 47 (unary_expr -> not_expr .)
    MOD             reduce using rule 47 (unary_expr -> not_expr .)
    AND             reduce using rule 47 (unary_expr -> not_expr .)
    OR              reduce using rule 47 (unary_expr -> not_expr .)
    XOR             reduce using rule 47 (unary_expr -> not_expr .)
    EQUALS          reduce using rule 47 (unary_expr -> not_expr .)
    NOT_EQUALS      reduce using rule 47 (unary_expr -> not_expr .)
    GREATER_THAN    reduce using rule 47 (unary_expr -> not_expr .)
    LESS_THAN       reduce using rule 47 (unary_expr -> not_expr .)
    GREATER_THAN_OR_EQUAL reduce using rule 47 (unary_expr -> not_expr .)
    LESS_THAN_OR_EQUAL reduce using rule 47 (unary_expr -> not_expr .)
    ID              reduce using rule 47 (unary_expr -> not_expr .)
    IF              reduce using rule 47 (unary_expr -> not_expr .)
    WHILE           reduce using rule 47 (unary_expr -> not_expr .)
    FOR             reduce using rule 47 (unary_expr -> not_expr .)
    FUN             reduce using rule 47 (unary_expr -> not_expr .)
    TRUE            reduce using rule 47 (unary_expr -> not_expr .)
    FALSE           reduce using rule 47 (unary_expr -> not_expr .)
    NOT             reduce using rule 47 (unary_expr -> not_expr .)
    NUMBER          reduce using rule 47 (unary_expr -> not_expr .)
    STRING1         reduce using rule 47 (unary_expr -> not_expr .)
    STRING2         reduce using rule 47 (unary_expr -> not_expr .)
    LSBRACKET       reduce using rule 47 (unary_expr -> not_expr .)
    SELECTOR        reduce using rule 47 (unary_expr -> not_expr .)
    LPAREN          reduce using rule 47 (unary_expr -> not_expr .)
    $end            reduce using rule 47 (unary_expr -> not_expr .)
    COMMA           reduce using rule 47 (unary_expr -> not_expr .)
    RSBRACKET       reduce using rule 47 (unary_expr -> not_expr .)
    DO              reduce using rule 47 (unary_expr -> not_expr .)
    END             reduce using rule 47 (unary_expr -> not_expr .)
    ELIF            reduce using rule 47 (unary_expr -> not_expr .)
    ELSE            reduce using rule 47 (unary_expr -> not_expr .)
    RPAREN          reduce using rule 47 (unary_expr -> not_expr .)
    SEMICOLON       reduce using rule 47 (unary_expr -> not_expr .)
    RCBRACKET       reduce using rule 47 (unary_expr -> not_expr .)


state 7

    (61) number_expr -> NUMBER .

    PLUS            reduce using rule 61 (number_expr -> NUMBER .)
    MINUS           reduce using rule 61 (number_expr -> NUMBER .)
    MULTIPLY        reduce using rule 61 (number_expr -> NUMBER .)
    DIVIDE          reduce using rule 61 (number_expr -> NUMBER .)
    POW             reduce using rule 61 (number_expr -> NUMBER .)
    MOD             reduce using rule 61 (number_expr -> NUMBER .)
    AND             reduce using rule 61 (number_expr -> NUMBER .)
    OR              reduce using rule 61 (number_expr -> NUMBER .)
    XOR             reduce using rule 61 (number_expr -> NUMBER .)
    EQUALS          reduce using rule 61 (number_expr -> NUMBER .)
    NOT_EQUALS      reduce using rule 61 (number_expr -> NUMBER .)
    GREATER_THAN    reduce using rule 61 (number_expr -> NUMBER .)
    LESS_THAN       reduce using rule 61 (number_expr -> NUMBER .)
    GREATER_THAN_OR_EQUAL reduce using rule 61 (number_expr -> NUMBER .)
    LESS_THAN_OR_EQUAL reduce using rule 61 (number_expr -> NUMBER .)
    DO              reduce using rule 61 (number_expr -> NUMBER .)
    ID              reduce using rule 61 (number_expr -> NUMBER .)
    IF              reduce using rule 61 (number_expr -> NUMBER .)
    WHILE           reduce using rule 61 (number_expr -> NUMBER .)
    FOR             reduce using rule 61 (number_expr -> NUMBER .)
    FUN             reduce using rule 61 (number_expr -> NUMBER .)
    TRUE            reduce using rule 61 (number_expr -> NUMBER .)
    FALSE           reduce using rule 61 (number_expr -> NUMBER .)
    NOT             reduce using rule 61 (number_expr -> NUMBER .)
    NUMBER          reduce using rule 61 (number_expr -> NUMBER .)
    STRING1         reduce using rule 61 (number_expr -> NUMBER .)
    STRING2         reduce using rule 61 (number_expr -> NUMBER .)
    LSBRACKET       reduce using rule 61 (number_expr -> NUMBER .)
    SELECTOR        reduce using rule 61 (number_expr -> NUMBER .)
    LPAREN          reduce using rule 61 (number_expr -> NUMBER .)
    $end            reduce using rule 61 (number_expr -> NUMBER .)
    COMMA           reduce using rule 61 (number_expr -> NUMBER .)
    RSBRACKET       reduce using rule 61 (number_expr -> NUMBER .)
    END             reduce using rule 61 (number_expr -> NUMBER .)
    ELIF            reduce using rule 61 (number_expr -> NUMBER .)
    ELSE            reduce using rule 61 (number_expr -> NUMBER .)
    RPAREN          reduce using rule 61 (number_expr -> NUMBER .)
    SEMICOLON       reduce using rule 61 (number_expr -> NUMBER .)
    RCBRACKET       reduce using rule 61 (number_expr -> NUMBER .)


state 8

    (12) simple_stmt -> function_call .

    ID              reduce using rule 12 (simple_stmt -> function_call .)
    IF              reduce using rule 12 (simple_stmt -> function_call .)
    WHILE           reduce using rule 12 (simple_stmt -> function_call .)
    FOR             reduce using rule 12 (simple_stmt -> function_call .)
    FUN             reduce using rule 12 (simple_stmt -> function_call .)
    TRUE            reduce using rule 12 (simple_stmt -> function_call .)
    FALSE           reduce using rule 12 (simple_stmt -> function_call .)
    NOT             reduce using rule 12 (simple_stmt -> function_call .)
    NUMBER          reduce using rule 12 (simple_stmt -> function_call .)
    STRING1         reduce using rule 12 (simple_stmt -> function_call .)
    STRING2         reduce using rule 12 (simple_stmt -> function_call .)
    LSBRACKET       reduce using rule 12 (simple_stmt -> function_call .)
    SELECTOR        reduce using rule 12 (simple_stmt -> function_call .)
    LPAREN          reduce using rule 12 (simple_stmt -> function_call .)
    PLUS            reduce using rule 12 (simple_stmt -> function_call .)
    MINUS           reduce using rule 12 (simple_stmt -> function_call .)
    END             reduce using rule 12 (simple_stmt -> function_call .)
    ELIF            reduce using rule 12 (simple_stmt -> function_call .)
    ELSE            reduce using rule 12 (simple_stmt -> function_call .)
    $end            reduce using rule 12 (simple_stmt -> function_call .)


state 9

    (66) parse_text_expr -> SELECTOR . LPAREN elements RPAREN

    LPAREN          shift and go to state 52


state 10

    (45) expression -> binary_expr .

    PLUS            reduce using rule 45 (expression -> binary_expr .)
    MINUS           reduce using rule 45 (expression -> binary_expr .)
    MULTIPLY        reduce using rule 45 (expression -> binary_expr .)
    DIVIDE          reduce using rule 45 (expression -> binary_expr .)
    POW             reduce using rule 45 (expression -> binary_expr .)
    MOD             reduce using rule 45 (expression -> binary_expr .)
    AND             reduce using rule 45 (expression -> binary_expr .)
    OR              reduce using rule 45 (expression -> binary_expr .)
    XOR             reduce using rule 45 (expression -> binary_expr .)
    EQUALS          reduce using rule 45 (expression -> binary_expr .)
    NOT_EQUALS      reduce using rule 45 (expression -> binary_expr .)
    GREATER_THAN    reduce using rule 45 (expression -> binary_expr .)
    LESS_THAN       reduce using rule 45 (expression -> binary_expr .)
    GREATER_THAN_OR_EQUAL reduce using rule 45 (expression -> binary_expr .)
    LESS_THAN_OR_EQUAL reduce using rule 45 (expression -> binary_expr .)
    COMMA           reduce using rule 45 (expression -> binary_expr .)
    RPAREN          reduce using rule 45 (expression -> binary_expr .)
    ID              reduce using rule 45 (expression -> binary_expr .)
    IF              reduce using rule 45 (expression -> binary_expr .)
    WHILE           reduce using rule 45 (expression -> binary_expr .)
    FOR             reduce using rule 45 (expression -> binary_expr .)
    FUN             reduce using rule 45 (expression -> binary_expr .)
    TRUE            reduce using rule 45 (expression -> binary_expr .)
    FALSE           reduce using rule 45 (expression -> binary_expr .)
    NOT             reduce using rule 45 (expression -> binary_expr .)
    NUMBER          reduce using rule 45 (expression -> binary_expr .)
    STRING1         reduce using rule 45 (expression -> binary_expr .)
    STRING2         reduce using rule 45 (expression -> binary_expr .)
    LSBRACKET       reduce using rule 45 (expression -> binary_expr .)
    SELECTOR        reduce using rule 45 (expression -> binary_expr .)
    LPAREN          reduce using rule 45 (expression -> binary_expr .)
    ELIF            reduce using rule 45 (expression -> binary_expr .)
    ELSE            reduce using rule 45 (expression -> binary_expr .)
    END             reduce using rule 45 (expression -> binary_expr .)
    $end            reduce using rule 45 (expression -> binary_expr .)
    RSBRACKET       reduce using rule 45 (expression -> binary_expr .)
    DO              reduce using rule 45 (expression -> binary_expr .)
    SEMICOLON       reduce using rule 45 (expression -> binary_expr .)
    RCBRACKET       reduce using rule 45 (expression -> binary_expr .)


state 11

    (40) while_stmt -> WHILE . expression DO statements END
    (44) expression -> . unary_expr
    (45) expression -> . binary_expr
    (46) unary_expr -> . boolean_expr
    (47) unary_expr -> . not_expr
    (48) unary_expr -> . number_expr
    (49) unary_expr -> . id_expr
    (50) unary_expr -> . string_expr
    (51) unary_expr -> . list_expr
    (52) unary_expr -> . parse_text_expr
    (53) unary_expr -> . group_expr
    (54) unary_expr -> . uplus_expr
    (55) unary_expr -> . uminus_expr
    (56) binary_expr -> . arithmetic_expr
    (57) binary_expr -> . conditional_expr
    (58) boolean_expr -> . TRUE
    (59) boolean_expr -> . FALSE
    (60) not_expr -> . NOT expression
    (61) number_expr -> . NUMBER
    (62) id_expr -> . ID
    (63) string_expr -> . STRING1
    (64) string_expr -> . STRING2
    (65) list_expr -> . LSBRACKET elements RSBRACKET
    (66) parse_text_expr -> . SELECTOR LPAREN elements RPAREN
    (67) group_expr -> . LPAREN expression RPAREN
    (68) uplus_expr -> . PLUS expression
    (69) uminus_expr -> . MINUS expression
    (70) arithmetic_expr -> . expression PLUS expression
    (71) arithmetic_expr -> . expression MINUS expression
    (72) arithmetic_expr -> . expression MULTIPLY expression
    (73) arithmetic_expr -> . expression DIVIDE expression
    (74) arithmetic_expr -> . expression POW expression
    (75) arithmetic_expr -> . expression MOD expression
    (76) conditional_expr -> . expression AND expression
    (77) conditional_expr -> . expression OR expression
    (78) conditional_expr -> . expression XOR expression
    (79) conditional_expr -> . expression EQUALS expression
    (80) conditional_expr -> . expression NOT_EQUALS expression
    (81) conditional_expr -> . expression GREATER_THAN expression
    (82) conditional_expr -> . expression LESS_THAN expression
    (83) conditional_expr -> . expression GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> . expression LESS_THAN_OR_EQUAL expression

    TRUE            shift and go to state 15
    FALSE           shift and go to state 37
    NOT             shift and go to state 44
    NUMBER          shift and go to state 7
    ID              shift and go to state 49
    STRING1         shift and go to state 26
    STRING2         shift and go to state 25
    LSBRACKET       shift and go to state 4
    SELECTOR        shift and go to state 9
    LPAREN          shift and go to state 32
    PLUS            shift and go to state 24
    MINUS           shift and go to state 16

    conditional_expr               shift and go to state 12
    list_expr                      shift and go to state 1
    string_expr                    shift and go to state 18
    unary_expr                     shift and go to state 3
    uminus_expr                    shift and go to state 39
    id_expr                        shift and go to state 40
    group_expr                     shift and go to state 27
    arithmetic_expr                shift and go to state 19
    boolean_expr                   shift and go to state 41
    not_expr                       shift and go to state 6
    binary_expr                    shift and go to state 10
    number_expr                    shift and go to state 33
    parse_text_expr                shift and go to state 14
    uplus_expr                     shift and go to state 45
    expression                     shift and go to state 53

state 12

    (57) binary_expr -> conditional_expr .

    PLUS            reduce using rule 57 (binary_expr -> conditional_expr .)
    MINUS           reduce using rule 57 (binary_expr -> conditional_expr .)
    MULTIPLY        reduce using rule 57 (binary_expr -> conditional_expr .)
    DIVIDE          reduce using rule 57 (binary_expr -> conditional_expr .)
    POW             reduce using rule 57 (binary_expr -> conditional_expr .)
    MOD             reduce using rule 57 (binary_expr -> conditional_expr .)
    AND             reduce using rule 57 (binary_expr -> conditional_expr .)
    OR              reduce using rule 57 (binary_expr -> conditional_expr .)
    XOR             reduce using rule 57 (binary_expr -> conditional_expr .)
    EQUALS          reduce using rule 57 (binary_expr -> conditional_expr .)
    NOT_EQUALS      reduce using rule 57 (binary_expr -> conditional_expr .)
    GREATER_THAN    reduce using rule 57 (binary_expr -> conditional_expr .)
    LESS_THAN       reduce using rule 57 (binary_expr -> conditional_expr .)
    GREATER_THAN_OR_EQUAL reduce using rule 57 (binary_expr -> conditional_expr .)
    LESS_THAN_OR_EQUAL reduce using rule 57 (binary_expr -> conditional_expr .)
    ID              reduce using rule 57 (binary_expr -> conditional_expr .)
    IF              reduce using rule 57 (binary_expr -> conditional_expr .)
    WHILE           reduce using rule 57 (binary_expr -> conditional_expr .)
    FOR             reduce using rule 57 (binary_expr -> conditional_expr .)
    FUN             reduce using rule 57 (binary_expr -> conditional_expr .)
    TRUE            reduce using rule 57 (binary_expr -> conditional_expr .)
    FALSE           reduce using rule 57 (binary_expr -> conditional_expr .)
    NOT             reduce using rule 57 (binary_expr -> conditional_expr .)
    NUMBER          reduce using rule 57 (binary_expr -> conditional_expr .)
    STRING1         reduce using rule 57 (binary_expr -> conditional_expr .)
    STRING2         reduce using rule 57 (binary_expr -> conditional_expr .)
    LSBRACKET       reduce using rule 57 (binary_expr -> conditional_expr .)
    SELECTOR        reduce using rule 57 (binary_expr -> conditional_expr .)
    LPAREN          reduce using rule 57 (binary_expr -> conditional_expr .)
    $end            reduce using rule 57 (binary_expr -> conditional_expr .)
    COMMA           reduce using rule 57 (binary_expr -> conditional_expr .)
    RSBRACKET       reduce using rule 57 (binary_expr -> conditional_expr .)
    DO              reduce using rule 57 (binary_expr -> conditional_expr .)
    END             reduce using rule 57 (binary_expr -> conditional_expr .)
    ELIF            reduce using rule 57 (binary_expr -> conditional_expr .)
    ELSE            reduce using rule 57 (binary_expr -> conditional_expr .)
    RPAREN          reduce using rule 57 (binary_expr -> conditional_expr .)
    SEMICOLON       reduce using rule 57 (binary_expr -> conditional_expr .)
    RCBRACKET       reduce using rule 57 (binary_expr -> conditional_expr .)


state 13

    (42) function_decl -> FUN . ID LPAREN elements RPAREN DO statements END

    ID              shift and go to state 54


state 14

    (52) unary_expr -> parse_text_expr .

    PLUS            reduce using rule 52 (unary_expr -> parse_text_expr .)
    MINUS           reduce using rule 52 (unary_expr -> parse_text_expr .)
    MULTIPLY        reduce using rule 52 (unary_expr -> parse_text_expr .)
    DIVIDE          reduce using rule 52 (unary_expr -> parse_text_expr .)
    POW             reduce using rule 52 (unary_expr -> parse_text_expr .)
    MOD             reduce using rule 52 (unary_expr -> parse_text_expr .)
    AND             reduce using rule 52 (unary_expr -> parse_text_expr .)
    OR              reduce using rule 52 (unary_expr -> parse_text_expr .)
    XOR             reduce using rule 52 (unary_expr -> parse_text_expr .)
    EQUALS          reduce using rule 52 (unary_expr -> parse_text_expr .)
    NOT_EQUALS      reduce using rule 52 (unary_expr -> parse_text_expr .)
    GREATER_THAN    reduce using rule 52 (unary_expr -> parse_text_expr .)
    LESS_THAN       reduce using rule 52 (unary_expr -> parse_text_expr .)
    GREATER_THAN_OR_EQUAL reduce using rule 52 (unary_expr -> parse_text_expr .)
    LESS_THAN_OR_EQUAL reduce using rule 52 (unary_expr -> parse_text_expr .)
    ID              reduce using rule 52 (unary_expr -> parse_text_expr .)
    IF              reduce using rule 52 (unary_expr -> parse_text_expr .)
    WHILE           reduce using rule 52 (unary_expr -> parse_text_expr .)
    FOR             reduce using rule 52 (unary_expr -> parse_text_expr .)
    FUN             reduce using rule 52 (unary_expr -> parse_text_expr .)
    TRUE            reduce using rule 52 (unary_expr -> parse_text_expr .)
    FALSE           reduce using rule 52 (unary_expr -> parse_text_expr .)
    NOT             reduce using rule 52 (unary_expr -> parse_text_expr .)
    NUMBER          reduce using rule 52 (unary_expr -> parse_text_expr .)
    STRING1         reduce using rule 52 (unary_expr -> parse_text_expr .)
    STRING2         reduce using rule 52 (unary_expr -> parse_text_expr .)
    LSBRACKET       reduce using rule 52 (unary_expr -> parse_text_expr .)
    SELECTOR        reduce using rule 52 (unary_expr -> parse_text_expr .)
    LPAREN          reduce using rule 52 (unary_expr -> parse_text_expr .)
    $end            reduce using rule 52 (unary_expr -> parse_text_expr .)
    COMMA           reduce using rule 52 (unary_expr -> parse_text_expr .)
    RSBRACKET       reduce using rule 52 (unary_expr -> parse_text_expr .)
    DO              reduce using rule 52 (unary_expr -> parse_text_expr .)
    END             reduce using rule 52 (unary_expr -> parse_text_expr .)
    ELIF            reduce using rule 52 (unary_expr -> parse_text_expr .)
    ELSE            reduce using rule 52 (unary_expr -> parse_text_expr .)
    RPAREN          reduce using rule 52 (unary_expr -> parse_text_expr .)
    SEMICOLON       reduce using rule 52 (unary_expr -> parse_text_expr .)
    RCBRACKET       reduce using rule 52 (unary_expr -> parse_text_expr .)


state 15

    (58) boolean_expr -> TRUE .

    PLUS            reduce using rule 58 (boolean_expr -> TRUE .)
    MINUS           reduce using rule 58 (boolean_expr -> TRUE .)
    MULTIPLY        reduce using rule 58 (boolean_expr -> TRUE .)
    DIVIDE          reduce using rule 58 (boolean_expr -> TRUE .)
    POW             reduce using rule 58 (boolean_expr -> TRUE .)
    MOD             reduce using rule 58 (boolean_expr -> TRUE .)
    AND             reduce using rule 58 (boolean_expr -> TRUE .)
    OR              reduce using rule 58 (boolean_expr -> TRUE .)
    XOR             reduce using rule 58 (boolean_expr -> TRUE .)
    EQUALS          reduce using rule 58 (boolean_expr -> TRUE .)
    NOT_EQUALS      reduce using rule 58 (boolean_expr -> TRUE .)
    GREATER_THAN    reduce using rule 58 (boolean_expr -> TRUE .)
    LESS_THAN       reduce using rule 58 (boolean_expr -> TRUE .)
    GREATER_THAN_OR_EQUAL reduce using rule 58 (boolean_expr -> TRUE .)
    LESS_THAN_OR_EQUAL reduce using rule 58 (boolean_expr -> TRUE .)
    COMMA           reduce using rule 58 (boolean_expr -> TRUE .)
    RPAREN          reduce using rule 58 (boolean_expr -> TRUE .)
    ID              reduce using rule 58 (boolean_expr -> TRUE .)
    IF              reduce using rule 58 (boolean_expr -> TRUE .)
    WHILE           reduce using rule 58 (boolean_expr -> TRUE .)
    FOR             reduce using rule 58 (boolean_expr -> TRUE .)
    FUN             reduce using rule 58 (boolean_expr -> TRUE .)
    TRUE            reduce using rule 58 (boolean_expr -> TRUE .)
    FALSE           reduce using rule 58 (boolean_expr -> TRUE .)
    NOT             reduce using rule 58 (boolean_expr -> TRUE .)
    NUMBER          reduce using rule 58 (boolean_expr -> TRUE .)
    STRING1         reduce using rule 58 (boolean_expr -> TRUE .)
    STRING2         reduce using rule 58 (boolean_expr -> TRUE .)
    LSBRACKET       reduce using rule 58 (boolean_expr -> TRUE .)
    SELECTOR        reduce using rule 58 (boolean_expr -> TRUE .)
    LPAREN          reduce using rule 58 (boolean_expr -> TRUE .)
    $end            reduce using rule 58 (boolean_expr -> TRUE .)
    RSBRACKET       reduce using rule 58 (boolean_expr -> TRUE .)
    DO              reduce using rule 58 (boolean_expr -> TRUE .)
    END             reduce using rule 58 (boolean_expr -> TRUE .)
    ELIF            reduce using rule 58 (boolean_expr -> TRUE .)
    ELSE            reduce using rule 58 (boolean_expr -> TRUE .)
    SEMICOLON       reduce using rule 58 (boolean_expr -> TRUE .)
    RCBRACKET       reduce using rule 58 (boolean_expr -> TRUE .)


state 16

    (69) uminus_expr -> MINUS . expression
    (44) expression -> . unary_expr
    (45) expression -> . binary_expr
    (46) unary_expr -> . boolean_expr
    (47) unary_expr -> . not_expr
    (48) unary_expr -> . number_expr
    (49) unary_expr -> . id_expr
    (50) unary_expr -> . string_expr
    (51) unary_expr -> . list_expr
    (52) unary_expr -> . parse_text_expr
    (53) unary_expr -> . group_expr
    (54) unary_expr -> . uplus_expr
    (55) unary_expr -> . uminus_expr
    (56) binary_expr -> . arithmetic_expr
    (57) binary_expr -> . conditional_expr
    (58) boolean_expr -> . TRUE
    (59) boolean_expr -> . FALSE
    (60) not_expr -> . NOT expression
    (61) number_expr -> . NUMBER
    (62) id_expr -> . ID
    (63) string_expr -> . STRING1
    (64) string_expr -> . STRING2
    (65) list_expr -> . LSBRACKET elements RSBRACKET
    (66) parse_text_expr -> . SELECTOR LPAREN elements RPAREN
    (67) group_expr -> . LPAREN expression RPAREN
    (68) uplus_expr -> . PLUS expression
    (69) uminus_expr -> . MINUS expression
    (70) arithmetic_expr -> . expression PLUS expression
    (71) arithmetic_expr -> . expression MINUS expression
    (72) arithmetic_expr -> . expression MULTIPLY expression
    (73) arithmetic_expr -> . expression DIVIDE expression
    (74) arithmetic_expr -> . expression POW expression
    (75) arithmetic_expr -> . expression MOD expression
    (76) conditional_expr -> . expression AND expression
    (77) conditional_expr -> . expression OR expression
    (78) conditional_expr -> . expression XOR expression
    (79) conditional_expr -> . expression EQUALS expression
    (80) conditional_expr -> . expression NOT_EQUALS expression
    (81) conditional_expr -> . expression GREATER_THAN expression
    (82) conditional_expr -> . expression LESS_THAN expression
    (83) conditional_expr -> . expression GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> . expression LESS_THAN_OR_EQUAL expression

    TRUE            shift and go to state 15
    FALSE           shift and go to state 37
    NOT             shift and go to state 44
    NUMBER          shift and go to state 7
    ID              shift and go to state 49
    STRING1         shift and go to state 26
    STRING2         shift and go to state 25
    LSBRACKET       shift and go to state 4
    SELECTOR        shift and go to state 9
    LPAREN          shift and go to state 32
    PLUS            shift and go to state 24
    MINUS           shift and go to state 16

    conditional_expr               shift and go to state 12
    list_expr                      shift and go to state 1
    number_expr                    shift and go to state 33
    string_expr                    shift and go to state 18
    unary_expr                     shift and go to state 3
    uminus_expr                    shift and go to state 39
    id_expr                        shift and go to state 40
    group_expr                     shift and go to state 27
    arithmetic_expr                shift and go to state 19
    boolean_expr                   shift and go to state 41
    not_expr                       shift and go to state 6
    binary_expr                    shift and go to state 10
    parse_text_expr                shift and go to state 14
    uplus_expr                     shift and go to state 45
    expression                     shift and go to state 55

state 17

    (10) simple_stmt -> list_stmt .

    ID              reduce using rule 10 (simple_stmt -> list_stmt .)
    IF              reduce using rule 10 (simple_stmt -> list_stmt .)
    WHILE           reduce using rule 10 (simple_stmt -> list_stmt .)
    FOR             reduce using rule 10 (simple_stmt -> list_stmt .)
    FUN             reduce using rule 10 (simple_stmt -> list_stmt .)
    TRUE            reduce using rule 10 (simple_stmt -> list_stmt .)
    FALSE           reduce using rule 10 (simple_stmt -> list_stmt .)
    NOT             reduce using rule 10 (simple_stmt -> list_stmt .)
    NUMBER          reduce using rule 10 (simple_stmt -> list_stmt .)
    STRING1         reduce using rule 10 (simple_stmt -> list_stmt .)
    STRING2         reduce using rule 10 (simple_stmt -> list_stmt .)
    LSBRACKET       reduce using rule 10 (simple_stmt -> list_stmt .)
    SELECTOR        reduce using rule 10 (simple_stmt -> list_stmt .)
    LPAREN          reduce using rule 10 (simple_stmt -> list_stmt .)
    PLUS            reduce using rule 10 (simple_stmt -> list_stmt .)
    MINUS           reduce using rule 10 (simple_stmt -> list_stmt .)
    END             reduce using rule 10 (simple_stmt -> list_stmt .)
    ELIF            reduce using rule 10 (simple_stmt -> list_stmt .)
    ELSE            reduce using rule 10 (simple_stmt -> list_stmt .)
    $end            reduce using rule 10 (simple_stmt -> list_stmt .)


state 18

    (50) unary_expr -> string_expr .

    PLUS            reduce using rule 50 (unary_expr -> string_expr .)
    MINUS           reduce using rule 50 (unary_expr -> string_expr .)
    MULTIPLY        reduce using rule 50 (unary_expr -> string_expr .)
    DIVIDE          reduce using rule 50 (unary_expr -> string_expr .)
    POW             reduce using rule 50 (unary_expr -> string_expr .)
    MOD             reduce using rule 50 (unary_expr -> string_expr .)
    AND             reduce using rule 50 (unary_expr -> string_expr .)
    OR              reduce using rule 50 (unary_expr -> string_expr .)
    XOR             reduce using rule 50 (unary_expr -> string_expr .)
    EQUALS          reduce using rule 50 (unary_expr -> string_expr .)
    NOT_EQUALS      reduce using rule 50 (unary_expr -> string_expr .)
    GREATER_THAN    reduce using rule 50 (unary_expr -> string_expr .)
    LESS_THAN       reduce using rule 50 (unary_expr -> string_expr .)
    GREATER_THAN_OR_EQUAL reduce using rule 50 (unary_expr -> string_expr .)
    LESS_THAN_OR_EQUAL reduce using rule 50 (unary_expr -> string_expr .)
    ID              reduce using rule 50 (unary_expr -> string_expr .)
    IF              reduce using rule 50 (unary_expr -> string_expr .)
    WHILE           reduce using rule 50 (unary_expr -> string_expr .)
    FOR             reduce using rule 50 (unary_expr -> string_expr .)
    FUN             reduce using rule 50 (unary_expr -> string_expr .)
    TRUE            reduce using rule 50 (unary_expr -> string_expr .)
    FALSE           reduce using rule 50 (unary_expr -> string_expr .)
    NOT             reduce using rule 50 (unary_expr -> string_expr .)
    NUMBER          reduce using rule 50 (unary_expr -> string_expr .)
    STRING1         reduce using rule 50 (unary_expr -> string_expr .)
    STRING2         reduce using rule 50 (unary_expr -> string_expr .)
    LSBRACKET       reduce using rule 50 (unary_expr -> string_expr .)
    SELECTOR        reduce using rule 50 (unary_expr -> string_expr .)
    LPAREN          reduce using rule 50 (unary_expr -> string_expr .)
    $end            reduce using rule 50 (unary_expr -> string_expr .)
    COMMA           reduce using rule 50 (unary_expr -> string_expr .)
    RSBRACKET       reduce using rule 50 (unary_expr -> string_expr .)
    DO              reduce using rule 50 (unary_expr -> string_expr .)
    END             reduce using rule 50 (unary_expr -> string_expr .)
    ELIF            reduce using rule 50 (unary_expr -> string_expr .)
    ELSE            reduce using rule 50 (unary_expr -> string_expr .)
    RPAREN          reduce using rule 50 (unary_expr -> string_expr .)
    SEMICOLON       reduce using rule 50 (unary_expr -> string_expr .)
    RCBRACKET       reduce using rule 50 (unary_expr -> string_expr .)


state 19

    (56) binary_expr -> arithmetic_expr .

    PLUS            reduce using rule 56 (binary_expr -> arithmetic_expr .)
    MINUS           reduce using rule 56 (binary_expr -> arithmetic_expr .)
    MULTIPLY        reduce using rule 56 (binary_expr -> arithmetic_expr .)
    DIVIDE          reduce using rule 56 (binary_expr -> arithmetic_expr .)
    POW             reduce using rule 56 (binary_expr -> arithmetic_expr .)
    MOD             reduce using rule 56 (binary_expr -> arithmetic_expr .)
    AND             reduce using rule 56 (binary_expr -> arithmetic_expr .)
    OR              reduce using rule 56 (binary_expr -> arithmetic_expr .)
    XOR             reduce using rule 56 (binary_expr -> arithmetic_expr .)
    EQUALS          reduce using rule 56 (binary_expr -> arithmetic_expr .)
    NOT_EQUALS      reduce using rule 56 (binary_expr -> arithmetic_expr .)
    GREATER_THAN    reduce using rule 56 (binary_expr -> arithmetic_expr .)
    LESS_THAN       reduce using rule 56 (binary_expr -> arithmetic_expr .)
    GREATER_THAN_OR_EQUAL reduce using rule 56 (binary_expr -> arithmetic_expr .)
    LESS_THAN_OR_EQUAL reduce using rule 56 (binary_expr -> arithmetic_expr .)
    ID              reduce using rule 56 (binary_expr -> arithmetic_expr .)
    IF              reduce using rule 56 (binary_expr -> arithmetic_expr .)
    WHILE           reduce using rule 56 (binary_expr -> arithmetic_expr .)
    FOR             reduce using rule 56 (binary_expr -> arithmetic_expr .)
    FUN             reduce using rule 56 (binary_expr -> arithmetic_expr .)
    TRUE            reduce using rule 56 (binary_expr -> arithmetic_expr .)
    FALSE           reduce using rule 56 (binary_expr -> arithmetic_expr .)
    NOT             reduce using rule 56 (binary_expr -> arithmetic_expr .)
    NUMBER          reduce using rule 56 (binary_expr -> arithmetic_expr .)
    STRING1         reduce using rule 56 (binary_expr -> arithmetic_expr .)
    STRING2         reduce using rule 56 (binary_expr -> arithmetic_expr .)
    LSBRACKET       reduce using rule 56 (binary_expr -> arithmetic_expr .)
    SELECTOR        reduce using rule 56 (binary_expr -> arithmetic_expr .)
    LPAREN          reduce using rule 56 (binary_expr -> arithmetic_expr .)
    $end            reduce using rule 56 (binary_expr -> arithmetic_expr .)
    COMMA           reduce using rule 56 (binary_expr -> arithmetic_expr .)
    RSBRACKET       reduce using rule 56 (binary_expr -> arithmetic_expr .)
    DO              reduce using rule 56 (binary_expr -> arithmetic_expr .)
    END             reduce using rule 56 (binary_expr -> arithmetic_expr .)
    ELIF            reduce using rule 56 (binary_expr -> arithmetic_expr .)
    ELSE            reduce using rule 56 (binary_expr -> arithmetic_expr .)
    RPAREN          reduce using rule 56 (binary_expr -> arithmetic_expr .)
    SEMICOLON       reduce using rule 56 (binary_expr -> arithmetic_expr .)
    RCBRACKET       reduce using rule 56 (binary_expr -> arithmetic_expr .)


state 20

    (7) simple_stmt -> assign_stmt .

    ID              reduce using rule 7 (simple_stmt -> assign_stmt .)
    IF              reduce using rule 7 (simple_stmt -> assign_stmt .)
    WHILE           reduce using rule 7 (simple_stmt -> assign_stmt .)
    FOR             reduce using rule 7 (simple_stmt -> assign_stmt .)
    FUN             reduce using rule 7 (simple_stmt -> assign_stmt .)
    TRUE            reduce using rule 7 (simple_stmt -> assign_stmt .)
    FALSE           reduce using rule 7 (simple_stmt -> assign_stmt .)
    NOT             reduce using rule 7 (simple_stmt -> assign_stmt .)
    NUMBER          reduce using rule 7 (simple_stmt -> assign_stmt .)
    STRING1         reduce using rule 7 (simple_stmt -> assign_stmt .)
    STRING2         reduce using rule 7 (simple_stmt -> assign_stmt .)
    LSBRACKET       reduce using rule 7 (simple_stmt -> assign_stmt .)
    SELECTOR        reduce using rule 7 (simple_stmt -> assign_stmt .)
    LPAREN          reduce using rule 7 (simple_stmt -> assign_stmt .)
    PLUS            reduce using rule 7 (simple_stmt -> assign_stmt .)
    MINUS           reduce using rule 7 (simple_stmt -> assign_stmt .)
    END             reduce using rule 7 (simple_stmt -> assign_stmt .)
    ELIF            reduce using rule 7 (simple_stmt -> assign_stmt .)
    ELSE            reduce using rule 7 (simple_stmt -> assign_stmt .)
    $end            reduce using rule 7 (simple_stmt -> assign_stmt .)


state 21

    (0) S' -> start .



state 22

    (6) simple_stmt -> expression_stmt .

    ID              reduce using rule 6 (simple_stmt -> expression_stmt .)
    IF              reduce using rule 6 (simple_stmt -> expression_stmt .)
    WHILE           reduce using rule 6 (simple_stmt -> expression_stmt .)
    FOR             reduce using rule 6 (simple_stmt -> expression_stmt .)
    FUN             reduce using rule 6 (simple_stmt -> expression_stmt .)
    TRUE            reduce using rule 6 (simple_stmt -> expression_stmt .)
    FALSE           reduce using rule 6 (simple_stmt -> expression_stmt .)
    NOT             reduce using rule 6 (simple_stmt -> expression_stmt .)
    NUMBER          reduce using rule 6 (simple_stmt -> expression_stmt .)
    STRING1         reduce using rule 6 (simple_stmt -> expression_stmt .)
    STRING2         reduce using rule 6 (simple_stmt -> expression_stmt .)
    LSBRACKET       reduce using rule 6 (simple_stmt -> expression_stmt .)
    SELECTOR        reduce using rule 6 (simple_stmt -> expression_stmt .)
    LPAREN          reduce using rule 6 (simple_stmt -> expression_stmt .)
    PLUS            reduce using rule 6 (simple_stmt -> expression_stmt .)
    MINUS           reduce using rule 6 (simple_stmt -> expression_stmt .)
    END             reduce using rule 6 (simple_stmt -> expression_stmt .)
    ELIF            reduce using rule 6 (simple_stmt -> expression_stmt .)
    ELSE            reduce using rule 6 (simple_stmt -> expression_stmt .)
    $end            reduce using rule 6 (simple_stmt -> expression_stmt .)


state 23

    (2) statements -> statement . statements
    (3) statements -> statement .
    (2) statements -> . statement statements
    (3) statements -> . statement
    (4) statement -> . simple_stmt
    (5) statement -> . compound_stmt
    (6) simple_stmt -> . expression_stmt
    (7) simple_stmt -> . assign_stmt
    (8) simple_stmt -> . increment_stmt
    (9) simple_stmt -> . decrement_stmt
    (10) simple_stmt -> . list_stmt
    (11) simple_stmt -> . dictionary_stmt
    (12) simple_stmt -> . function_call
    (13) compound_stmt -> . if_stmt
    (14) compound_stmt -> . while_stmt
    (15) compound_stmt -> . for_stmt
    (16) compound_stmt -> . function_decl
    (17) expression_stmt -> . expression
    (18) assign_stmt -> . ID ASSIGN expression SEMICOLON
    (19) increment_stmt -> . expression PLUS PLUS SEMICOLON
    (20) decrement_stmt -> . expression MINUS MINUS SEMICOLON
    (21) list_stmt -> . ID ASSIGN LSBRACKET elements RSBRACKET SEMICOLON
    (26) dictionary_stmt -> . ID ASSIGN LCBRACKET dictionary_objects RCBRACKET SEMICOLON
    (43) function_call -> . ID LPAREN elements RPAREN SEMICOLON
    (34) if_stmt -> . IF expression DO statements elif_blocks END
    (40) while_stmt -> . WHILE expression DO statements END
    (41) for_stmt -> . FOR EACH ID IN element DO statements END
    (42) function_decl -> . FUN ID LPAREN elements RPAREN DO statements END
    (44) expression -> . unary_expr
    (45) expression -> . binary_expr
    (46) unary_expr -> . boolean_expr
    (47) unary_expr -> . not_expr
    (48) unary_expr -> . number_expr
    (49) unary_expr -> . id_expr
    (50) unary_expr -> . string_expr
    (51) unary_expr -> . list_expr
    (52) unary_expr -> . parse_text_expr
    (53) unary_expr -> . group_expr
    (54) unary_expr -> . uplus_expr
    (55) unary_expr -> . uminus_expr
    (56) binary_expr -> . arithmetic_expr
    (57) binary_expr -> . conditional_expr
    (58) boolean_expr -> . TRUE
    (59) boolean_expr -> . FALSE
    (60) not_expr -> . NOT expression
    (61) number_expr -> . NUMBER
    (62) id_expr -> . ID
    (63) string_expr -> . STRING1
    (64) string_expr -> . STRING2
    (65) list_expr -> . LSBRACKET elements RSBRACKET
    (66) parse_text_expr -> . SELECTOR LPAREN elements RPAREN
    (67) group_expr -> . LPAREN expression RPAREN
    (68) uplus_expr -> . PLUS expression
    (69) uminus_expr -> . MINUS expression
    (70) arithmetic_expr -> . expression PLUS expression
    (71) arithmetic_expr -> . expression MINUS expression
    (72) arithmetic_expr -> . expression MULTIPLY expression
    (73) arithmetic_expr -> . expression DIVIDE expression
    (74) arithmetic_expr -> . expression POW expression
    (75) arithmetic_expr -> . expression MOD expression
    (76) conditional_expr -> . expression AND expression
    (77) conditional_expr -> . expression OR expression
    (78) conditional_expr -> . expression XOR expression
    (79) conditional_expr -> . expression EQUALS expression
    (80) conditional_expr -> . expression NOT_EQUALS expression
    (81) conditional_expr -> . expression GREATER_THAN expression
    (82) conditional_expr -> . expression LESS_THAN expression
    (83) conditional_expr -> . expression GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> . expression LESS_THAN_OR_EQUAL expression

    $end            reduce using rule 3 (statements -> statement .)
    END             reduce using rule 3 (statements -> statement .)
    ELIF            reduce using rule 3 (statements -> statement .)
    ELSE            reduce using rule 3 (statements -> statement .)
    ID              shift and go to state 34
    IF              shift and go to state 35
    WHILE           shift and go to state 11
    FOR             shift and go to state 28
    FUN             shift and go to state 13
    TRUE            shift and go to state 15
    FALSE           shift and go to state 37
    NOT             shift and go to state 44
    NUMBER          shift and go to state 7
    STRING1         shift and go to state 26
    STRING2         shift and go to state 25
    LSBRACKET       shift and go to state 4
    SELECTOR        shift and go to state 9
    LPAREN          shift and go to state 32
    PLUS            shift and go to state 24
    MINUS           shift and go to state 16

    list_expr                      shift and go to state 1
    statements                     shift and go to state 56
    unary_expr                     shift and go to state 3
    dictionary_stmt                shift and go to state 5
    group_expr                     shift and go to state 27
    function_call                  shift and go to state 8
    parse_text_expr                shift and go to state 14
    conditional_expr               shift and go to state 12
    list_stmt                      shift and go to state 17
    number_expr                    shift and go to state 33
    string_expr                    shift and go to state 18
    assign_stmt                    shift and go to state 20
    arithmetic_expr                shift and go to state 19
    expression_stmt                shift and go to state 22
    statement                      shift and go to state 23
    compound_stmt                  shift and go to state 42
    simple_stmt                    shift and go to state 29
    function_decl                  shift and go to state 30
    for_stmt                       shift and go to state 31
    not_expr                       shift and go to state 6
    binary_expr                    shift and go to state 10
    decrement_stmt                 shift and go to state 36
    if_stmt                        shift and go to state 38
    uminus_expr                    shift and go to state 39
    id_expr                        shift and go to state 40
    boolean_expr                   shift and go to state 41
    while_stmt                     shift and go to state 43
    uplus_expr                     shift and go to state 45
    expression                     shift and go to state 46
    increment_stmt                 shift and go to state 47

state 24

    (68) uplus_expr -> PLUS . expression
    (44) expression -> . unary_expr
    (45) expression -> . binary_expr
    (46) unary_expr -> . boolean_expr
    (47) unary_expr -> . not_expr
    (48) unary_expr -> . number_expr
    (49) unary_expr -> . id_expr
    (50) unary_expr -> . string_expr
    (51) unary_expr -> . list_expr
    (52) unary_expr -> . parse_text_expr
    (53) unary_expr -> . group_expr
    (54) unary_expr -> . uplus_expr
    (55) unary_expr -> . uminus_expr
    (56) binary_expr -> . arithmetic_expr
    (57) binary_expr -> . conditional_expr
    (58) boolean_expr -> . TRUE
    (59) boolean_expr -> . FALSE
    (60) not_expr -> . NOT expression
    (61) number_expr -> . NUMBER
    (62) id_expr -> . ID
    (63) string_expr -> . STRING1
    (64) string_expr -> . STRING2
    (65) list_expr -> . LSBRACKET elements RSBRACKET
    (66) parse_text_expr -> . SELECTOR LPAREN elements RPAREN
    (67) group_expr -> . LPAREN expression RPAREN
    (68) uplus_expr -> . PLUS expression
    (69) uminus_expr -> . MINUS expression
    (70) arithmetic_expr -> . expression PLUS expression
    (71) arithmetic_expr -> . expression MINUS expression
    (72) arithmetic_expr -> . expression MULTIPLY expression
    (73) arithmetic_expr -> . expression DIVIDE expression
    (74) arithmetic_expr -> . expression POW expression
    (75) arithmetic_expr -> . expression MOD expression
    (76) conditional_expr -> . expression AND expression
    (77) conditional_expr -> . expression OR expression
    (78) conditional_expr -> . expression XOR expression
    (79) conditional_expr -> . expression EQUALS expression
    (80) conditional_expr -> . expression NOT_EQUALS expression
    (81) conditional_expr -> . expression GREATER_THAN expression
    (82) conditional_expr -> . expression LESS_THAN expression
    (83) conditional_expr -> . expression GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> . expression LESS_THAN_OR_EQUAL expression

    TRUE            shift and go to state 15
    FALSE           shift and go to state 37
    NOT             shift and go to state 44
    NUMBER          shift and go to state 7
    ID              shift and go to state 49
    STRING1         shift and go to state 26
    STRING2         shift and go to state 25
    LSBRACKET       shift and go to state 4
    SELECTOR        shift and go to state 9
    LPAREN          shift and go to state 32
    PLUS            shift and go to state 24
    MINUS           shift and go to state 16

    conditional_expr               shift and go to state 12
    list_expr                      shift and go to state 1
    number_expr                    shift and go to state 33
    string_expr                    shift and go to state 18
    unary_expr                     shift and go to state 3
    uminus_expr                    shift and go to state 39
    id_expr                        shift and go to state 40
    group_expr                     shift and go to state 27
    arithmetic_expr                shift and go to state 19
    boolean_expr                   shift and go to state 41
    not_expr                       shift and go to state 6
    binary_expr                    shift and go to state 10
    parse_text_expr                shift and go to state 14
    uplus_expr                     shift and go to state 45
    expression                     shift and go to state 57

state 25

    (64) string_expr -> STRING2 .

    PLUS            reduce using rule 64 (string_expr -> STRING2 .)
    MINUS           reduce using rule 64 (string_expr -> STRING2 .)
    MULTIPLY        reduce using rule 64 (string_expr -> STRING2 .)
    DIVIDE          reduce using rule 64 (string_expr -> STRING2 .)
    POW             reduce using rule 64 (string_expr -> STRING2 .)
    MOD             reduce using rule 64 (string_expr -> STRING2 .)
    AND             reduce using rule 64 (string_expr -> STRING2 .)
    OR              reduce using rule 64 (string_expr -> STRING2 .)
    XOR             reduce using rule 64 (string_expr -> STRING2 .)
    EQUALS          reduce using rule 64 (string_expr -> STRING2 .)
    NOT_EQUALS      reduce using rule 64 (string_expr -> STRING2 .)
    GREATER_THAN    reduce using rule 64 (string_expr -> STRING2 .)
    LESS_THAN       reduce using rule 64 (string_expr -> STRING2 .)
    GREATER_THAN_OR_EQUAL reduce using rule 64 (string_expr -> STRING2 .)
    LESS_THAN_OR_EQUAL reduce using rule 64 (string_expr -> STRING2 .)
    ID              reduce using rule 64 (string_expr -> STRING2 .)
    IF              reduce using rule 64 (string_expr -> STRING2 .)
    WHILE           reduce using rule 64 (string_expr -> STRING2 .)
    FOR             reduce using rule 64 (string_expr -> STRING2 .)
    FUN             reduce using rule 64 (string_expr -> STRING2 .)
    TRUE            reduce using rule 64 (string_expr -> STRING2 .)
    FALSE           reduce using rule 64 (string_expr -> STRING2 .)
    NOT             reduce using rule 64 (string_expr -> STRING2 .)
    NUMBER          reduce using rule 64 (string_expr -> STRING2 .)
    STRING1         reduce using rule 64 (string_expr -> STRING2 .)
    STRING2         reduce using rule 64 (string_expr -> STRING2 .)
    LSBRACKET       reduce using rule 64 (string_expr -> STRING2 .)
    SELECTOR        reduce using rule 64 (string_expr -> STRING2 .)
    LPAREN          reduce using rule 64 (string_expr -> STRING2 .)
    $end            reduce using rule 64 (string_expr -> STRING2 .)
    COMMA           reduce using rule 64 (string_expr -> STRING2 .)
    RSBRACKET       reduce using rule 64 (string_expr -> STRING2 .)
    DO              reduce using rule 64 (string_expr -> STRING2 .)
    END             reduce using rule 64 (string_expr -> STRING2 .)
    ELIF            reduce using rule 64 (string_expr -> STRING2 .)
    ELSE            reduce using rule 64 (string_expr -> STRING2 .)
    RPAREN          reduce using rule 64 (string_expr -> STRING2 .)
    SEMICOLON       reduce using rule 64 (string_expr -> STRING2 .)
    RCBRACKET       reduce using rule 64 (string_expr -> STRING2 .)


state 26

    (63) string_expr -> STRING1 .

    PLUS            reduce using rule 63 (string_expr -> STRING1 .)
    MINUS           reduce using rule 63 (string_expr -> STRING1 .)
    MULTIPLY        reduce using rule 63 (string_expr -> STRING1 .)
    DIVIDE          reduce using rule 63 (string_expr -> STRING1 .)
    POW             reduce using rule 63 (string_expr -> STRING1 .)
    MOD             reduce using rule 63 (string_expr -> STRING1 .)
    AND             reduce using rule 63 (string_expr -> STRING1 .)
    OR              reduce using rule 63 (string_expr -> STRING1 .)
    XOR             reduce using rule 63 (string_expr -> STRING1 .)
    EQUALS          reduce using rule 63 (string_expr -> STRING1 .)
    NOT_EQUALS      reduce using rule 63 (string_expr -> STRING1 .)
    GREATER_THAN    reduce using rule 63 (string_expr -> STRING1 .)
    LESS_THAN       reduce using rule 63 (string_expr -> STRING1 .)
    GREATER_THAN_OR_EQUAL reduce using rule 63 (string_expr -> STRING1 .)
    LESS_THAN_OR_EQUAL reduce using rule 63 (string_expr -> STRING1 .)
    ID              reduce using rule 63 (string_expr -> STRING1 .)
    IF              reduce using rule 63 (string_expr -> STRING1 .)
    WHILE           reduce using rule 63 (string_expr -> STRING1 .)
    FOR             reduce using rule 63 (string_expr -> STRING1 .)
    FUN             reduce using rule 63 (string_expr -> STRING1 .)
    TRUE            reduce using rule 63 (string_expr -> STRING1 .)
    FALSE           reduce using rule 63 (string_expr -> STRING1 .)
    NOT             reduce using rule 63 (string_expr -> STRING1 .)
    NUMBER          reduce using rule 63 (string_expr -> STRING1 .)
    STRING1         reduce using rule 63 (string_expr -> STRING1 .)
    STRING2         reduce using rule 63 (string_expr -> STRING1 .)
    LSBRACKET       reduce using rule 63 (string_expr -> STRING1 .)
    SELECTOR        reduce using rule 63 (string_expr -> STRING1 .)
    LPAREN          reduce using rule 63 (string_expr -> STRING1 .)
    $end            reduce using rule 63 (string_expr -> STRING1 .)
    COMMA           reduce using rule 63 (string_expr -> STRING1 .)
    RSBRACKET       reduce using rule 63 (string_expr -> STRING1 .)
    DO              reduce using rule 63 (string_expr -> STRING1 .)
    END             reduce using rule 63 (string_expr -> STRING1 .)
    ELIF            reduce using rule 63 (string_expr -> STRING1 .)
    ELSE            reduce using rule 63 (string_expr -> STRING1 .)
    RPAREN          reduce using rule 63 (string_expr -> STRING1 .)
    SEMICOLON       reduce using rule 63 (string_expr -> STRING1 .)
    RCBRACKET       reduce using rule 63 (string_expr -> STRING1 .)


state 27

    (53) unary_expr -> group_expr .

    PLUS            reduce using rule 53 (unary_expr -> group_expr .)
    MINUS           reduce using rule 53 (unary_expr -> group_expr .)
    MULTIPLY        reduce using rule 53 (unary_expr -> group_expr .)
    DIVIDE          reduce using rule 53 (unary_expr -> group_expr .)
    POW             reduce using rule 53 (unary_expr -> group_expr .)
    MOD             reduce using rule 53 (unary_expr -> group_expr .)
    AND             reduce using rule 53 (unary_expr -> group_expr .)
    OR              reduce using rule 53 (unary_expr -> group_expr .)
    XOR             reduce using rule 53 (unary_expr -> group_expr .)
    EQUALS          reduce using rule 53 (unary_expr -> group_expr .)
    NOT_EQUALS      reduce using rule 53 (unary_expr -> group_expr .)
    GREATER_THAN    reduce using rule 53 (unary_expr -> group_expr .)
    LESS_THAN       reduce using rule 53 (unary_expr -> group_expr .)
    GREATER_THAN_OR_EQUAL reduce using rule 53 (unary_expr -> group_expr .)
    LESS_THAN_OR_EQUAL reduce using rule 53 (unary_expr -> group_expr .)
    ID              reduce using rule 53 (unary_expr -> group_expr .)
    IF              reduce using rule 53 (unary_expr -> group_expr .)
    WHILE           reduce using rule 53 (unary_expr -> group_expr .)
    FOR             reduce using rule 53 (unary_expr -> group_expr .)
    FUN             reduce using rule 53 (unary_expr -> group_expr .)
    TRUE            reduce using rule 53 (unary_expr -> group_expr .)
    FALSE           reduce using rule 53 (unary_expr -> group_expr .)
    NOT             reduce using rule 53 (unary_expr -> group_expr .)
    NUMBER          reduce using rule 53 (unary_expr -> group_expr .)
    STRING1         reduce using rule 53 (unary_expr -> group_expr .)
    STRING2         reduce using rule 53 (unary_expr -> group_expr .)
    LSBRACKET       reduce using rule 53 (unary_expr -> group_expr .)
    SELECTOR        reduce using rule 53 (unary_expr -> group_expr .)
    LPAREN          reduce using rule 53 (unary_expr -> group_expr .)
    $end            reduce using rule 53 (unary_expr -> group_expr .)
    COMMA           reduce using rule 53 (unary_expr -> group_expr .)
    RSBRACKET       reduce using rule 53 (unary_expr -> group_expr .)
    DO              reduce using rule 53 (unary_expr -> group_expr .)
    END             reduce using rule 53 (unary_expr -> group_expr .)
    ELIF            reduce using rule 53 (unary_expr -> group_expr .)
    ELSE            reduce using rule 53 (unary_expr -> group_expr .)
    RPAREN          reduce using rule 53 (unary_expr -> group_expr .)
    SEMICOLON       reduce using rule 53 (unary_expr -> group_expr .)
    RCBRACKET       reduce using rule 53 (unary_expr -> group_expr .)


state 28

    (41) for_stmt -> FOR . EACH ID IN element DO statements END

    EACH            shift and go to state 58


state 29

    (4) statement -> simple_stmt .

    ID              reduce using rule 4 (statement -> simple_stmt .)
    IF              reduce using rule 4 (statement -> simple_stmt .)
    WHILE           reduce using rule 4 (statement -> simple_stmt .)
    FOR             reduce using rule 4 (statement -> simple_stmt .)
    FUN             reduce using rule 4 (statement -> simple_stmt .)
    TRUE            reduce using rule 4 (statement -> simple_stmt .)
    FALSE           reduce using rule 4 (statement -> simple_stmt .)
    NOT             reduce using rule 4 (statement -> simple_stmt .)
    NUMBER          reduce using rule 4 (statement -> simple_stmt .)
    STRING1         reduce using rule 4 (statement -> simple_stmt .)
    STRING2         reduce using rule 4 (statement -> simple_stmt .)
    LSBRACKET       reduce using rule 4 (statement -> simple_stmt .)
    SELECTOR        reduce using rule 4 (statement -> simple_stmt .)
    LPAREN          reduce using rule 4 (statement -> simple_stmt .)
    PLUS            reduce using rule 4 (statement -> simple_stmt .)
    MINUS           reduce using rule 4 (statement -> simple_stmt .)
    END             reduce using rule 4 (statement -> simple_stmt .)
    $end            reduce using rule 4 (statement -> simple_stmt .)
    ELIF            reduce using rule 4 (statement -> simple_stmt .)
    ELSE            reduce using rule 4 (statement -> simple_stmt .)


state 30

    (16) compound_stmt -> function_decl .

    ID              reduce using rule 16 (compound_stmt -> function_decl .)
    IF              reduce using rule 16 (compound_stmt -> function_decl .)
    WHILE           reduce using rule 16 (compound_stmt -> function_decl .)
    FOR             reduce using rule 16 (compound_stmt -> function_decl .)
    FUN             reduce using rule 16 (compound_stmt -> function_decl .)
    TRUE            reduce using rule 16 (compound_stmt -> function_decl .)
    FALSE           reduce using rule 16 (compound_stmt -> function_decl .)
    NOT             reduce using rule 16 (compound_stmt -> function_decl .)
    NUMBER          reduce using rule 16 (compound_stmt -> function_decl .)
    STRING1         reduce using rule 16 (compound_stmt -> function_decl .)
    STRING2         reduce using rule 16 (compound_stmt -> function_decl .)
    LSBRACKET       reduce using rule 16 (compound_stmt -> function_decl .)
    SELECTOR        reduce using rule 16 (compound_stmt -> function_decl .)
    LPAREN          reduce using rule 16 (compound_stmt -> function_decl .)
    PLUS            reduce using rule 16 (compound_stmt -> function_decl .)
    MINUS           reduce using rule 16 (compound_stmt -> function_decl .)
    END             reduce using rule 16 (compound_stmt -> function_decl .)
    ELIF            reduce using rule 16 (compound_stmt -> function_decl .)
    ELSE            reduce using rule 16 (compound_stmt -> function_decl .)
    $end            reduce using rule 16 (compound_stmt -> function_decl .)


state 31

    (15) compound_stmt -> for_stmt .

    ID              reduce using rule 15 (compound_stmt -> for_stmt .)
    IF              reduce using rule 15 (compound_stmt -> for_stmt .)
    WHILE           reduce using rule 15 (compound_stmt -> for_stmt .)
    FOR             reduce using rule 15 (compound_stmt -> for_stmt .)
    FUN             reduce using rule 15 (compound_stmt -> for_stmt .)
    TRUE            reduce using rule 15 (compound_stmt -> for_stmt .)
    FALSE           reduce using rule 15 (compound_stmt -> for_stmt .)
    NOT             reduce using rule 15 (compound_stmt -> for_stmt .)
    NUMBER          reduce using rule 15 (compound_stmt -> for_stmt .)
    STRING1         reduce using rule 15 (compound_stmt -> for_stmt .)
    STRING2         reduce using rule 15 (compound_stmt -> for_stmt .)
    LSBRACKET       reduce using rule 15 (compound_stmt -> for_stmt .)
    SELECTOR        reduce using rule 15 (compound_stmt -> for_stmt .)
    LPAREN          reduce using rule 15 (compound_stmt -> for_stmt .)
    PLUS            reduce using rule 15 (compound_stmt -> for_stmt .)
    MINUS           reduce using rule 15 (compound_stmt -> for_stmt .)
    END             reduce using rule 15 (compound_stmt -> for_stmt .)
    ELIF            reduce using rule 15 (compound_stmt -> for_stmt .)
    ELSE            reduce using rule 15 (compound_stmt -> for_stmt .)
    $end            reduce using rule 15 (compound_stmt -> for_stmt .)


state 32

    (67) group_expr -> LPAREN . expression RPAREN
    (44) expression -> . unary_expr
    (45) expression -> . binary_expr
    (46) unary_expr -> . boolean_expr
    (47) unary_expr -> . not_expr
    (48) unary_expr -> . number_expr
    (49) unary_expr -> . id_expr
    (50) unary_expr -> . string_expr
    (51) unary_expr -> . list_expr
    (52) unary_expr -> . parse_text_expr
    (53) unary_expr -> . group_expr
    (54) unary_expr -> . uplus_expr
    (55) unary_expr -> . uminus_expr
    (56) binary_expr -> . arithmetic_expr
    (57) binary_expr -> . conditional_expr
    (58) boolean_expr -> . TRUE
    (59) boolean_expr -> . FALSE
    (60) not_expr -> . NOT expression
    (61) number_expr -> . NUMBER
    (62) id_expr -> . ID
    (63) string_expr -> . STRING1
    (64) string_expr -> . STRING2
    (65) list_expr -> . LSBRACKET elements RSBRACKET
    (66) parse_text_expr -> . SELECTOR LPAREN elements RPAREN
    (67) group_expr -> . LPAREN expression RPAREN
    (68) uplus_expr -> . PLUS expression
    (69) uminus_expr -> . MINUS expression
    (70) arithmetic_expr -> . expression PLUS expression
    (71) arithmetic_expr -> . expression MINUS expression
    (72) arithmetic_expr -> . expression MULTIPLY expression
    (73) arithmetic_expr -> . expression DIVIDE expression
    (74) arithmetic_expr -> . expression POW expression
    (75) arithmetic_expr -> . expression MOD expression
    (76) conditional_expr -> . expression AND expression
    (77) conditional_expr -> . expression OR expression
    (78) conditional_expr -> . expression XOR expression
    (79) conditional_expr -> . expression EQUALS expression
    (80) conditional_expr -> . expression NOT_EQUALS expression
    (81) conditional_expr -> . expression GREATER_THAN expression
    (82) conditional_expr -> . expression LESS_THAN expression
    (83) conditional_expr -> . expression GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> . expression LESS_THAN_OR_EQUAL expression

    TRUE            shift and go to state 15
    FALSE           shift and go to state 37
    NOT             shift and go to state 44
    NUMBER          shift and go to state 7
    ID              shift and go to state 49
    STRING1         shift and go to state 26
    STRING2         shift and go to state 25
    LSBRACKET       shift and go to state 4
    SELECTOR        shift and go to state 9
    LPAREN          shift and go to state 32
    PLUS            shift and go to state 24
    MINUS           shift and go to state 16

    conditional_expr               shift and go to state 12
    list_expr                      shift and go to state 1
    number_expr                    shift and go to state 33
    string_expr                    shift and go to state 18
    unary_expr                     shift and go to state 3
    uminus_expr                    shift and go to state 39
    id_expr                        shift and go to state 40
    group_expr                     shift and go to state 27
    arithmetic_expr                shift and go to state 19
    boolean_expr                   shift and go to state 41
    not_expr                       shift and go to state 6
    binary_expr                    shift and go to state 10
    parse_text_expr                shift and go to state 14
    uplus_expr                     shift and go to state 45
    expression                     shift and go to state 59

state 33

    (48) unary_expr -> number_expr .

    PLUS            reduce using rule 48 (unary_expr -> number_expr .)
    MINUS           reduce using rule 48 (unary_expr -> number_expr .)
    MULTIPLY        reduce using rule 48 (unary_expr -> number_expr .)
    DIVIDE          reduce using rule 48 (unary_expr -> number_expr .)
    POW             reduce using rule 48 (unary_expr -> number_expr .)
    MOD             reduce using rule 48 (unary_expr -> number_expr .)
    AND             reduce using rule 48 (unary_expr -> number_expr .)
    OR              reduce using rule 48 (unary_expr -> number_expr .)
    XOR             reduce using rule 48 (unary_expr -> number_expr .)
    EQUALS          reduce using rule 48 (unary_expr -> number_expr .)
    NOT_EQUALS      reduce using rule 48 (unary_expr -> number_expr .)
    GREATER_THAN    reduce using rule 48 (unary_expr -> number_expr .)
    LESS_THAN       reduce using rule 48 (unary_expr -> number_expr .)
    GREATER_THAN_OR_EQUAL reduce using rule 48 (unary_expr -> number_expr .)
    LESS_THAN_OR_EQUAL reduce using rule 48 (unary_expr -> number_expr .)
    ID              reduce using rule 48 (unary_expr -> number_expr .)
    IF              reduce using rule 48 (unary_expr -> number_expr .)
    WHILE           reduce using rule 48 (unary_expr -> number_expr .)
    FOR             reduce using rule 48 (unary_expr -> number_expr .)
    FUN             reduce using rule 48 (unary_expr -> number_expr .)
    TRUE            reduce using rule 48 (unary_expr -> number_expr .)
    FALSE           reduce using rule 48 (unary_expr -> number_expr .)
    NOT             reduce using rule 48 (unary_expr -> number_expr .)
    NUMBER          reduce using rule 48 (unary_expr -> number_expr .)
    STRING1         reduce using rule 48 (unary_expr -> number_expr .)
    STRING2         reduce using rule 48 (unary_expr -> number_expr .)
    LSBRACKET       reduce using rule 48 (unary_expr -> number_expr .)
    SELECTOR        reduce using rule 48 (unary_expr -> number_expr .)
    LPAREN          reduce using rule 48 (unary_expr -> number_expr .)
    $end            reduce using rule 48 (unary_expr -> number_expr .)
    COMMA           reduce using rule 48 (unary_expr -> number_expr .)
    RSBRACKET       reduce using rule 48 (unary_expr -> number_expr .)
    DO              reduce using rule 48 (unary_expr -> number_expr .)
    END             reduce using rule 48 (unary_expr -> number_expr .)
    ELIF            reduce using rule 48 (unary_expr -> number_expr .)
    ELSE            reduce using rule 48 (unary_expr -> number_expr .)
    RPAREN          reduce using rule 48 (unary_expr -> number_expr .)
    SEMICOLON       reduce using rule 48 (unary_expr -> number_expr .)
    RCBRACKET       reduce using rule 48 (unary_expr -> number_expr .)


state 34

    (18) assign_stmt -> ID . ASSIGN expression SEMICOLON
    (21) list_stmt -> ID . ASSIGN LSBRACKET elements RSBRACKET SEMICOLON
    (26) dictionary_stmt -> ID . ASSIGN LCBRACKET dictionary_objects RCBRACKET SEMICOLON
    (43) function_call -> ID . LPAREN elements RPAREN SEMICOLON
    (62) id_expr -> ID .

  ! shift/reduce conflict for LPAREN resolved as shift
    ASSIGN          shift and go to state 60
    LPAREN          shift and go to state 61
    PLUS            reduce using rule 62 (id_expr -> ID .)
    MINUS           reduce using rule 62 (id_expr -> ID .)
    MULTIPLY        reduce using rule 62 (id_expr -> ID .)
    DIVIDE          reduce using rule 62 (id_expr -> ID .)
    POW             reduce using rule 62 (id_expr -> ID .)
    MOD             reduce using rule 62 (id_expr -> ID .)
    AND             reduce using rule 62 (id_expr -> ID .)
    OR              reduce using rule 62 (id_expr -> ID .)
    XOR             reduce using rule 62 (id_expr -> ID .)
    EQUALS          reduce using rule 62 (id_expr -> ID .)
    NOT_EQUALS      reduce using rule 62 (id_expr -> ID .)
    GREATER_THAN    reduce using rule 62 (id_expr -> ID .)
    LESS_THAN       reduce using rule 62 (id_expr -> ID .)
    GREATER_THAN_OR_EQUAL reduce using rule 62 (id_expr -> ID .)
    LESS_THAN_OR_EQUAL reduce using rule 62 (id_expr -> ID .)
    ID              reduce using rule 62 (id_expr -> ID .)
    IF              reduce using rule 62 (id_expr -> ID .)
    WHILE           reduce using rule 62 (id_expr -> ID .)
    FOR             reduce using rule 62 (id_expr -> ID .)
    FUN             reduce using rule 62 (id_expr -> ID .)
    TRUE            reduce using rule 62 (id_expr -> ID .)
    FALSE           reduce using rule 62 (id_expr -> ID .)
    NOT             reduce using rule 62 (id_expr -> ID .)
    NUMBER          reduce using rule 62 (id_expr -> ID .)
    STRING1         reduce using rule 62 (id_expr -> ID .)
    STRING2         reduce using rule 62 (id_expr -> ID .)
    LSBRACKET       reduce using rule 62 (id_expr -> ID .)
    SELECTOR        reduce using rule 62 (id_expr -> ID .)
    ELIF            reduce using rule 62 (id_expr -> ID .)
    ELSE            reduce using rule 62 (id_expr -> ID .)
    END             reduce using rule 62 (id_expr -> ID .)
    $end            reduce using rule 62 (id_expr -> ID .)

  ! LPAREN          [ reduce using rule 62 (id_expr -> ID .) ]


state 35

    (34) if_stmt -> IF . expression DO statements elif_blocks END
    (44) expression -> . unary_expr
    (45) expression -> . binary_expr
    (46) unary_expr -> . boolean_expr
    (47) unary_expr -> . not_expr
    (48) unary_expr -> . number_expr
    (49) unary_expr -> . id_expr
    (50) unary_expr -> . string_expr
    (51) unary_expr -> . list_expr
    (52) unary_expr -> . parse_text_expr
    (53) unary_expr -> . group_expr
    (54) unary_expr -> . uplus_expr
    (55) unary_expr -> . uminus_expr
    (56) binary_expr -> . arithmetic_expr
    (57) binary_expr -> . conditional_expr
    (58) boolean_expr -> . TRUE
    (59) boolean_expr -> . FALSE
    (60) not_expr -> . NOT expression
    (61) number_expr -> . NUMBER
    (62) id_expr -> . ID
    (63) string_expr -> . STRING1
    (64) string_expr -> . STRING2
    (65) list_expr -> . LSBRACKET elements RSBRACKET
    (66) parse_text_expr -> . SELECTOR LPAREN elements RPAREN
    (67) group_expr -> . LPAREN expression RPAREN
    (68) uplus_expr -> . PLUS expression
    (69) uminus_expr -> . MINUS expression
    (70) arithmetic_expr -> . expression PLUS expression
    (71) arithmetic_expr -> . expression MINUS expression
    (72) arithmetic_expr -> . expression MULTIPLY expression
    (73) arithmetic_expr -> . expression DIVIDE expression
    (74) arithmetic_expr -> . expression POW expression
    (75) arithmetic_expr -> . expression MOD expression
    (76) conditional_expr -> . expression AND expression
    (77) conditional_expr -> . expression OR expression
    (78) conditional_expr -> . expression XOR expression
    (79) conditional_expr -> . expression EQUALS expression
    (80) conditional_expr -> . expression NOT_EQUALS expression
    (81) conditional_expr -> . expression GREATER_THAN expression
    (82) conditional_expr -> . expression LESS_THAN expression
    (83) conditional_expr -> . expression GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> . expression LESS_THAN_OR_EQUAL expression

    TRUE            shift and go to state 15
    FALSE           shift and go to state 37
    NOT             shift and go to state 44
    NUMBER          shift and go to state 7
    ID              shift and go to state 49
    STRING1         shift and go to state 26
    STRING2         shift and go to state 25
    LSBRACKET       shift and go to state 4
    SELECTOR        shift and go to state 9
    LPAREN          shift and go to state 32
    PLUS            shift and go to state 24
    MINUS           shift and go to state 16

    conditional_expr               shift and go to state 12
    list_expr                      shift and go to state 1
    string_expr                    shift and go to state 18
    unary_expr                     shift and go to state 3
    uminus_expr                    shift and go to state 39
    id_expr                        shift and go to state 40
    group_expr                     shift and go to state 27
    arithmetic_expr                shift and go to state 19
    boolean_expr                   shift and go to state 41
    not_expr                       shift and go to state 6
    binary_expr                    shift and go to state 10
    number_expr                    shift and go to state 33
    parse_text_expr                shift and go to state 14
    uplus_expr                     shift and go to state 45
    expression                     shift and go to state 62

state 36

    (9) simple_stmt -> decrement_stmt .

    ID              reduce using rule 9 (simple_stmt -> decrement_stmt .)
    IF              reduce using rule 9 (simple_stmt -> decrement_stmt .)
    WHILE           reduce using rule 9 (simple_stmt -> decrement_stmt .)
    FOR             reduce using rule 9 (simple_stmt -> decrement_stmt .)
    FUN             reduce using rule 9 (simple_stmt -> decrement_stmt .)
    TRUE            reduce using rule 9 (simple_stmt -> decrement_stmt .)
    FALSE           reduce using rule 9 (simple_stmt -> decrement_stmt .)
    NOT             reduce using rule 9 (simple_stmt -> decrement_stmt .)
    NUMBER          reduce using rule 9 (simple_stmt -> decrement_stmt .)
    STRING1         reduce using rule 9 (simple_stmt -> decrement_stmt .)
    STRING2         reduce using rule 9 (simple_stmt -> decrement_stmt .)
    LSBRACKET       reduce using rule 9 (simple_stmt -> decrement_stmt .)
    SELECTOR        reduce using rule 9 (simple_stmt -> decrement_stmt .)
    LPAREN          reduce using rule 9 (simple_stmt -> decrement_stmt .)
    PLUS            reduce using rule 9 (simple_stmt -> decrement_stmt .)
    MINUS           reduce using rule 9 (simple_stmt -> decrement_stmt .)
    END             reduce using rule 9 (simple_stmt -> decrement_stmt .)
    ELIF            reduce using rule 9 (simple_stmt -> decrement_stmt .)
    ELSE            reduce using rule 9 (simple_stmt -> decrement_stmt .)
    $end            reduce using rule 9 (simple_stmt -> decrement_stmt .)


state 37

    (59) boolean_expr -> FALSE .

    PLUS            reduce using rule 59 (boolean_expr -> FALSE .)
    MINUS           reduce using rule 59 (boolean_expr -> FALSE .)
    MULTIPLY        reduce using rule 59 (boolean_expr -> FALSE .)
    DIVIDE          reduce using rule 59 (boolean_expr -> FALSE .)
    POW             reduce using rule 59 (boolean_expr -> FALSE .)
    MOD             reduce using rule 59 (boolean_expr -> FALSE .)
    AND             reduce using rule 59 (boolean_expr -> FALSE .)
    OR              reduce using rule 59 (boolean_expr -> FALSE .)
    XOR             reduce using rule 59 (boolean_expr -> FALSE .)
    EQUALS          reduce using rule 59 (boolean_expr -> FALSE .)
    NOT_EQUALS      reduce using rule 59 (boolean_expr -> FALSE .)
    GREATER_THAN    reduce using rule 59 (boolean_expr -> FALSE .)
    LESS_THAN       reduce using rule 59 (boolean_expr -> FALSE .)
    GREATER_THAN_OR_EQUAL reduce using rule 59 (boolean_expr -> FALSE .)
    LESS_THAN_OR_EQUAL reduce using rule 59 (boolean_expr -> FALSE .)
    COMMA           reduce using rule 59 (boolean_expr -> FALSE .)
    RPAREN          reduce using rule 59 (boolean_expr -> FALSE .)
    ID              reduce using rule 59 (boolean_expr -> FALSE .)
    IF              reduce using rule 59 (boolean_expr -> FALSE .)
    WHILE           reduce using rule 59 (boolean_expr -> FALSE .)
    FOR             reduce using rule 59 (boolean_expr -> FALSE .)
    FUN             reduce using rule 59 (boolean_expr -> FALSE .)
    TRUE            reduce using rule 59 (boolean_expr -> FALSE .)
    FALSE           reduce using rule 59 (boolean_expr -> FALSE .)
    NOT             reduce using rule 59 (boolean_expr -> FALSE .)
    NUMBER          reduce using rule 59 (boolean_expr -> FALSE .)
    STRING1         reduce using rule 59 (boolean_expr -> FALSE .)
    STRING2         reduce using rule 59 (boolean_expr -> FALSE .)
    LSBRACKET       reduce using rule 59 (boolean_expr -> FALSE .)
    SELECTOR        reduce using rule 59 (boolean_expr -> FALSE .)
    LPAREN          reduce using rule 59 (boolean_expr -> FALSE .)
    $end            reduce using rule 59 (boolean_expr -> FALSE .)
    RSBRACKET       reduce using rule 59 (boolean_expr -> FALSE .)
    DO              reduce using rule 59 (boolean_expr -> FALSE .)
    END             reduce using rule 59 (boolean_expr -> FALSE .)
    ELIF            reduce using rule 59 (boolean_expr -> FALSE .)
    ELSE            reduce using rule 59 (boolean_expr -> FALSE .)
    SEMICOLON       reduce using rule 59 (boolean_expr -> FALSE .)
    RCBRACKET       reduce using rule 59 (boolean_expr -> FALSE .)


state 38

    (13) compound_stmt -> if_stmt .

    ID              reduce using rule 13 (compound_stmt -> if_stmt .)
    IF              reduce using rule 13 (compound_stmt -> if_stmt .)
    WHILE           reduce using rule 13 (compound_stmt -> if_stmt .)
    FOR             reduce using rule 13 (compound_stmt -> if_stmt .)
    FUN             reduce using rule 13 (compound_stmt -> if_stmt .)
    TRUE            reduce using rule 13 (compound_stmt -> if_stmt .)
    FALSE           reduce using rule 13 (compound_stmt -> if_stmt .)
    NOT             reduce using rule 13 (compound_stmt -> if_stmt .)
    NUMBER          reduce using rule 13 (compound_stmt -> if_stmt .)
    STRING1         reduce using rule 13 (compound_stmt -> if_stmt .)
    STRING2         reduce using rule 13 (compound_stmt -> if_stmt .)
    LSBRACKET       reduce using rule 13 (compound_stmt -> if_stmt .)
    SELECTOR        reduce using rule 13 (compound_stmt -> if_stmt .)
    LPAREN          reduce using rule 13 (compound_stmt -> if_stmt .)
    PLUS            reduce using rule 13 (compound_stmt -> if_stmt .)
    MINUS           reduce using rule 13 (compound_stmt -> if_stmt .)
    END             reduce using rule 13 (compound_stmt -> if_stmt .)
    ELIF            reduce using rule 13 (compound_stmt -> if_stmt .)
    ELSE            reduce using rule 13 (compound_stmt -> if_stmt .)
    $end            reduce using rule 13 (compound_stmt -> if_stmt .)


state 39

    (55) unary_expr -> uminus_expr .

    PLUS            reduce using rule 55 (unary_expr -> uminus_expr .)
    MINUS           reduce using rule 55 (unary_expr -> uminus_expr .)
    MULTIPLY        reduce using rule 55 (unary_expr -> uminus_expr .)
    DIVIDE          reduce using rule 55 (unary_expr -> uminus_expr .)
    POW             reduce using rule 55 (unary_expr -> uminus_expr .)
    MOD             reduce using rule 55 (unary_expr -> uminus_expr .)
    AND             reduce using rule 55 (unary_expr -> uminus_expr .)
    OR              reduce using rule 55 (unary_expr -> uminus_expr .)
    XOR             reduce using rule 55 (unary_expr -> uminus_expr .)
    EQUALS          reduce using rule 55 (unary_expr -> uminus_expr .)
    NOT_EQUALS      reduce using rule 55 (unary_expr -> uminus_expr .)
    GREATER_THAN    reduce using rule 55 (unary_expr -> uminus_expr .)
    LESS_THAN       reduce using rule 55 (unary_expr -> uminus_expr .)
    GREATER_THAN_OR_EQUAL reduce using rule 55 (unary_expr -> uminus_expr .)
    LESS_THAN_OR_EQUAL reduce using rule 55 (unary_expr -> uminus_expr .)
    ID              reduce using rule 55 (unary_expr -> uminus_expr .)
    IF              reduce using rule 55 (unary_expr -> uminus_expr .)
    WHILE           reduce using rule 55 (unary_expr -> uminus_expr .)
    FOR             reduce using rule 55 (unary_expr -> uminus_expr .)
    FUN             reduce using rule 55 (unary_expr -> uminus_expr .)
    TRUE            reduce using rule 55 (unary_expr -> uminus_expr .)
    FALSE           reduce using rule 55 (unary_expr -> uminus_expr .)
    NOT             reduce using rule 55 (unary_expr -> uminus_expr .)
    NUMBER          reduce using rule 55 (unary_expr -> uminus_expr .)
    STRING1         reduce using rule 55 (unary_expr -> uminus_expr .)
    STRING2         reduce using rule 55 (unary_expr -> uminus_expr .)
    LSBRACKET       reduce using rule 55 (unary_expr -> uminus_expr .)
    SELECTOR        reduce using rule 55 (unary_expr -> uminus_expr .)
    LPAREN          reduce using rule 55 (unary_expr -> uminus_expr .)
    $end            reduce using rule 55 (unary_expr -> uminus_expr .)
    COMMA           reduce using rule 55 (unary_expr -> uminus_expr .)
    RSBRACKET       reduce using rule 55 (unary_expr -> uminus_expr .)
    DO              reduce using rule 55 (unary_expr -> uminus_expr .)
    END             reduce using rule 55 (unary_expr -> uminus_expr .)
    ELIF            reduce using rule 55 (unary_expr -> uminus_expr .)
    ELSE            reduce using rule 55 (unary_expr -> uminus_expr .)
    RPAREN          reduce using rule 55 (unary_expr -> uminus_expr .)
    SEMICOLON       reduce using rule 55 (unary_expr -> uminus_expr .)
    RCBRACKET       reduce using rule 55 (unary_expr -> uminus_expr .)


state 40

    (49) unary_expr -> id_expr .

    PLUS            reduce using rule 49 (unary_expr -> id_expr .)
    MINUS           reduce using rule 49 (unary_expr -> id_expr .)
    MULTIPLY        reduce using rule 49 (unary_expr -> id_expr .)
    DIVIDE          reduce using rule 49 (unary_expr -> id_expr .)
    POW             reduce using rule 49 (unary_expr -> id_expr .)
    MOD             reduce using rule 49 (unary_expr -> id_expr .)
    AND             reduce using rule 49 (unary_expr -> id_expr .)
    OR              reduce using rule 49 (unary_expr -> id_expr .)
    XOR             reduce using rule 49 (unary_expr -> id_expr .)
    EQUALS          reduce using rule 49 (unary_expr -> id_expr .)
    NOT_EQUALS      reduce using rule 49 (unary_expr -> id_expr .)
    GREATER_THAN    reduce using rule 49 (unary_expr -> id_expr .)
    LESS_THAN       reduce using rule 49 (unary_expr -> id_expr .)
    GREATER_THAN_OR_EQUAL reduce using rule 49 (unary_expr -> id_expr .)
    LESS_THAN_OR_EQUAL reduce using rule 49 (unary_expr -> id_expr .)
    ID              reduce using rule 49 (unary_expr -> id_expr .)
    IF              reduce using rule 49 (unary_expr -> id_expr .)
    WHILE           reduce using rule 49 (unary_expr -> id_expr .)
    FOR             reduce using rule 49 (unary_expr -> id_expr .)
    FUN             reduce using rule 49 (unary_expr -> id_expr .)
    TRUE            reduce using rule 49 (unary_expr -> id_expr .)
    FALSE           reduce using rule 49 (unary_expr -> id_expr .)
    NOT             reduce using rule 49 (unary_expr -> id_expr .)
    NUMBER          reduce using rule 49 (unary_expr -> id_expr .)
    STRING1         reduce using rule 49 (unary_expr -> id_expr .)
    STRING2         reduce using rule 49 (unary_expr -> id_expr .)
    LSBRACKET       reduce using rule 49 (unary_expr -> id_expr .)
    SELECTOR        reduce using rule 49 (unary_expr -> id_expr .)
    LPAREN          reduce using rule 49 (unary_expr -> id_expr .)
    $end            reduce using rule 49 (unary_expr -> id_expr .)
    COMMA           reduce using rule 49 (unary_expr -> id_expr .)
    RSBRACKET       reduce using rule 49 (unary_expr -> id_expr .)
    DO              reduce using rule 49 (unary_expr -> id_expr .)
    END             reduce using rule 49 (unary_expr -> id_expr .)
    ELIF            reduce using rule 49 (unary_expr -> id_expr .)
    ELSE            reduce using rule 49 (unary_expr -> id_expr .)
    RPAREN          reduce using rule 49 (unary_expr -> id_expr .)
    SEMICOLON       reduce using rule 49 (unary_expr -> id_expr .)
    RCBRACKET       reduce using rule 49 (unary_expr -> id_expr .)


state 41

    (46) unary_expr -> boolean_expr .

    PLUS            reduce using rule 46 (unary_expr -> boolean_expr .)
    MINUS           reduce using rule 46 (unary_expr -> boolean_expr .)
    MULTIPLY        reduce using rule 46 (unary_expr -> boolean_expr .)
    DIVIDE          reduce using rule 46 (unary_expr -> boolean_expr .)
    POW             reduce using rule 46 (unary_expr -> boolean_expr .)
    MOD             reduce using rule 46 (unary_expr -> boolean_expr .)
    AND             reduce using rule 46 (unary_expr -> boolean_expr .)
    OR              reduce using rule 46 (unary_expr -> boolean_expr .)
    XOR             reduce using rule 46 (unary_expr -> boolean_expr .)
    EQUALS          reduce using rule 46 (unary_expr -> boolean_expr .)
    NOT_EQUALS      reduce using rule 46 (unary_expr -> boolean_expr .)
    GREATER_THAN    reduce using rule 46 (unary_expr -> boolean_expr .)
    LESS_THAN       reduce using rule 46 (unary_expr -> boolean_expr .)
    GREATER_THAN_OR_EQUAL reduce using rule 46 (unary_expr -> boolean_expr .)
    LESS_THAN_OR_EQUAL reduce using rule 46 (unary_expr -> boolean_expr .)
    ID              reduce using rule 46 (unary_expr -> boolean_expr .)
    IF              reduce using rule 46 (unary_expr -> boolean_expr .)
    WHILE           reduce using rule 46 (unary_expr -> boolean_expr .)
    FOR             reduce using rule 46 (unary_expr -> boolean_expr .)
    FUN             reduce using rule 46 (unary_expr -> boolean_expr .)
    TRUE            reduce using rule 46 (unary_expr -> boolean_expr .)
    FALSE           reduce using rule 46 (unary_expr -> boolean_expr .)
    NOT             reduce using rule 46 (unary_expr -> boolean_expr .)
    NUMBER          reduce using rule 46 (unary_expr -> boolean_expr .)
    STRING1         reduce using rule 46 (unary_expr -> boolean_expr .)
    STRING2         reduce using rule 46 (unary_expr -> boolean_expr .)
    LSBRACKET       reduce using rule 46 (unary_expr -> boolean_expr .)
    SELECTOR        reduce using rule 46 (unary_expr -> boolean_expr .)
    LPAREN          reduce using rule 46 (unary_expr -> boolean_expr .)
    $end            reduce using rule 46 (unary_expr -> boolean_expr .)
    COMMA           reduce using rule 46 (unary_expr -> boolean_expr .)
    RSBRACKET       reduce using rule 46 (unary_expr -> boolean_expr .)
    DO              reduce using rule 46 (unary_expr -> boolean_expr .)
    END             reduce using rule 46 (unary_expr -> boolean_expr .)
    ELIF            reduce using rule 46 (unary_expr -> boolean_expr .)
    ELSE            reduce using rule 46 (unary_expr -> boolean_expr .)
    RPAREN          reduce using rule 46 (unary_expr -> boolean_expr .)
    SEMICOLON       reduce using rule 46 (unary_expr -> boolean_expr .)
    RCBRACKET       reduce using rule 46 (unary_expr -> boolean_expr .)


state 42

    (5) statement -> compound_stmt .

    ID              reduce using rule 5 (statement -> compound_stmt .)
    IF              reduce using rule 5 (statement -> compound_stmt .)
    WHILE           reduce using rule 5 (statement -> compound_stmt .)
    FOR             reduce using rule 5 (statement -> compound_stmt .)
    FUN             reduce using rule 5 (statement -> compound_stmt .)
    TRUE            reduce using rule 5 (statement -> compound_stmt .)
    FALSE           reduce using rule 5 (statement -> compound_stmt .)
    NOT             reduce using rule 5 (statement -> compound_stmt .)
    NUMBER          reduce using rule 5 (statement -> compound_stmt .)
    STRING1         reduce using rule 5 (statement -> compound_stmt .)
    STRING2         reduce using rule 5 (statement -> compound_stmt .)
    LSBRACKET       reduce using rule 5 (statement -> compound_stmt .)
    SELECTOR        reduce using rule 5 (statement -> compound_stmt .)
    LPAREN          reduce using rule 5 (statement -> compound_stmt .)
    PLUS            reduce using rule 5 (statement -> compound_stmt .)
    MINUS           reduce using rule 5 (statement -> compound_stmt .)
    END             reduce using rule 5 (statement -> compound_stmt .)
    $end            reduce using rule 5 (statement -> compound_stmt .)
    ELIF            reduce using rule 5 (statement -> compound_stmt .)
    ELSE            reduce using rule 5 (statement -> compound_stmt .)


state 43

    (14) compound_stmt -> while_stmt .

    ID              reduce using rule 14 (compound_stmt -> while_stmt .)
    IF              reduce using rule 14 (compound_stmt -> while_stmt .)
    WHILE           reduce using rule 14 (compound_stmt -> while_stmt .)
    FOR             reduce using rule 14 (compound_stmt -> while_stmt .)
    FUN             reduce using rule 14 (compound_stmt -> while_stmt .)
    TRUE            reduce using rule 14 (compound_stmt -> while_stmt .)
    FALSE           reduce using rule 14 (compound_stmt -> while_stmt .)
    NOT             reduce using rule 14 (compound_stmt -> while_stmt .)
    NUMBER          reduce using rule 14 (compound_stmt -> while_stmt .)
    STRING1         reduce using rule 14 (compound_stmt -> while_stmt .)
    STRING2         reduce using rule 14 (compound_stmt -> while_stmt .)
    LSBRACKET       reduce using rule 14 (compound_stmt -> while_stmt .)
    SELECTOR        reduce using rule 14 (compound_stmt -> while_stmt .)
    LPAREN          reduce using rule 14 (compound_stmt -> while_stmt .)
    PLUS            reduce using rule 14 (compound_stmt -> while_stmt .)
    MINUS           reduce using rule 14 (compound_stmt -> while_stmt .)
    END             reduce using rule 14 (compound_stmt -> while_stmt .)
    ELIF            reduce using rule 14 (compound_stmt -> while_stmt .)
    ELSE            reduce using rule 14 (compound_stmt -> while_stmt .)
    $end            reduce using rule 14 (compound_stmt -> while_stmt .)


state 44

    (60) not_expr -> NOT . expression
    (44) expression -> . unary_expr
    (45) expression -> . binary_expr
    (46) unary_expr -> . boolean_expr
    (47) unary_expr -> . not_expr
    (48) unary_expr -> . number_expr
    (49) unary_expr -> . id_expr
    (50) unary_expr -> . string_expr
    (51) unary_expr -> . list_expr
    (52) unary_expr -> . parse_text_expr
    (53) unary_expr -> . group_expr
    (54) unary_expr -> . uplus_expr
    (55) unary_expr -> . uminus_expr
    (56) binary_expr -> . arithmetic_expr
    (57) binary_expr -> . conditional_expr
    (58) boolean_expr -> . TRUE
    (59) boolean_expr -> . FALSE
    (60) not_expr -> . NOT expression
    (61) number_expr -> . NUMBER
    (62) id_expr -> . ID
    (63) string_expr -> . STRING1
    (64) string_expr -> . STRING2
    (65) list_expr -> . LSBRACKET elements RSBRACKET
    (66) parse_text_expr -> . SELECTOR LPAREN elements RPAREN
    (67) group_expr -> . LPAREN expression RPAREN
    (68) uplus_expr -> . PLUS expression
    (69) uminus_expr -> . MINUS expression
    (70) arithmetic_expr -> . expression PLUS expression
    (71) arithmetic_expr -> . expression MINUS expression
    (72) arithmetic_expr -> . expression MULTIPLY expression
    (73) arithmetic_expr -> . expression DIVIDE expression
    (74) arithmetic_expr -> . expression POW expression
    (75) arithmetic_expr -> . expression MOD expression
    (76) conditional_expr -> . expression AND expression
    (77) conditional_expr -> . expression OR expression
    (78) conditional_expr -> . expression XOR expression
    (79) conditional_expr -> . expression EQUALS expression
    (80) conditional_expr -> . expression NOT_EQUALS expression
    (81) conditional_expr -> . expression GREATER_THAN expression
    (82) conditional_expr -> . expression LESS_THAN expression
    (83) conditional_expr -> . expression GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> . expression LESS_THAN_OR_EQUAL expression

    TRUE            shift and go to state 15
    FALSE           shift and go to state 37
    NOT             shift and go to state 44
    NUMBER          shift and go to state 7
    ID              shift and go to state 49
    STRING1         shift and go to state 26
    STRING2         shift and go to state 25
    LSBRACKET       shift and go to state 4
    SELECTOR        shift and go to state 9
    LPAREN          shift and go to state 32
    PLUS            shift and go to state 24
    MINUS           shift and go to state 16

    conditional_expr               shift and go to state 12
    list_expr                      shift and go to state 1
    number_expr                    shift and go to state 33
    string_expr                    shift and go to state 18
    unary_expr                     shift and go to state 3
    uminus_expr                    shift and go to state 39
    id_expr                        shift and go to state 40
    group_expr                     shift and go to state 27
    arithmetic_expr                shift and go to state 19
    boolean_expr                   shift and go to state 41
    not_expr                       shift and go to state 6
    binary_expr                    shift and go to state 10
    parse_text_expr                shift and go to state 14
    uplus_expr                     shift and go to state 45
    expression                     shift and go to state 63

state 45

    (54) unary_expr -> uplus_expr .

    PLUS            reduce using rule 54 (unary_expr -> uplus_expr .)
    MINUS           reduce using rule 54 (unary_expr -> uplus_expr .)
    MULTIPLY        reduce using rule 54 (unary_expr -> uplus_expr .)
    DIVIDE          reduce using rule 54 (unary_expr -> uplus_expr .)
    POW             reduce using rule 54 (unary_expr -> uplus_expr .)
    MOD             reduce using rule 54 (unary_expr -> uplus_expr .)
    AND             reduce using rule 54 (unary_expr -> uplus_expr .)
    OR              reduce using rule 54 (unary_expr -> uplus_expr .)
    XOR             reduce using rule 54 (unary_expr -> uplus_expr .)
    EQUALS          reduce using rule 54 (unary_expr -> uplus_expr .)
    NOT_EQUALS      reduce using rule 54 (unary_expr -> uplus_expr .)
    GREATER_THAN    reduce using rule 54 (unary_expr -> uplus_expr .)
    LESS_THAN       reduce using rule 54 (unary_expr -> uplus_expr .)
    GREATER_THAN_OR_EQUAL reduce using rule 54 (unary_expr -> uplus_expr .)
    LESS_THAN_OR_EQUAL reduce using rule 54 (unary_expr -> uplus_expr .)
    ID              reduce using rule 54 (unary_expr -> uplus_expr .)
    IF              reduce using rule 54 (unary_expr -> uplus_expr .)
    WHILE           reduce using rule 54 (unary_expr -> uplus_expr .)
    FOR             reduce using rule 54 (unary_expr -> uplus_expr .)
    FUN             reduce using rule 54 (unary_expr -> uplus_expr .)
    TRUE            reduce using rule 54 (unary_expr -> uplus_expr .)
    FALSE           reduce using rule 54 (unary_expr -> uplus_expr .)
    NOT             reduce using rule 54 (unary_expr -> uplus_expr .)
    NUMBER          reduce using rule 54 (unary_expr -> uplus_expr .)
    STRING1         reduce using rule 54 (unary_expr -> uplus_expr .)
    STRING2         reduce using rule 54 (unary_expr -> uplus_expr .)
    LSBRACKET       reduce using rule 54 (unary_expr -> uplus_expr .)
    SELECTOR        reduce using rule 54 (unary_expr -> uplus_expr .)
    LPAREN          reduce using rule 54 (unary_expr -> uplus_expr .)
    $end            reduce using rule 54 (unary_expr -> uplus_expr .)
    COMMA           reduce using rule 54 (unary_expr -> uplus_expr .)
    RSBRACKET       reduce using rule 54 (unary_expr -> uplus_expr .)
    DO              reduce using rule 54 (unary_expr -> uplus_expr .)
    END             reduce using rule 54 (unary_expr -> uplus_expr .)
    ELIF            reduce using rule 54 (unary_expr -> uplus_expr .)
    ELSE            reduce using rule 54 (unary_expr -> uplus_expr .)
    RPAREN          reduce using rule 54 (unary_expr -> uplus_expr .)
    SEMICOLON       reduce using rule 54 (unary_expr -> uplus_expr .)
    RCBRACKET       reduce using rule 54 (unary_expr -> uplus_expr .)


state 46

    (17) expression_stmt -> expression .
    (19) increment_stmt -> expression . PLUS PLUS SEMICOLON
    (20) decrement_stmt -> expression . MINUS MINUS SEMICOLON
    (70) arithmetic_expr -> expression . PLUS expression
    (71) arithmetic_expr -> expression . MINUS expression
    (72) arithmetic_expr -> expression . MULTIPLY expression
    (73) arithmetic_expr -> expression . DIVIDE expression
    (74) arithmetic_expr -> expression . POW expression
    (75) arithmetic_expr -> expression . MOD expression
    (76) conditional_expr -> expression . AND expression
    (77) conditional_expr -> expression . OR expression
    (78) conditional_expr -> expression . XOR expression
    (79) conditional_expr -> expression . EQUALS expression
    (80) conditional_expr -> expression . NOT_EQUALS expression
    (81) conditional_expr -> expression . GREATER_THAN expression
    (82) conditional_expr -> expression . LESS_THAN expression
    (83) conditional_expr -> expression . GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> expression . LESS_THAN_OR_EQUAL expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    ID              reduce using rule 17 (expression_stmt -> expression .)
    IF              reduce using rule 17 (expression_stmt -> expression .)
    WHILE           reduce using rule 17 (expression_stmt -> expression .)
    FOR             reduce using rule 17 (expression_stmt -> expression .)
    FUN             reduce using rule 17 (expression_stmt -> expression .)
    TRUE            reduce using rule 17 (expression_stmt -> expression .)
    FALSE           reduce using rule 17 (expression_stmt -> expression .)
    NOT             reduce using rule 17 (expression_stmt -> expression .)
    NUMBER          reduce using rule 17 (expression_stmt -> expression .)
    STRING1         reduce using rule 17 (expression_stmt -> expression .)
    STRING2         reduce using rule 17 (expression_stmt -> expression .)
    LSBRACKET       reduce using rule 17 (expression_stmt -> expression .)
    SELECTOR        reduce using rule 17 (expression_stmt -> expression .)
    LPAREN          reduce using rule 17 (expression_stmt -> expression .)
    ELIF            reduce using rule 17 (expression_stmt -> expression .)
    ELSE            reduce using rule 17 (expression_stmt -> expression .)
    END             reduce using rule 17 (expression_stmt -> expression .)
    $end            reduce using rule 17 (expression_stmt -> expression .)
    PLUS            shift and go to state 74
    MINUS           shift and go to state 77
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 66
    POW             shift and go to state 69
    MOD             shift and go to state 78
    AND             shift and go to state 64
    OR              shift and go to state 72
    XOR             shift and go to state 65
    EQUALS          shift and go to state 71
    NOT_EQUALS      shift and go to state 67
    GREATER_THAN    shift and go to state 73
    LESS_THAN       shift and go to state 76
    GREATER_THAN_OR_EQUAL shift and go to state 68
    LESS_THAN_OR_EQUAL shift and go to state 70

  ! PLUS            [ reduce using rule 17 (expression_stmt -> expression .) ]
  ! MINUS           [ reduce using rule 17 (expression_stmt -> expression .) ]


state 47

    (8) simple_stmt -> increment_stmt .

    ID              reduce using rule 8 (simple_stmt -> increment_stmt .)
    IF              reduce using rule 8 (simple_stmt -> increment_stmt .)
    WHILE           reduce using rule 8 (simple_stmt -> increment_stmt .)
    FOR             reduce using rule 8 (simple_stmt -> increment_stmt .)
    FUN             reduce using rule 8 (simple_stmt -> increment_stmt .)
    TRUE            reduce using rule 8 (simple_stmt -> increment_stmt .)
    FALSE           reduce using rule 8 (simple_stmt -> increment_stmt .)
    NOT             reduce using rule 8 (simple_stmt -> increment_stmt .)
    NUMBER          reduce using rule 8 (simple_stmt -> increment_stmt .)
    STRING1         reduce using rule 8 (simple_stmt -> increment_stmt .)
    STRING2         reduce using rule 8 (simple_stmt -> increment_stmt .)
    LSBRACKET       reduce using rule 8 (simple_stmt -> increment_stmt .)
    SELECTOR        reduce using rule 8 (simple_stmt -> increment_stmt .)
    LPAREN          reduce using rule 8 (simple_stmt -> increment_stmt .)
    PLUS            reduce using rule 8 (simple_stmt -> increment_stmt .)
    MINUS           reduce using rule 8 (simple_stmt -> increment_stmt .)
    END             reduce using rule 8 (simple_stmt -> increment_stmt .)
    ELIF            reduce using rule 8 (simple_stmt -> increment_stmt .)
    ELSE            reduce using rule 8 (simple_stmt -> increment_stmt .)
    $end            reduce using rule 8 (simple_stmt -> increment_stmt .)


state 48

    (65) list_expr -> LSBRACKET elements . RSBRACKET

    RSBRACKET       shift and go to state 79


state 49

    (62) id_expr -> ID .

    PLUS            reduce using rule 62 (id_expr -> ID .)
    MINUS           reduce using rule 62 (id_expr -> ID .)
    MULTIPLY        reduce using rule 62 (id_expr -> ID .)
    DIVIDE          reduce using rule 62 (id_expr -> ID .)
    POW             reduce using rule 62 (id_expr -> ID .)
    MOD             reduce using rule 62 (id_expr -> ID .)
    AND             reduce using rule 62 (id_expr -> ID .)
    OR              reduce using rule 62 (id_expr -> ID .)
    XOR             reduce using rule 62 (id_expr -> ID .)
    EQUALS          reduce using rule 62 (id_expr -> ID .)
    NOT_EQUALS      reduce using rule 62 (id_expr -> ID .)
    GREATER_THAN    reduce using rule 62 (id_expr -> ID .)
    LESS_THAN       reduce using rule 62 (id_expr -> ID .)
    GREATER_THAN_OR_EQUAL reduce using rule 62 (id_expr -> ID .)
    LESS_THAN_OR_EQUAL reduce using rule 62 (id_expr -> ID .)
    ID              reduce using rule 62 (id_expr -> ID .)
    IF              reduce using rule 62 (id_expr -> ID .)
    WHILE           reduce using rule 62 (id_expr -> ID .)
    FOR             reduce using rule 62 (id_expr -> ID .)
    FUN             reduce using rule 62 (id_expr -> ID .)
    TRUE            reduce using rule 62 (id_expr -> ID .)
    FALSE           reduce using rule 62 (id_expr -> ID .)
    NOT             reduce using rule 62 (id_expr -> ID .)
    NUMBER          reduce using rule 62 (id_expr -> ID .)
    STRING1         reduce using rule 62 (id_expr -> ID .)
    STRING2         reduce using rule 62 (id_expr -> ID .)
    LSBRACKET       reduce using rule 62 (id_expr -> ID .)
    SELECTOR        reduce using rule 62 (id_expr -> ID .)
    LPAREN          reduce using rule 62 (id_expr -> ID .)
    $end            reduce using rule 62 (id_expr -> ID .)
    COMMA           reduce using rule 62 (id_expr -> ID .)
    RSBRACKET       reduce using rule 62 (id_expr -> ID .)
    DO              reduce using rule 62 (id_expr -> ID .)
    END             reduce using rule 62 (id_expr -> ID .)
    ELIF            reduce using rule 62 (id_expr -> ID .)
    ELSE            reduce using rule 62 (id_expr -> ID .)
    RPAREN          reduce using rule 62 (id_expr -> ID .)
    SEMICOLON       reduce using rule 62 (id_expr -> ID .)
    RCBRACKET       reduce using rule 62 (id_expr -> ID .)


state 50

    (22) elements -> element . COMMA elements
    (23) elements -> element .

    COMMA           shift and go to state 80
    RSBRACKET       reduce using rule 23 (elements -> element .)
    RPAREN          reduce using rule 23 (elements -> element .)


state 51

    (25) element -> expression .
    (70) arithmetic_expr -> expression . PLUS expression
    (71) arithmetic_expr -> expression . MINUS expression
    (72) arithmetic_expr -> expression . MULTIPLY expression
    (73) arithmetic_expr -> expression . DIVIDE expression
    (74) arithmetic_expr -> expression . POW expression
    (75) arithmetic_expr -> expression . MOD expression
    (76) conditional_expr -> expression . AND expression
    (77) conditional_expr -> expression . OR expression
    (78) conditional_expr -> expression . XOR expression
    (79) conditional_expr -> expression . EQUALS expression
    (80) conditional_expr -> expression . NOT_EQUALS expression
    (81) conditional_expr -> expression . GREATER_THAN expression
    (82) conditional_expr -> expression . LESS_THAN expression
    (83) conditional_expr -> expression . GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> expression . LESS_THAN_OR_EQUAL expression

    COMMA           reduce using rule 25 (element -> expression .)
    RPAREN          reduce using rule 25 (element -> expression .)
    DO              reduce using rule 25 (element -> expression .)
    RSBRACKET       reduce using rule 25 (element -> expression .)
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 66
    POW             shift and go to state 69
    MOD             shift and go to state 78
    AND             shift and go to state 64
    OR              shift and go to state 72
    XOR             shift and go to state 65
    EQUALS          shift and go to state 71
    NOT_EQUALS      shift and go to state 67
    GREATER_THAN    shift and go to state 73
    LESS_THAN       shift and go to state 76
    GREATER_THAN_OR_EQUAL shift and go to state 68
    LESS_THAN_OR_EQUAL shift and go to state 70


state 52

    (66) parse_text_expr -> SELECTOR LPAREN . elements RPAREN
    (22) elements -> . element COMMA elements
    (23) elements -> . element
    (24) elements -> .
    (25) element -> . expression
    (44) expression -> . unary_expr
    (45) expression -> . binary_expr
    (46) unary_expr -> . boolean_expr
    (47) unary_expr -> . not_expr
    (48) unary_expr -> . number_expr
    (49) unary_expr -> . id_expr
    (50) unary_expr -> . string_expr
    (51) unary_expr -> . list_expr
    (52) unary_expr -> . parse_text_expr
    (53) unary_expr -> . group_expr
    (54) unary_expr -> . uplus_expr
    (55) unary_expr -> . uminus_expr
    (56) binary_expr -> . arithmetic_expr
    (57) binary_expr -> . conditional_expr
    (58) boolean_expr -> . TRUE
    (59) boolean_expr -> . FALSE
    (60) not_expr -> . NOT expression
    (61) number_expr -> . NUMBER
    (62) id_expr -> . ID
    (63) string_expr -> . STRING1
    (64) string_expr -> . STRING2
    (65) list_expr -> . LSBRACKET elements RSBRACKET
    (66) parse_text_expr -> . SELECTOR LPAREN elements RPAREN
    (67) group_expr -> . LPAREN expression RPAREN
    (68) uplus_expr -> . PLUS expression
    (69) uminus_expr -> . MINUS expression
    (70) arithmetic_expr -> . expression PLUS expression
    (71) arithmetic_expr -> . expression MINUS expression
    (72) arithmetic_expr -> . expression MULTIPLY expression
    (73) arithmetic_expr -> . expression DIVIDE expression
    (74) arithmetic_expr -> . expression POW expression
    (75) arithmetic_expr -> . expression MOD expression
    (76) conditional_expr -> . expression AND expression
    (77) conditional_expr -> . expression OR expression
    (78) conditional_expr -> . expression XOR expression
    (79) conditional_expr -> . expression EQUALS expression
    (80) conditional_expr -> . expression NOT_EQUALS expression
    (81) conditional_expr -> . expression GREATER_THAN expression
    (82) conditional_expr -> . expression LESS_THAN expression
    (83) conditional_expr -> . expression GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> . expression LESS_THAN_OR_EQUAL expression

    RPAREN          reduce using rule 24 (elements -> .)
    TRUE            shift and go to state 15
    FALSE           shift and go to state 37
    NOT             shift and go to state 44
    NUMBER          shift and go to state 7
    ID              shift and go to state 49
    STRING1         shift and go to state 26
    STRING2         shift and go to state 25
    LSBRACKET       shift and go to state 4
    SELECTOR        shift and go to state 9
    LPAREN          shift and go to state 32
    PLUS            shift and go to state 24
    MINUS           shift and go to state 16

    conditional_expr               shift and go to state 12
    elements                       shift and go to state 83
    number_expr                    shift and go to state 33
    string_expr                    shift and go to state 18
    unary_expr                     shift and go to state 3
    uminus_expr                    shift and go to state 39
    id_expr                        shift and go to state 40
    group_expr                     shift and go to state 27
    element                        shift and go to state 50
    arithmetic_expr                shift and go to state 19
    boolean_expr                   shift and go to state 41
    list_expr                      shift and go to state 1
    not_expr                       shift and go to state 6
    binary_expr                    shift and go to state 10
    parse_text_expr                shift and go to state 14
    uplus_expr                     shift and go to state 45
    expression                     shift and go to state 51

state 53

    (40) while_stmt -> WHILE expression . DO statements END
    (70) arithmetic_expr -> expression . PLUS expression
    (71) arithmetic_expr -> expression . MINUS expression
    (72) arithmetic_expr -> expression . MULTIPLY expression
    (73) arithmetic_expr -> expression . DIVIDE expression
    (74) arithmetic_expr -> expression . POW expression
    (75) arithmetic_expr -> expression . MOD expression
    (76) conditional_expr -> expression . AND expression
    (77) conditional_expr -> expression . OR expression
    (78) conditional_expr -> expression . XOR expression
    (79) conditional_expr -> expression . EQUALS expression
    (80) conditional_expr -> expression . NOT_EQUALS expression
    (81) conditional_expr -> expression . GREATER_THAN expression
    (82) conditional_expr -> expression . LESS_THAN expression
    (83) conditional_expr -> expression . GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> expression . LESS_THAN_OR_EQUAL expression

    DO              shift and go to state 84
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 66
    POW             shift and go to state 69
    MOD             shift and go to state 78
    AND             shift and go to state 64
    OR              shift and go to state 72
    XOR             shift and go to state 65
    EQUALS          shift and go to state 71
    NOT_EQUALS      shift and go to state 67
    GREATER_THAN    shift and go to state 73
    LESS_THAN       shift and go to state 76
    GREATER_THAN_OR_EQUAL shift and go to state 68
    LESS_THAN_OR_EQUAL shift and go to state 70


state 54

    (42) function_decl -> FUN ID . LPAREN elements RPAREN DO statements END

    LPAREN          shift and go to state 85


state 55

    (69) uminus_expr -> MINUS expression .
    (70) arithmetic_expr -> expression . PLUS expression
    (71) arithmetic_expr -> expression . MINUS expression
    (72) arithmetic_expr -> expression . MULTIPLY expression
    (73) arithmetic_expr -> expression . DIVIDE expression
    (74) arithmetic_expr -> expression . POW expression
    (75) arithmetic_expr -> expression . MOD expression
    (76) conditional_expr -> expression . AND expression
    (77) conditional_expr -> expression . OR expression
    (78) conditional_expr -> expression . XOR expression
    (79) conditional_expr -> expression . EQUALS expression
    (80) conditional_expr -> expression . NOT_EQUALS expression
    (81) conditional_expr -> expression . GREATER_THAN expression
    (82) conditional_expr -> expression . LESS_THAN expression
    (83) conditional_expr -> expression . GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> expression . LESS_THAN_OR_EQUAL expression

    PLUS            reduce using rule 69 (uminus_expr -> MINUS expression .)
    MINUS           reduce using rule 69 (uminus_expr -> MINUS expression .)
    MULTIPLY        reduce using rule 69 (uminus_expr -> MINUS expression .)
    DIVIDE          reduce using rule 69 (uminus_expr -> MINUS expression .)
    POW             reduce using rule 69 (uminus_expr -> MINUS expression .)
    MOD             reduce using rule 69 (uminus_expr -> MINUS expression .)
    AND             reduce using rule 69 (uminus_expr -> MINUS expression .)
    OR              reduce using rule 69 (uminus_expr -> MINUS expression .)
    XOR             reduce using rule 69 (uminus_expr -> MINUS expression .)
    EQUALS          reduce using rule 69 (uminus_expr -> MINUS expression .)
    NOT_EQUALS      reduce using rule 69 (uminus_expr -> MINUS expression .)
    GREATER_THAN    reduce using rule 69 (uminus_expr -> MINUS expression .)
    LESS_THAN       reduce using rule 69 (uminus_expr -> MINUS expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 69 (uminus_expr -> MINUS expression .)
    LESS_THAN_OR_EQUAL reduce using rule 69 (uminus_expr -> MINUS expression .)
    ID              reduce using rule 69 (uminus_expr -> MINUS expression .)
    IF              reduce using rule 69 (uminus_expr -> MINUS expression .)
    WHILE           reduce using rule 69 (uminus_expr -> MINUS expression .)
    FOR             reduce using rule 69 (uminus_expr -> MINUS expression .)
    FUN             reduce using rule 69 (uminus_expr -> MINUS expression .)
    TRUE            reduce using rule 69 (uminus_expr -> MINUS expression .)
    FALSE           reduce using rule 69 (uminus_expr -> MINUS expression .)
    NOT             reduce using rule 69 (uminus_expr -> MINUS expression .)
    NUMBER          reduce using rule 69 (uminus_expr -> MINUS expression .)
    STRING1         reduce using rule 69 (uminus_expr -> MINUS expression .)
    STRING2         reduce using rule 69 (uminus_expr -> MINUS expression .)
    LSBRACKET       reduce using rule 69 (uminus_expr -> MINUS expression .)
    SELECTOR        reduce using rule 69 (uminus_expr -> MINUS expression .)
    LPAREN          reduce using rule 69 (uminus_expr -> MINUS expression .)
    $end            reduce using rule 69 (uminus_expr -> MINUS expression .)
    COMMA           reduce using rule 69 (uminus_expr -> MINUS expression .)
    RSBRACKET       reduce using rule 69 (uminus_expr -> MINUS expression .)
    DO              reduce using rule 69 (uminus_expr -> MINUS expression .)
    END             reduce using rule 69 (uminus_expr -> MINUS expression .)
    ELIF            reduce using rule 69 (uminus_expr -> MINUS expression .)
    ELSE            reduce using rule 69 (uminus_expr -> MINUS expression .)
    RPAREN          reduce using rule 69 (uminus_expr -> MINUS expression .)
    SEMICOLON       reduce using rule 69 (uminus_expr -> MINUS expression .)
    RCBRACKET       reduce using rule 69 (uminus_expr -> MINUS expression .)

  ! PLUS            [ shift and go to state 81 ]
  ! MINUS           [ shift and go to state 82 ]
  ! MULTIPLY        [ shift and go to state 75 ]
  ! DIVIDE          [ shift and go to state 66 ]
  ! POW             [ shift and go to state 69 ]
  ! MOD             [ shift and go to state 78 ]
  ! AND             [ shift and go to state 64 ]
  ! OR              [ shift and go to state 72 ]
  ! XOR             [ shift and go to state 65 ]
  ! EQUALS          [ shift and go to state 71 ]
  ! NOT_EQUALS      [ shift and go to state 67 ]
  ! GREATER_THAN    [ shift and go to state 73 ]
  ! LESS_THAN       [ shift and go to state 76 ]
  ! GREATER_THAN_OR_EQUAL [ shift and go to state 68 ]
  ! LESS_THAN_OR_EQUAL [ shift and go to state 70 ]


state 56

    (2) statements -> statement statements .

    $end            reduce using rule 2 (statements -> statement statements .)
    END             reduce using rule 2 (statements -> statement statements .)
    ELIF            reduce using rule 2 (statements -> statement statements .)
    ELSE            reduce using rule 2 (statements -> statement statements .)


state 57

    (68) uplus_expr -> PLUS expression .
    (70) arithmetic_expr -> expression . PLUS expression
    (71) arithmetic_expr -> expression . MINUS expression
    (72) arithmetic_expr -> expression . MULTIPLY expression
    (73) arithmetic_expr -> expression . DIVIDE expression
    (74) arithmetic_expr -> expression . POW expression
    (75) arithmetic_expr -> expression . MOD expression
    (76) conditional_expr -> expression . AND expression
    (77) conditional_expr -> expression . OR expression
    (78) conditional_expr -> expression . XOR expression
    (79) conditional_expr -> expression . EQUALS expression
    (80) conditional_expr -> expression . NOT_EQUALS expression
    (81) conditional_expr -> expression . GREATER_THAN expression
    (82) conditional_expr -> expression . LESS_THAN expression
    (83) conditional_expr -> expression . GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> expression . LESS_THAN_OR_EQUAL expression

    PLUS            reduce using rule 68 (uplus_expr -> PLUS expression .)
    MINUS           reduce using rule 68 (uplus_expr -> PLUS expression .)
    MULTIPLY        reduce using rule 68 (uplus_expr -> PLUS expression .)
    DIVIDE          reduce using rule 68 (uplus_expr -> PLUS expression .)
    POW             reduce using rule 68 (uplus_expr -> PLUS expression .)
    MOD             reduce using rule 68 (uplus_expr -> PLUS expression .)
    AND             reduce using rule 68 (uplus_expr -> PLUS expression .)
    OR              reduce using rule 68 (uplus_expr -> PLUS expression .)
    XOR             reduce using rule 68 (uplus_expr -> PLUS expression .)
    EQUALS          reduce using rule 68 (uplus_expr -> PLUS expression .)
    NOT_EQUALS      reduce using rule 68 (uplus_expr -> PLUS expression .)
    GREATER_THAN    reduce using rule 68 (uplus_expr -> PLUS expression .)
    LESS_THAN       reduce using rule 68 (uplus_expr -> PLUS expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 68 (uplus_expr -> PLUS expression .)
    LESS_THAN_OR_EQUAL reduce using rule 68 (uplus_expr -> PLUS expression .)
    COMMA           reduce using rule 68 (uplus_expr -> PLUS expression .)
    RPAREN          reduce using rule 68 (uplus_expr -> PLUS expression .)
    DO              reduce using rule 68 (uplus_expr -> PLUS expression .)
    RSBRACKET       reduce using rule 68 (uplus_expr -> PLUS expression .)
    ID              reduce using rule 68 (uplus_expr -> PLUS expression .)
    IF              reduce using rule 68 (uplus_expr -> PLUS expression .)
    WHILE           reduce using rule 68 (uplus_expr -> PLUS expression .)
    FOR             reduce using rule 68 (uplus_expr -> PLUS expression .)
    FUN             reduce using rule 68 (uplus_expr -> PLUS expression .)
    TRUE            reduce using rule 68 (uplus_expr -> PLUS expression .)
    FALSE           reduce using rule 68 (uplus_expr -> PLUS expression .)
    NOT             reduce using rule 68 (uplus_expr -> PLUS expression .)
    NUMBER          reduce using rule 68 (uplus_expr -> PLUS expression .)
    STRING1         reduce using rule 68 (uplus_expr -> PLUS expression .)
    STRING2         reduce using rule 68 (uplus_expr -> PLUS expression .)
    LSBRACKET       reduce using rule 68 (uplus_expr -> PLUS expression .)
    SELECTOR        reduce using rule 68 (uplus_expr -> PLUS expression .)
    LPAREN          reduce using rule 68 (uplus_expr -> PLUS expression .)
    $end            reduce using rule 68 (uplus_expr -> PLUS expression .)
    ELIF            reduce using rule 68 (uplus_expr -> PLUS expression .)
    ELSE            reduce using rule 68 (uplus_expr -> PLUS expression .)
    END             reduce using rule 68 (uplus_expr -> PLUS expression .)
    SEMICOLON       reduce using rule 68 (uplus_expr -> PLUS expression .)
    RCBRACKET       reduce using rule 68 (uplus_expr -> PLUS expression .)

  ! PLUS            [ shift and go to state 81 ]
  ! MINUS           [ shift and go to state 82 ]
  ! MULTIPLY        [ shift and go to state 75 ]
  ! DIVIDE          [ shift and go to state 66 ]
  ! POW             [ shift and go to state 69 ]
  ! MOD             [ shift and go to state 78 ]
  ! AND             [ shift and go to state 64 ]
  ! OR              [ shift and go to state 72 ]
  ! XOR             [ shift and go to state 65 ]
  ! EQUALS          [ shift and go to state 71 ]
  ! NOT_EQUALS      [ shift and go to state 67 ]
  ! GREATER_THAN    [ shift and go to state 73 ]
  ! LESS_THAN       [ shift and go to state 76 ]
  ! GREATER_THAN_OR_EQUAL [ shift and go to state 68 ]
  ! LESS_THAN_OR_EQUAL [ shift and go to state 70 ]


state 58

    (41) for_stmt -> FOR EACH . ID IN element DO statements END

    ID              shift and go to state 86


state 59

    (67) group_expr -> LPAREN expression . RPAREN
    (70) arithmetic_expr -> expression . PLUS expression
    (71) arithmetic_expr -> expression . MINUS expression
    (72) arithmetic_expr -> expression . MULTIPLY expression
    (73) arithmetic_expr -> expression . DIVIDE expression
    (74) arithmetic_expr -> expression . POW expression
    (75) arithmetic_expr -> expression . MOD expression
    (76) conditional_expr -> expression . AND expression
    (77) conditional_expr -> expression . OR expression
    (78) conditional_expr -> expression . XOR expression
    (79) conditional_expr -> expression . EQUALS expression
    (80) conditional_expr -> expression . NOT_EQUALS expression
    (81) conditional_expr -> expression . GREATER_THAN expression
    (82) conditional_expr -> expression . LESS_THAN expression
    (83) conditional_expr -> expression . GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> expression . LESS_THAN_OR_EQUAL expression

    RPAREN          shift and go to state 87
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 66
    POW             shift and go to state 69
    MOD             shift and go to state 78
    AND             shift and go to state 64
    OR              shift and go to state 72
    XOR             shift and go to state 65
    EQUALS          shift and go to state 71
    NOT_EQUALS      shift and go to state 67
    GREATER_THAN    shift and go to state 73
    LESS_THAN       shift and go to state 76
    GREATER_THAN_OR_EQUAL shift and go to state 68
    LESS_THAN_OR_EQUAL shift and go to state 70


state 60

    (18) assign_stmt -> ID ASSIGN . expression SEMICOLON
    (21) list_stmt -> ID ASSIGN . LSBRACKET elements RSBRACKET SEMICOLON
    (26) dictionary_stmt -> ID ASSIGN . LCBRACKET dictionary_objects RCBRACKET SEMICOLON
    (44) expression -> . unary_expr
    (45) expression -> . binary_expr
    (46) unary_expr -> . boolean_expr
    (47) unary_expr -> . not_expr
    (48) unary_expr -> . number_expr
    (49) unary_expr -> . id_expr
    (50) unary_expr -> . string_expr
    (51) unary_expr -> . list_expr
    (52) unary_expr -> . parse_text_expr
    (53) unary_expr -> . group_expr
    (54) unary_expr -> . uplus_expr
    (55) unary_expr -> . uminus_expr
    (56) binary_expr -> . arithmetic_expr
    (57) binary_expr -> . conditional_expr
    (58) boolean_expr -> . TRUE
    (59) boolean_expr -> . FALSE
    (60) not_expr -> . NOT expression
    (61) number_expr -> . NUMBER
    (62) id_expr -> . ID
    (63) string_expr -> . STRING1
    (64) string_expr -> . STRING2
    (65) list_expr -> . LSBRACKET elements RSBRACKET
    (66) parse_text_expr -> . SELECTOR LPAREN elements RPAREN
    (67) group_expr -> . LPAREN expression RPAREN
    (68) uplus_expr -> . PLUS expression
    (69) uminus_expr -> . MINUS expression
    (70) arithmetic_expr -> . expression PLUS expression
    (71) arithmetic_expr -> . expression MINUS expression
    (72) arithmetic_expr -> . expression MULTIPLY expression
    (73) arithmetic_expr -> . expression DIVIDE expression
    (74) arithmetic_expr -> . expression POW expression
    (75) arithmetic_expr -> . expression MOD expression
    (76) conditional_expr -> . expression AND expression
    (77) conditional_expr -> . expression OR expression
    (78) conditional_expr -> . expression XOR expression
    (79) conditional_expr -> . expression EQUALS expression
    (80) conditional_expr -> . expression NOT_EQUALS expression
    (81) conditional_expr -> . expression GREATER_THAN expression
    (82) conditional_expr -> . expression LESS_THAN expression
    (83) conditional_expr -> . expression GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> . expression LESS_THAN_OR_EQUAL expression

    LSBRACKET       shift and go to state 88
    LCBRACKET       shift and go to state 89
    TRUE            shift and go to state 15
    FALSE           shift and go to state 37
    NOT             shift and go to state 44
    NUMBER          shift and go to state 7
    ID              shift and go to state 49
    STRING1         shift and go to state 26
    STRING2         shift and go to state 25
    SELECTOR        shift and go to state 9
    LPAREN          shift and go to state 32
    PLUS            shift and go to state 24
    MINUS           shift and go to state 16

    conditional_expr               shift and go to state 12
    number_expr                    shift and go to state 33
    string_expr                    shift and go to state 18
    unary_expr                     shift and go to state 3
    uminus_expr                    shift and go to state 39
    id_expr                        shift and go to state 40
    group_expr                     shift and go to state 27
    arithmetic_expr                shift and go to state 19
    boolean_expr                   shift and go to state 41
    list_expr                      shift and go to state 1
    not_expr                       shift and go to state 6
    binary_expr                    shift and go to state 10
    parse_text_expr                shift and go to state 14
    uplus_expr                     shift and go to state 45
    expression                     shift and go to state 90

state 61

    (43) function_call -> ID LPAREN . elements RPAREN SEMICOLON
    (22) elements -> . element COMMA elements
    (23) elements -> . element
    (24) elements -> .
    (25) element -> . expression
    (44) expression -> . unary_expr
    (45) expression -> . binary_expr
    (46) unary_expr -> . boolean_expr
    (47) unary_expr -> . not_expr
    (48) unary_expr -> . number_expr
    (49) unary_expr -> . id_expr
    (50) unary_expr -> . string_expr
    (51) unary_expr -> . list_expr
    (52) unary_expr -> . parse_text_expr
    (53) unary_expr -> . group_expr
    (54) unary_expr -> . uplus_expr
    (55) unary_expr -> . uminus_expr
    (56) binary_expr -> . arithmetic_expr
    (57) binary_expr -> . conditional_expr
    (58) boolean_expr -> . TRUE
    (59) boolean_expr -> . FALSE
    (60) not_expr -> . NOT expression
    (61) number_expr -> . NUMBER
    (62) id_expr -> . ID
    (63) string_expr -> . STRING1
    (64) string_expr -> . STRING2
    (65) list_expr -> . LSBRACKET elements RSBRACKET
    (66) parse_text_expr -> . SELECTOR LPAREN elements RPAREN
    (67) group_expr -> . LPAREN expression RPAREN
    (68) uplus_expr -> . PLUS expression
    (69) uminus_expr -> . MINUS expression
    (70) arithmetic_expr -> . expression PLUS expression
    (71) arithmetic_expr -> . expression MINUS expression
    (72) arithmetic_expr -> . expression MULTIPLY expression
    (73) arithmetic_expr -> . expression DIVIDE expression
    (74) arithmetic_expr -> . expression POW expression
    (75) arithmetic_expr -> . expression MOD expression
    (76) conditional_expr -> . expression AND expression
    (77) conditional_expr -> . expression OR expression
    (78) conditional_expr -> . expression XOR expression
    (79) conditional_expr -> . expression EQUALS expression
    (80) conditional_expr -> . expression NOT_EQUALS expression
    (81) conditional_expr -> . expression GREATER_THAN expression
    (82) conditional_expr -> . expression LESS_THAN expression
    (83) conditional_expr -> . expression GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> . expression LESS_THAN_OR_EQUAL expression

    RPAREN          reduce using rule 24 (elements -> .)
    TRUE            shift and go to state 15
    FALSE           shift and go to state 37
    NOT             shift and go to state 44
    NUMBER          shift and go to state 7
    ID              shift and go to state 49
    STRING1         shift and go to state 26
    STRING2         shift and go to state 25
    LSBRACKET       shift and go to state 4
    SELECTOR        shift and go to state 9
    LPAREN          shift and go to state 32
    PLUS            shift and go to state 24
    MINUS           shift and go to state 16

    conditional_expr               shift and go to state 12
    elements                       shift and go to state 91
    number_expr                    shift and go to state 33
    string_expr                    shift and go to state 18
    unary_expr                     shift and go to state 3
    uminus_expr                    shift and go to state 39
    id_expr                        shift and go to state 40
    group_expr                     shift and go to state 27
    element                        shift and go to state 50
    arithmetic_expr                shift and go to state 19
    boolean_expr                   shift and go to state 41
    list_expr                      shift and go to state 1
    not_expr                       shift and go to state 6
    binary_expr                    shift and go to state 10
    parse_text_expr                shift and go to state 14
    uplus_expr                     shift and go to state 45
    expression                     shift and go to state 51

state 62

    (34) if_stmt -> IF expression . DO statements elif_blocks END
    (70) arithmetic_expr -> expression . PLUS expression
    (71) arithmetic_expr -> expression . MINUS expression
    (72) arithmetic_expr -> expression . MULTIPLY expression
    (73) arithmetic_expr -> expression . DIVIDE expression
    (74) arithmetic_expr -> expression . POW expression
    (75) arithmetic_expr -> expression . MOD expression
    (76) conditional_expr -> expression . AND expression
    (77) conditional_expr -> expression . OR expression
    (78) conditional_expr -> expression . XOR expression
    (79) conditional_expr -> expression . EQUALS expression
    (80) conditional_expr -> expression . NOT_EQUALS expression
    (81) conditional_expr -> expression . GREATER_THAN expression
    (82) conditional_expr -> expression . LESS_THAN expression
    (83) conditional_expr -> expression . GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> expression . LESS_THAN_OR_EQUAL expression

    DO              shift and go to state 92
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 66
    POW             shift and go to state 69
    MOD             shift and go to state 78
    AND             shift and go to state 64
    OR              shift and go to state 72
    XOR             shift and go to state 65
    EQUALS          shift and go to state 71
    NOT_EQUALS      shift and go to state 67
    GREATER_THAN    shift and go to state 73
    LESS_THAN       shift and go to state 76
    GREATER_THAN_OR_EQUAL shift and go to state 68
    LESS_THAN_OR_EQUAL shift and go to state 70


state 63

    (60) not_expr -> NOT expression .
    (70) arithmetic_expr -> expression . PLUS expression
    (71) arithmetic_expr -> expression . MINUS expression
    (72) arithmetic_expr -> expression . MULTIPLY expression
    (73) arithmetic_expr -> expression . DIVIDE expression
    (74) arithmetic_expr -> expression . POW expression
    (75) arithmetic_expr -> expression . MOD expression
    (76) conditional_expr -> expression . AND expression
    (77) conditional_expr -> expression . OR expression
    (78) conditional_expr -> expression . XOR expression
    (79) conditional_expr -> expression . EQUALS expression
    (80) conditional_expr -> expression . NOT_EQUALS expression
    (81) conditional_expr -> expression . GREATER_THAN expression
    (82) conditional_expr -> expression . LESS_THAN expression
    (83) conditional_expr -> expression . GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> expression . LESS_THAN_OR_EQUAL expression

    PLUS            reduce using rule 60 (not_expr -> NOT expression .)
    MINUS           reduce using rule 60 (not_expr -> NOT expression .)
    MULTIPLY        reduce using rule 60 (not_expr -> NOT expression .)
    DIVIDE          reduce using rule 60 (not_expr -> NOT expression .)
    MOD             reduce using rule 60 (not_expr -> NOT expression .)
    AND             reduce using rule 60 (not_expr -> NOT expression .)
    OR              reduce using rule 60 (not_expr -> NOT expression .)
    XOR             reduce using rule 60 (not_expr -> NOT expression .)
    EQUALS          reduce using rule 60 (not_expr -> NOT expression .)
    NOT_EQUALS      reduce using rule 60 (not_expr -> NOT expression .)
    GREATER_THAN    reduce using rule 60 (not_expr -> NOT expression .)
    LESS_THAN       reduce using rule 60 (not_expr -> NOT expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 60 (not_expr -> NOT expression .)
    LESS_THAN_OR_EQUAL reduce using rule 60 (not_expr -> NOT expression .)
    ID              reduce using rule 60 (not_expr -> NOT expression .)
    IF              reduce using rule 60 (not_expr -> NOT expression .)
    WHILE           reduce using rule 60 (not_expr -> NOT expression .)
    FOR             reduce using rule 60 (not_expr -> NOT expression .)
    FUN             reduce using rule 60 (not_expr -> NOT expression .)
    TRUE            reduce using rule 60 (not_expr -> NOT expression .)
    FALSE           reduce using rule 60 (not_expr -> NOT expression .)
    NOT             reduce using rule 60 (not_expr -> NOT expression .)
    NUMBER          reduce using rule 60 (not_expr -> NOT expression .)
    STRING1         reduce using rule 60 (not_expr -> NOT expression .)
    STRING2         reduce using rule 60 (not_expr -> NOT expression .)
    LSBRACKET       reduce using rule 60 (not_expr -> NOT expression .)
    SELECTOR        reduce using rule 60 (not_expr -> NOT expression .)
    LPAREN          reduce using rule 60 (not_expr -> NOT expression .)
    $end            reduce using rule 60 (not_expr -> NOT expression .)
    COMMA           reduce using rule 60 (not_expr -> NOT expression .)
    RSBRACKET       reduce using rule 60 (not_expr -> NOT expression .)
    DO              reduce using rule 60 (not_expr -> NOT expression .)
    END             reduce using rule 60 (not_expr -> NOT expression .)
    ELIF            reduce using rule 60 (not_expr -> NOT expression .)
    ELSE            reduce using rule 60 (not_expr -> NOT expression .)
    RPAREN          reduce using rule 60 (not_expr -> NOT expression .)
    SEMICOLON       reduce using rule 60 (not_expr -> NOT expression .)
    RCBRACKET       reduce using rule 60 (not_expr -> NOT expression .)
    POW             shift and go to state 69

  ! POW             [ reduce using rule 60 (not_expr -> NOT expression .) ]
  ! PLUS            [ shift and go to state 81 ]
  ! MINUS           [ shift and go to state 82 ]
  ! MULTIPLY        [ shift and go to state 75 ]
  ! DIVIDE          [ shift and go to state 66 ]
  ! MOD             [ shift and go to state 78 ]
  ! AND             [ shift and go to state 64 ]
  ! OR              [ shift and go to state 72 ]
  ! XOR             [ shift and go to state 65 ]
  ! EQUALS          [ shift and go to state 71 ]
  ! NOT_EQUALS      [ shift and go to state 67 ]
  ! GREATER_THAN    [ shift and go to state 73 ]
  ! LESS_THAN       [ shift and go to state 76 ]
  ! GREATER_THAN_OR_EQUAL [ shift and go to state 68 ]
  ! LESS_THAN_OR_EQUAL [ shift and go to state 70 ]


state 64

    (76) conditional_expr -> expression AND . expression
    (44) expression -> . unary_expr
    (45) expression -> . binary_expr
    (46) unary_expr -> . boolean_expr
    (47) unary_expr -> . not_expr
    (48) unary_expr -> . number_expr
    (49) unary_expr -> . id_expr
    (50) unary_expr -> . string_expr
    (51) unary_expr -> . list_expr
    (52) unary_expr -> . parse_text_expr
    (53) unary_expr -> . group_expr
    (54) unary_expr -> . uplus_expr
    (55) unary_expr -> . uminus_expr
    (56) binary_expr -> . arithmetic_expr
    (57) binary_expr -> . conditional_expr
    (58) boolean_expr -> . TRUE
    (59) boolean_expr -> . FALSE
    (60) not_expr -> . NOT expression
    (61) number_expr -> . NUMBER
    (62) id_expr -> . ID
    (63) string_expr -> . STRING1
    (64) string_expr -> . STRING2
    (65) list_expr -> . LSBRACKET elements RSBRACKET
    (66) parse_text_expr -> . SELECTOR LPAREN elements RPAREN
    (67) group_expr -> . LPAREN expression RPAREN
    (68) uplus_expr -> . PLUS expression
    (69) uminus_expr -> . MINUS expression
    (70) arithmetic_expr -> . expression PLUS expression
    (71) arithmetic_expr -> . expression MINUS expression
    (72) arithmetic_expr -> . expression MULTIPLY expression
    (73) arithmetic_expr -> . expression DIVIDE expression
    (74) arithmetic_expr -> . expression POW expression
    (75) arithmetic_expr -> . expression MOD expression
    (76) conditional_expr -> . expression AND expression
    (77) conditional_expr -> . expression OR expression
    (78) conditional_expr -> . expression XOR expression
    (79) conditional_expr -> . expression EQUALS expression
    (80) conditional_expr -> . expression NOT_EQUALS expression
    (81) conditional_expr -> . expression GREATER_THAN expression
    (82) conditional_expr -> . expression LESS_THAN expression
    (83) conditional_expr -> . expression GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> . expression LESS_THAN_OR_EQUAL expression

    TRUE            shift and go to state 15
    FALSE           shift and go to state 37
    NOT             shift and go to state 44
    NUMBER          shift and go to state 7
    ID              shift and go to state 49
    STRING1         shift and go to state 26
    STRING2         shift and go to state 25
    LSBRACKET       shift and go to state 4
    SELECTOR        shift and go to state 9
    LPAREN          shift and go to state 32
    PLUS            shift and go to state 24
    MINUS           shift and go to state 16

    conditional_expr               shift and go to state 12
    list_expr                      shift and go to state 1
    number_expr                    shift and go to state 33
    string_expr                    shift and go to state 18
    unary_expr                     shift and go to state 3
    uminus_expr                    shift and go to state 39
    id_expr                        shift and go to state 40
    group_expr                     shift and go to state 27
    arithmetic_expr                shift and go to state 19
    boolean_expr                   shift and go to state 41
    not_expr                       shift and go to state 6
    binary_expr                    shift and go to state 10
    parse_text_expr                shift and go to state 14
    uplus_expr                     shift and go to state 45
    expression                     shift and go to state 93

state 65

    (78) conditional_expr -> expression XOR . expression
    (44) expression -> . unary_expr
    (45) expression -> . binary_expr
    (46) unary_expr -> . boolean_expr
    (47) unary_expr -> . not_expr
    (48) unary_expr -> . number_expr
    (49) unary_expr -> . id_expr
    (50) unary_expr -> . string_expr
    (51) unary_expr -> . list_expr
    (52) unary_expr -> . parse_text_expr
    (53) unary_expr -> . group_expr
    (54) unary_expr -> . uplus_expr
    (55) unary_expr -> . uminus_expr
    (56) binary_expr -> . arithmetic_expr
    (57) binary_expr -> . conditional_expr
    (58) boolean_expr -> . TRUE
    (59) boolean_expr -> . FALSE
    (60) not_expr -> . NOT expression
    (61) number_expr -> . NUMBER
    (62) id_expr -> . ID
    (63) string_expr -> . STRING1
    (64) string_expr -> . STRING2
    (65) list_expr -> . LSBRACKET elements RSBRACKET
    (66) parse_text_expr -> . SELECTOR LPAREN elements RPAREN
    (67) group_expr -> . LPAREN expression RPAREN
    (68) uplus_expr -> . PLUS expression
    (69) uminus_expr -> . MINUS expression
    (70) arithmetic_expr -> . expression PLUS expression
    (71) arithmetic_expr -> . expression MINUS expression
    (72) arithmetic_expr -> . expression MULTIPLY expression
    (73) arithmetic_expr -> . expression DIVIDE expression
    (74) arithmetic_expr -> . expression POW expression
    (75) arithmetic_expr -> . expression MOD expression
    (76) conditional_expr -> . expression AND expression
    (77) conditional_expr -> . expression OR expression
    (78) conditional_expr -> . expression XOR expression
    (79) conditional_expr -> . expression EQUALS expression
    (80) conditional_expr -> . expression NOT_EQUALS expression
    (81) conditional_expr -> . expression GREATER_THAN expression
    (82) conditional_expr -> . expression LESS_THAN expression
    (83) conditional_expr -> . expression GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> . expression LESS_THAN_OR_EQUAL expression

    TRUE            shift and go to state 15
    FALSE           shift and go to state 37
    NOT             shift and go to state 44
    NUMBER          shift and go to state 7
    ID              shift and go to state 49
    STRING1         shift and go to state 26
    STRING2         shift and go to state 25
    LSBRACKET       shift and go to state 4
    SELECTOR        shift and go to state 9
    LPAREN          shift and go to state 32
    PLUS            shift and go to state 24
    MINUS           shift and go to state 16

    conditional_expr               shift and go to state 12
    list_expr                      shift and go to state 1
    number_expr                    shift and go to state 33
    string_expr                    shift and go to state 18
    unary_expr                     shift and go to state 3
    uminus_expr                    shift and go to state 39
    id_expr                        shift and go to state 40
    group_expr                     shift and go to state 27
    arithmetic_expr                shift and go to state 19
    boolean_expr                   shift and go to state 41
    not_expr                       shift and go to state 6
    binary_expr                    shift and go to state 10
    parse_text_expr                shift and go to state 14
    uplus_expr                     shift and go to state 45
    expression                     shift and go to state 94

state 66

    (73) arithmetic_expr -> expression DIVIDE . expression
    (44) expression -> . unary_expr
    (45) expression -> . binary_expr
    (46) unary_expr -> . boolean_expr
    (47) unary_expr -> . not_expr
    (48) unary_expr -> . number_expr
    (49) unary_expr -> . id_expr
    (50) unary_expr -> . string_expr
    (51) unary_expr -> . list_expr
    (52) unary_expr -> . parse_text_expr
    (53) unary_expr -> . group_expr
    (54) unary_expr -> . uplus_expr
    (55) unary_expr -> . uminus_expr
    (56) binary_expr -> . arithmetic_expr
    (57) binary_expr -> . conditional_expr
    (58) boolean_expr -> . TRUE
    (59) boolean_expr -> . FALSE
    (60) not_expr -> . NOT expression
    (61) number_expr -> . NUMBER
    (62) id_expr -> . ID
    (63) string_expr -> . STRING1
    (64) string_expr -> . STRING2
    (65) list_expr -> . LSBRACKET elements RSBRACKET
    (66) parse_text_expr -> . SELECTOR LPAREN elements RPAREN
    (67) group_expr -> . LPAREN expression RPAREN
    (68) uplus_expr -> . PLUS expression
    (69) uminus_expr -> . MINUS expression
    (70) arithmetic_expr -> . expression PLUS expression
    (71) arithmetic_expr -> . expression MINUS expression
    (72) arithmetic_expr -> . expression MULTIPLY expression
    (73) arithmetic_expr -> . expression DIVIDE expression
    (74) arithmetic_expr -> . expression POW expression
    (75) arithmetic_expr -> . expression MOD expression
    (76) conditional_expr -> . expression AND expression
    (77) conditional_expr -> . expression OR expression
    (78) conditional_expr -> . expression XOR expression
    (79) conditional_expr -> . expression EQUALS expression
    (80) conditional_expr -> . expression NOT_EQUALS expression
    (81) conditional_expr -> . expression GREATER_THAN expression
    (82) conditional_expr -> . expression LESS_THAN expression
    (83) conditional_expr -> . expression GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> . expression LESS_THAN_OR_EQUAL expression

    TRUE            shift and go to state 15
    FALSE           shift and go to state 37
    NOT             shift and go to state 44
    NUMBER          shift and go to state 7
    ID              shift and go to state 49
    STRING1         shift and go to state 26
    STRING2         shift and go to state 25
    LSBRACKET       shift and go to state 4
    SELECTOR        shift and go to state 9
    LPAREN          shift and go to state 32
    PLUS            shift and go to state 24
    MINUS           shift and go to state 16

    conditional_expr               shift and go to state 12
    list_expr                      shift and go to state 1
    number_expr                    shift and go to state 33
    string_expr                    shift and go to state 18
    unary_expr                     shift and go to state 3
    uminus_expr                    shift and go to state 39
    id_expr                        shift and go to state 40
    group_expr                     shift and go to state 27
    arithmetic_expr                shift and go to state 19
    boolean_expr                   shift and go to state 41
    not_expr                       shift and go to state 6
    binary_expr                    shift and go to state 10
    parse_text_expr                shift and go to state 14
    uplus_expr                     shift and go to state 45
    expression                     shift and go to state 95

state 67

    (80) conditional_expr -> expression NOT_EQUALS . expression
    (44) expression -> . unary_expr
    (45) expression -> . binary_expr
    (46) unary_expr -> . boolean_expr
    (47) unary_expr -> . not_expr
    (48) unary_expr -> . number_expr
    (49) unary_expr -> . id_expr
    (50) unary_expr -> . string_expr
    (51) unary_expr -> . list_expr
    (52) unary_expr -> . parse_text_expr
    (53) unary_expr -> . group_expr
    (54) unary_expr -> . uplus_expr
    (55) unary_expr -> . uminus_expr
    (56) binary_expr -> . arithmetic_expr
    (57) binary_expr -> . conditional_expr
    (58) boolean_expr -> . TRUE
    (59) boolean_expr -> . FALSE
    (60) not_expr -> . NOT expression
    (61) number_expr -> . NUMBER
    (62) id_expr -> . ID
    (63) string_expr -> . STRING1
    (64) string_expr -> . STRING2
    (65) list_expr -> . LSBRACKET elements RSBRACKET
    (66) parse_text_expr -> . SELECTOR LPAREN elements RPAREN
    (67) group_expr -> . LPAREN expression RPAREN
    (68) uplus_expr -> . PLUS expression
    (69) uminus_expr -> . MINUS expression
    (70) arithmetic_expr -> . expression PLUS expression
    (71) arithmetic_expr -> . expression MINUS expression
    (72) arithmetic_expr -> . expression MULTIPLY expression
    (73) arithmetic_expr -> . expression DIVIDE expression
    (74) arithmetic_expr -> . expression POW expression
    (75) arithmetic_expr -> . expression MOD expression
    (76) conditional_expr -> . expression AND expression
    (77) conditional_expr -> . expression OR expression
    (78) conditional_expr -> . expression XOR expression
    (79) conditional_expr -> . expression EQUALS expression
    (80) conditional_expr -> . expression NOT_EQUALS expression
    (81) conditional_expr -> . expression GREATER_THAN expression
    (82) conditional_expr -> . expression LESS_THAN expression
    (83) conditional_expr -> . expression GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> . expression LESS_THAN_OR_EQUAL expression

    TRUE            shift and go to state 15
    FALSE           shift and go to state 37
    NOT             shift and go to state 44
    NUMBER          shift and go to state 7
    ID              shift and go to state 49
    STRING1         shift and go to state 26
    STRING2         shift and go to state 25
    LSBRACKET       shift and go to state 4
    SELECTOR        shift and go to state 9
    LPAREN          shift and go to state 32
    PLUS            shift and go to state 24
    MINUS           shift and go to state 16

    conditional_expr               shift and go to state 12
    list_expr                      shift and go to state 1
    number_expr                    shift and go to state 33
    string_expr                    shift and go to state 18
    unary_expr                     shift and go to state 3
    uminus_expr                    shift and go to state 39
    id_expr                        shift and go to state 40
    group_expr                     shift and go to state 27
    arithmetic_expr                shift and go to state 19
    boolean_expr                   shift and go to state 41
    not_expr                       shift and go to state 6
    binary_expr                    shift and go to state 10
    parse_text_expr                shift and go to state 14
    uplus_expr                     shift and go to state 45
    expression                     shift and go to state 96

state 68

    (83) conditional_expr -> expression GREATER_THAN_OR_EQUAL . expression
    (44) expression -> . unary_expr
    (45) expression -> . binary_expr
    (46) unary_expr -> . boolean_expr
    (47) unary_expr -> . not_expr
    (48) unary_expr -> . number_expr
    (49) unary_expr -> . id_expr
    (50) unary_expr -> . string_expr
    (51) unary_expr -> . list_expr
    (52) unary_expr -> . parse_text_expr
    (53) unary_expr -> . group_expr
    (54) unary_expr -> . uplus_expr
    (55) unary_expr -> . uminus_expr
    (56) binary_expr -> . arithmetic_expr
    (57) binary_expr -> . conditional_expr
    (58) boolean_expr -> . TRUE
    (59) boolean_expr -> . FALSE
    (60) not_expr -> . NOT expression
    (61) number_expr -> . NUMBER
    (62) id_expr -> . ID
    (63) string_expr -> . STRING1
    (64) string_expr -> . STRING2
    (65) list_expr -> . LSBRACKET elements RSBRACKET
    (66) parse_text_expr -> . SELECTOR LPAREN elements RPAREN
    (67) group_expr -> . LPAREN expression RPAREN
    (68) uplus_expr -> . PLUS expression
    (69) uminus_expr -> . MINUS expression
    (70) arithmetic_expr -> . expression PLUS expression
    (71) arithmetic_expr -> . expression MINUS expression
    (72) arithmetic_expr -> . expression MULTIPLY expression
    (73) arithmetic_expr -> . expression DIVIDE expression
    (74) arithmetic_expr -> . expression POW expression
    (75) arithmetic_expr -> . expression MOD expression
    (76) conditional_expr -> . expression AND expression
    (77) conditional_expr -> . expression OR expression
    (78) conditional_expr -> . expression XOR expression
    (79) conditional_expr -> . expression EQUALS expression
    (80) conditional_expr -> . expression NOT_EQUALS expression
    (81) conditional_expr -> . expression GREATER_THAN expression
    (82) conditional_expr -> . expression LESS_THAN expression
    (83) conditional_expr -> . expression GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> . expression LESS_THAN_OR_EQUAL expression

    TRUE            shift and go to state 15
    FALSE           shift and go to state 37
    NOT             shift and go to state 44
    NUMBER          shift and go to state 7
    ID              shift and go to state 49
    STRING1         shift and go to state 26
    STRING2         shift and go to state 25
    LSBRACKET       shift and go to state 4
    SELECTOR        shift and go to state 9
    LPAREN          shift and go to state 32
    PLUS            shift and go to state 24
    MINUS           shift and go to state 16

    conditional_expr               shift and go to state 12
    list_expr                      shift and go to state 1
    number_expr                    shift and go to state 33
    string_expr                    shift and go to state 18
    unary_expr                     shift and go to state 3
    uminus_expr                    shift and go to state 39
    id_expr                        shift and go to state 40
    group_expr                     shift and go to state 27
    arithmetic_expr                shift and go to state 19
    boolean_expr                   shift and go to state 41
    not_expr                       shift and go to state 6
    binary_expr                    shift and go to state 10
    parse_text_expr                shift and go to state 14
    uplus_expr                     shift and go to state 45
    expression                     shift and go to state 97

state 69

    (74) arithmetic_expr -> expression POW . expression
    (44) expression -> . unary_expr
    (45) expression -> . binary_expr
    (46) unary_expr -> . boolean_expr
    (47) unary_expr -> . not_expr
    (48) unary_expr -> . number_expr
    (49) unary_expr -> . id_expr
    (50) unary_expr -> . string_expr
    (51) unary_expr -> . list_expr
    (52) unary_expr -> . parse_text_expr
    (53) unary_expr -> . group_expr
    (54) unary_expr -> . uplus_expr
    (55) unary_expr -> . uminus_expr
    (56) binary_expr -> . arithmetic_expr
    (57) binary_expr -> . conditional_expr
    (58) boolean_expr -> . TRUE
    (59) boolean_expr -> . FALSE
    (60) not_expr -> . NOT expression
    (61) number_expr -> . NUMBER
    (62) id_expr -> . ID
    (63) string_expr -> . STRING1
    (64) string_expr -> . STRING2
    (65) list_expr -> . LSBRACKET elements RSBRACKET
    (66) parse_text_expr -> . SELECTOR LPAREN elements RPAREN
    (67) group_expr -> . LPAREN expression RPAREN
    (68) uplus_expr -> . PLUS expression
    (69) uminus_expr -> . MINUS expression
    (70) arithmetic_expr -> . expression PLUS expression
    (71) arithmetic_expr -> . expression MINUS expression
    (72) arithmetic_expr -> . expression MULTIPLY expression
    (73) arithmetic_expr -> . expression DIVIDE expression
    (74) arithmetic_expr -> . expression POW expression
    (75) arithmetic_expr -> . expression MOD expression
    (76) conditional_expr -> . expression AND expression
    (77) conditional_expr -> . expression OR expression
    (78) conditional_expr -> . expression XOR expression
    (79) conditional_expr -> . expression EQUALS expression
    (80) conditional_expr -> . expression NOT_EQUALS expression
    (81) conditional_expr -> . expression GREATER_THAN expression
    (82) conditional_expr -> . expression LESS_THAN expression
    (83) conditional_expr -> . expression GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> . expression LESS_THAN_OR_EQUAL expression

    TRUE            shift and go to state 15
    FALSE           shift and go to state 37
    NOT             shift and go to state 44
    NUMBER          shift and go to state 7
    ID              shift and go to state 49
    STRING1         shift and go to state 26
    STRING2         shift and go to state 25
    LSBRACKET       shift and go to state 4
    SELECTOR        shift and go to state 9
    LPAREN          shift and go to state 32
    PLUS            shift and go to state 24
    MINUS           shift and go to state 16

    conditional_expr               shift and go to state 12
    list_expr                      shift and go to state 1
    number_expr                    shift and go to state 33
    string_expr                    shift and go to state 18
    unary_expr                     shift and go to state 3
    uminus_expr                    shift and go to state 39
    id_expr                        shift and go to state 40
    group_expr                     shift and go to state 27
    arithmetic_expr                shift and go to state 19
    boolean_expr                   shift and go to state 41
    not_expr                       shift and go to state 6
    binary_expr                    shift and go to state 10
    parse_text_expr                shift and go to state 14
    uplus_expr                     shift and go to state 45
    expression                     shift and go to state 98

state 70

    (84) conditional_expr -> expression LESS_THAN_OR_EQUAL . expression
    (44) expression -> . unary_expr
    (45) expression -> . binary_expr
    (46) unary_expr -> . boolean_expr
    (47) unary_expr -> . not_expr
    (48) unary_expr -> . number_expr
    (49) unary_expr -> . id_expr
    (50) unary_expr -> . string_expr
    (51) unary_expr -> . list_expr
    (52) unary_expr -> . parse_text_expr
    (53) unary_expr -> . group_expr
    (54) unary_expr -> . uplus_expr
    (55) unary_expr -> . uminus_expr
    (56) binary_expr -> . arithmetic_expr
    (57) binary_expr -> . conditional_expr
    (58) boolean_expr -> . TRUE
    (59) boolean_expr -> . FALSE
    (60) not_expr -> . NOT expression
    (61) number_expr -> . NUMBER
    (62) id_expr -> . ID
    (63) string_expr -> . STRING1
    (64) string_expr -> . STRING2
    (65) list_expr -> . LSBRACKET elements RSBRACKET
    (66) parse_text_expr -> . SELECTOR LPAREN elements RPAREN
    (67) group_expr -> . LPAREN expression RPAREN
    (68) uplus_expr -> . PLUS expression
    (69) uminus_expr -> . MINUS expression
    (70) arithmetic_expr -> . expression PLUS expression
    (71) arithmetic_expr -> . expression MINUS expression
    (72) arithmetic_expr -> . expression MULTIPLY expression
    (73) arithmetic_expr -> . expression DIVIDE expression
    (74) arithmetic_expr -> . expression POW expression
    (75) arithmetic_expr -> . expression MOD expression
    (76) conditional_expr -> . expression AND expression
    (77) conditional_expr -> . expression OR expression
    (78) conditional_expr -> . expression XOR expression
    (79) conditional_expr -> . expression EQUALS expression
    (80) conditional_expr -> . expression NOT_EQUALS expression
    (81) conditional_expr -> . expression GREATER_THAN expression
    (82) conditional_expr -> . expression LESS_THAN expression
    (83) conditional_expr -> . expression GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> . expression LESS_THAN_OR_EQUAL expression

    TRUE            shift and go to state 15
    FALSE           shift and go to state 37
    NOT             shift and go to state 44
    NUMBER          shift and go to state 7
    ID              shift and go to state 49
    STRING1         shift and go to state 26
    STRING2         shift and go to state 25
    LSBRACKET       shift and go to state 4
    SELECTOR        shift and go to state 9
    LPAREN          shift and go to state 32
    PLUS            shift and go to state 24
    MINUS           shift and go to state 16

    conditional_expr               shift and go to state 12
    list_expr                      shift and go to state 1
    number_expr                    shift and go to state 33
    string_expr                    shift and go to state 18
    unary_expr                     shift and go to state 3
    uminus_expr                    shift and go to state 39
    id_expr                        shift and go to state 40
    group_expr                     shift and go to state 27
    arithmetic_expr                shift and go to state 19
    boolean_expr                   shift and go to state 41
    not_expr                       shift and go to state 6
    binary_expr                    shift and go to state 10
    parse_text_expr                shift and go to state 14
    uplus_expr                     shift and go to state 45
    expression                     shift and go to state 99

state 71

    (79) conditional_expr -> expression EQUALS . expression
    (44) expression -> . unary_expr
    (45) expression -> . binary_expr
    (46) unary_expr -> . boolean_expr
    (47) unary_expr -> . not_expr
    (48) unary_expr -> . number_expr
    (49) unary_expr -> . id_expr
    (50) unary_expr -> . string_expr
    (51) unary_expr -> . list_expr
    (52) unary_expr -> . parse_text_expr
    (53) unary_expr -> . group_expr
    (54) unary_expr -> . uplus_expr
    (55) unary_expr -> . uminus_expr
    (56) binary_expr -> . arithmetic_expr
    (57) binary_expr -> . conditional_expr
    (58) boolean_expr -> . TRUE
    (59) boolean_expr -> . FALSE
    (60) not_expr -> . NOT expression
    (61) number_expr -> . NUMBER
    (62) id_expr -> . ID
    (63) string_expr -> . STRING1
    (64) string_expr -> . STRING2
    (65) list_expr -> . LSBRACKET elements RSBRACKET
    (66) parse_text_expr -> . SELECTOR LPAREN elements RPAREN
    (67) group_expr -> . LPAREN expression RPAREN
    (68) uplus_expr -> . PLUS expression
    (69) uminus_expr -> . MINUS expression
    (70) arithmetic_expr -> . expression PLUS expression
    (71) arithmetic_expr -> . expression MINUS expression
    (72) arithmetic_expr -> . expression MULTIPLY expression
    (73) arithmetic_expr -> . expression DIVIDE expression
    (74) arithmetic_expr -> . expression POW expression
    (75) arithmetic_expr -> . expression MOD expression
    (76) conditional_expr -> . expression AND expression
    (77) conditional_expr -> . expression OR expression
    (78) conditional_expr -> . expression XOR expression
    (79) conditional_expr -> . expression EQUALS expression
    (80) conditional_expr -> . expression NOT_EQUALS expression
    (81) conditional_expr -> . expression GREATER_THAN expression
    (82) conditional_expr -> . expression LESS_THAN expression
    (83) conditional_expr -> . expression GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> . expression LESS_THAN_OR_EQUAL expression

    TRUE            shift and go to state 15
    FALSE           shift and go to state 37
    NOT             shift and go to state 44
    NUMBER          shift and go to state 7
    ID              shift and go to state 49
    STRING1         shift and go to state 26
    STRING2         shift and go to state 25
    LSBRACKET       shift and go to state 4
    SELECTOR        shift and go to state 9
    LPAREN          shift and go to state 32
    PLUS            shift and go to state 24
    MINUS           shift and go to state 16

    conditional_expr               shift and go to state 12
    list_expr                      shift and go to state 1
    number_expr                    shift and go to state 33
    string_expr                    shift and go to state 18
    unary_expr                     shift and go to state 3
    uminus_expr                    shift and go to state 39
    id_expr                        shift and go to state 40
    group_expr                     shift and go to state 27
    arithmetic_expr                shift and go to state 19
    boolean_expr                   shift and go to state 41
    not_expr                       shift and go to state 6
    binary_expr                    shift and go to state 10
    parse_text_expr                shift and go to state 14
    uplus_expr                     shift and go to state 45
    expression                     shift and go to state 100

state 72

    (77) conditional_expr -> expression OR . expression
    (44) expression -> . unary_expr
    (45) expression -> . binary_expr
    (46) unary_expr -> . boolean_expr
    (47) unary_expr -> . not_expr
    (48) unary_expr -> . number_expr
    (49) unary_expr -> . id_expr
    (50) unary_expr -> . string_expr
    (51) unary_expr -> . list_expr
    (52) unary_expr -> . parse_text_expr
    (53) unary_expr -> . group_expr
    (54) unary_expr -> . uplus_expr
    (55) unary_expr -> . uminus_expr
    (56) binary_expr -> . arithmetic_expr
    (57) binary_expr -> . conditional_expr
    (58) boolean_expr -> . TRUE
    (59) boolean_expr -> . FALSE
    (60) not_expr -> . NOT expression
    (61) number_expr -> . NUMBER
    (62) id_expr -> . ID
    (63) string_expr -> . STRING1
    (64) string_expr -> . STRING2
    (65) list_expr -> . LSBRACKET elements RSBRACKET
    (66) parse_text_expr -> . SELECTOR LPAREN elements RPAREN
    (67) group_expr -> . LPAREN expression RPAREN
    (68) uplus_expr -> . PLUS expression
    (69) uminus_expr -> . MINUS expression
    (70) arithmetic_expr -> . expression PLUS expression
    (71) arithmetic_expr -> . expression MINUS expression
    (72) arithmetic_expr -> . expression MULTIPLY expression
    (73) arithmetic_expr -> . expression DIVIDE expression
    (74) arithmetic_expr -> . expression POW expression
    (75) arithmetic_expr -> . expression MOD expression
    (76) conditional_expr -> . expression AND expression
    (77) conditional_expr -> . expression OR expression
    (78) conditional_expr -> . expression XOR expression
    (79) conditional_expr -> . expression EQUALS expression
    (80) conditional_expr -> . expression NOT_EQUALS expression
    (81) conditional_expr -> . expression GREATER_THAN expression
    (82) conditional_expr -> . expression LESS_THAN expression
    (83) conditional_expr -> . expression GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> . expression LESS_THAN_OR_EQUAL expression

    TRUE            shift and go to state 15
    FALSE           shift and go to state 37
    NOT             shift and go to state 44
    NUMBER          shift and go to state 7
    ID              shift and go to state 49
    STRING1         shift and go to state 26
    STRING2         shift and go to state 25
    LSBRACKET       shift and go to state 4
    SELECTOR        shift and go to state 9
    LPAREN          shift and go to state 32
    PLUS            shift and go to state 24
    MINUS           shift and go to state 16

    conditional_expr               shift and go to state 12
    list_expr                      shift and go to state 1
    number_expr                    shift and go to state 33
    string_expr                    shift and go to state 18
    unary_expr                     shift and go to state 3
    uminus_expr                    shift and go to state 39
    id_expr                        shift and go to state 40
    group_expr                     shift and go to state 27
    arithmetic_expr                shift and go to state 19
    boolean_expr                   shift and go to state 41
    not_expr                       shift and go to state 6
    binary_expr                    shift and go to state 10
    parse_text_expr                shift and go to state 14
    uplus_expr                     shift and go to state 45
    expression                     shift and go to state 101

state 73

    (81) conditional_expr -> expression GREATER_THAN . expression
    (44) expression -> . unary_expr
    (45) expression -> . binary_expr
    (46) unary_expr -> . boolean_expr
    (47) unary_expr -> . not_expr
    (48) unary_expr -> . number_expr
    (49) unary_expr -> . id_expr
    (50) unary_expr -> . string_expr
    (51) unary_expr -> . list_expr
    (52) unary_expr -> . parse_text_expr
    (53) unary_expr -> . group_expr
    (54) unary_expr -> . uplus_expr
    (55) unary_expr -> . uminus_expr
    (56) binary_expr -> . arithmetic_expr
    (57) binary_expr -> . conditional_expr
    (58) boolean_expr -> . TRUE
    (59) boolean_expr -> . FALSE
    (60) not_expr -> . NOT expression
    (61) number_expr -> . NUMBER
    (62) id_expr -> . ID
    (63) string_expr -> . STRING1
    (64) string_expr -> . STRING2
    (65) list_expr -> . LSBRACKET elements RSBRACKET
    (66) parse_text_expr -> . SELECTOR LPAREN elements RPAREN
    (67) group_expr -> . LPAREN expression RPAREN
    (68) uplus_expr -> . PLUS expression
    (69) uminus_expr -> . MINUS expression
    (70) arithmetic_expr -> . expression PLUS expression
    (71) arithmetic_expr -> . expression MINUS expression
    (72) arithmetic_expr -> . expression MULTIPLY expression
    (73) arithmetic_expr -> . expression DIVIDE expression
    (74) arithmetic_expr -> . expression POW expression
    (75) arithmetic_expr -> . expression MOD expression
    (76) conditional_expr -> . expression AND expression
    (77) conditional_expr -> . expression OR expression
    (78) conditional_expr -> . expression XOR expression
    (79) conditional_expr -> . expression EQUALS expression
    (80) conditional_expr -> . expression NOT_EQUALS expression
    (81) conditional_expr -> . expression GREATER_THAN expression
    (82) conditional_expr -> . expression LESS_THAN expression
    (83) conditional_expr -> . expression GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> . expression LESS_THAN_OR_EQUAL expression

    TRUE            shift and go to state 15
    FALSE           shift and go to state 37
    NOT             shift and go to state 44
    NUMBER          shift and go to state 7
    ID              shift and go to state 49
    STRING1         shift and go to state 26
    STRING2         shift and go to state 25
    LSBRACKET       shift and go to state 4
    SELECTOR        shift and go to state 9
    LPAREN          shift and go to state 32
    PLUS            shift and go to state 24
    MINUS           shift and go to state 16

    conditional_expr               shift and go to state 12
    list_expr                      shift and go to state 1
    number_expr                    shift and go to state 33
    string_expr                    shift and go to state 18
    unary_expr                     shift and go to state 3
    uminus_expr                    shift and go to state 39
    id_expr                        shift and go to state 40
    group_expr                     shift and go to state 27
    arithmetic_expr                shift and go to state 19
    boolean_expr                   shift and go to state 41
    not_expr                       shift and go to state 6
    binary_expr                    shift and go to state 10
    parse_text_expr                shift and go to state 14
    uplus_expr                     shift and go to state 45
    expression                     shift and go to state 102

state 74

    (19) increment_stmt -> expression PLUS . PLUS SEMICOLON
    (70) arithmetic_expr -> expression PLUS . expression
    (44) expression -> . unary_expr
    (45) expression -> . binary_expr
    (46) unary_expr -> . boolean_expr
    (47) unary_expr -> . not_expr
    (48) unary_expr -> . number_expr
    (49) unary_expr -> . id_expr
    (50) unary_expr -> . string_expr
    (51) unary_expr -> . list_expr
    (52) unary_expr -> . parse_text_expr
    (53) unary_expr -> . group_expr
    (54) unary_expr -> . uplus_expr
    (55) unary_expr -> . uminus_expr
    (56) binary_expr -> . arithmetic_expr
    (57) binary_expr -> . conditional_expr
    (58) boolean_expr -> . TRUE
    (59) boolean_expr -> . FALSE
    (60) not_expr -> . NOT expression
    (61) number_expr -> . NUMBER
    (62) id_expr -> . ID
    (63) string_expr -> . STRING1
    (64) string_expr -> . STRING2
    (65) list_expr -> . LSBRACKET elements RSBRACKET
    (66) parse_text_expr -> . SELECTOR LPAREN elements RPAREN
    (67) group_expr -> . LPAREN expression RPAREN
    (68) uplus_expr -> . PLUS expression
    (69) uminus_expr -> . MINUS expression
    (70) arithmetic_expr -> . expression PLUS expression
    (71) arithmetic_expr -> . expression MINUS expression
    (72) arithmetic_expr -> . expression MULTIPLY expression
    (73) arithmetic_expr -> . expression DIVIDE expression
    (74) arithmetic_expr -> . expression POW expression
    (75) arithmetic_expr -> . expression MOD expression
    (76) conditional_expr -> . expression AND expression
    (77) conditional_expr -> . expression OR expression
    (78) conditional_expr -> . expression XOR expression
    (79) conditional_expr -> . expression EQUALS expression
    (80) conditional_expr -> . expression NOT_EQUALS expression
    (81) conditional_expr -> . expression GREATER_THAN expression
    (82) conditional_expr -> . expression LESS_THAN expression
    (83) conditional_expr -> . expression GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> . expression LESS_THAN_OR_EQUAL expression

    PLUS            shift and go to state 103
    TRUE            shift and go to state 15
    FALSE           shift and go to state 37
    NOT             shift and go to state 44
    NUMBER          shift and go to state 7
    ID              shift and go to state 49
    STRING1         shift and go to state 26
    STRING2         shift and go to state 25
    LSBRACKET       shift and go to state 4
    SELECTOR        shift and go to state 9
    LPAREN          shift and go to state 32
    MINUS           shift and go to state 16

    conditional_expr               shift and go to state 12
    list_expr                      shift and go to state 1
    number_expr                    shift and go to state 33
    string_expr                    shift and go to state 18
    unary_expr                     shift and go to state 3
    uminus_expr                    shift and go to state 39
    id_expr                        shift and go to state 40
    group_expr                     shift and go to state 27
    arithmetic_expr                shift and go to state 19
    boolean_expr                   shift and go to state 41
    not_expr                       shift and go to state 6
    binary_expr                    shift and go to state 10
    parse_text_expr                shift and go to state 14
    uplus_expr                     shift and go to state 45
    expression                     shift and go to state 104

state 75

    (72) arithmetic_expr -> expression MULTIPLY . expression
    (44) expression -> . unary_expr
    (45) expression -> . binary_expr
    (46) unary_expr -> . boolean_expr
    (47) unary_expr -> . not_expr
    (48) unary_expr -> . number_expr
    (49) unary_expr -> . id_expr
    (50) unary_expr -> . string_expr
    (51) unary_expr -> . list_expr
    (52) unary_expr -> . parse_text_expr
    (53) unary_expr -> . group_expr
    (54) unary_expr -> . uplus_expr
    (55) unary_expr -> . uminus_expr
    (56) binary_expr -> . arithmetic_expr
    (57) binary_expr -> . conditional_expr
    (58) boolean_expr -> . TRUE
    (59) boolean_expr -> . FALSE
    (60) not_expr -> . NOT expression
    (61) number_expr -> . NUMBER
    (62) id_expr -> . ID
    (63) string_expr -> . STRING1
    (64) string_expr -> . STRING2
    (65) list_expr -> . LSBRACKET elements RSBRACKET
    (66) parse_text_expr -> . SELECTOR LPAREN elements RPAREN
    (67) group_expr -> . LPAREN expression RPAREN
    (68) uplus_expr -> . PLUS expression
    (69) uminus_expr -> . MINUS expression
    (70) arithmetic_expr -> . expression PLUS expression
    (71) arithmetic_expr -> . expression MINUS expression
    (72) arithmetic_expr -> . expression MULTIPLY expression
    (73) arithmetic_expr -> . expression DIVIDE expression
    (74) arithmetic_expr -> . expression POW expression
    (75) arithmetic_expr -> . expression MOD expression
    (76) conditional_expr -> . expression AND expression
    (77) conditional_expr -> . expression OR expression
    (78) conditional_expr -> . expression XOR expression
    (79) conditional_expr -> . expression EQUALS expression
    (80) conditional_expr -> . expression NOT_EQUALS expression
    (81) conditional_expr -> . expression GREATER_THAN expression
    (82) conditional_expr -> . expression LESS_THAN expression
    (83) conditional_expr -> . expression GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> . expression LESS_THAN_OR_EQUAL expression

    TRUE            shift and go to state 15
    FALSE           shift and go to state 37
    NOT             shift and go to state 44
    NUMBER          shift and go to state 7
    ID              shift and go to state 49
    STRING1         shift and go to state 26
    STRING2         shift and go to state 25
    LSBRACKET       shift and go to state 4
    SELECTOR        shift and go to state 9
    LPAREN          shift and go to state 32
    PLUS            shift and go to state 24
    MINUS           shift and go to state 16

    conditional_expr               shift and go to state 12
    list_expr                      shift and go to state 1
    number_expr                    shift and go to state 33
    string_expr                    shift and go to state 18
    unary_expr                     shift and go to state 3
    uminus_expr                    shift and go to state 39
    id_expr                        shift and go to state 40
    group_expr                     shift and go to state 27
    arithmetic_expr                shift and go to state 19
    boolean_expr                   shift and go to state 41
    not_expr                       shift and go to state 6
    binary_expr                    shift and go to state 10
    parse_text_expr                shift and go to state 14
    uplus_expr                     shift and go to state 45
    expression                     shift and go to state 105

state 76

    (82) conditional_expr -> expression LESS_THAN . expression
    (44) expression -> . unary_expr
    (45) expression -> . binary_expr
    (46) unary_expr -> . boolean_expr
    (47) unary_expr -> . not_expr
    (48) unary_expr -> . number_expr
    (49) unary_expr -> . id_expr
    (50) unary_expr -> . string_expr
    (51) unary_expr -> . list_expr
    (52) unary_expr -> . parse_text_expr
    (53) unary_expr -> . group_expr
    (54) unary_expr -> . uplus_expr
    (55) unary_expr -> . uminus_expr
    (56) binary_expr -> . arithmetic_expr
    (57) binary_expr -> . conditional_expr
    (58) boolean_expr -> . TRUE
    (59) boolean_expr -> . FALSE
    (60) not_expr -> . NOT expression
    (61) number_expr -> . NUMBER
    (62) id_expr -> . ID
    (63) string_expr -> . STRING1
    (64) string_expr -> . STRING2
    (65) list_expr -> . LSBRACKET elements RSBRACKET
    (66) parse_text_expr -> . SELECTOR LPAREN elements RPAREN
    (67) group_expr -> . LPAREN expression RPAREN
    (68) uplus_expr -> . PLUS expression
    (69) uminus_expr -> . MINUS expression
    (70) arithmetic_expr -> . expression PLUS expression
    (71) arithmetic_expr -> . expression MINUS expression
    (72) arithmetic_expr -> . expression MULTIPLY expression
    (73) arithmetic_expr -> . expression DIVIDE expression
    (74) arithmetic_expr -> . expression POW expression
    (75) arithmetic_expr -> . expression MOD expression
    (76) conditional_expr -> . expression AND expression
    (77) conditional_expr -> . expression OR expression
    (78) conditional_expr -> . expression XOR expression
    (79) conditional_expr -> . expression EQUALS expression
    (80) conditional_expr -> . expression NOT_EQUALS expression
    (81) conditional_expr -> . expression GREATER_THAN expression
    (82) conditional_expr -> . expression LESS_THAN expression
    (83) conditional_expr -> . expression GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> . expression LESS_THAN_OR_EQUAL expression

    TRUE            shift and go to state 15
    FALSE           shift and go to state 37
    NOT             shift and go to state 44
    NUMBER          shift and go to state 7
    ID              shift and go to state 49
    STRING1         shift and go to state 26
    STRING2         shift and go to state 25
    LSBRACKET       shift and go to state 4
    SELECTOR        shift and go to state 9
    LPAREN          shift and go to state 32
    PLUS            shift and go to state 24
    MINUS           shift and go to state 16

    conditional_expr               shift and go to state 12
    list_expr                      shift and go to state 1
    number_expr                    shift and go to state 33
    string_expr                    shift and go to state 18
    unary_expr                     shift and go to state 3
    uminus_expr                    shift and go to state 39
    id_expr                        shift and go to state 40
    group_expr                     shift and go to state 27
    arithmetic_expr                shift and go to state 19
    boolean_expr                   shift and go to state 41
    not_expr                       shift and go to state 6
    binary_expr                    shift and go to state 10
    parse_text_expr                shift and go to state 14
    uplus_expr                     shift and go to state 45
    expression                     shift and go to state 106

state 77

    (20) decrement_stmt -> expression MINUS . MINUS SEMICOLON
    (71) arithmetic_expr -> expression MINUS . expression
    (44) expression -> . unary_expr
    (45) expression -> . binary_expr
    (46) unary_expr -> . boolean_expr
    (47) unary_expr -> . not_expr
    (48) unary_expr -> . number_expr
    (49) unary_expr -> . id_expr
    (50) unary_expr -> . string_expr
    (51) unary_expr -> . list_expr
    (52) unary_expr -> . parse_text_expr
    (53) unary_expr -> . group_expr
    (54) unary_expr -> . uplus_expr
    (55) unary_expr -> . uminus_expr
    (56) binary_expr -> . arithmetic_expr
    (57) binary_expr -> . conditional_expr
    (58) boolean_expr -> . TRUE
    (59) boolean_expr -> . FALSE
    (60) not_expr -> . NOT expression
    (61) number_expr -> . NUMBER
    (62) id_expr -> . ID
    (63) string_expr -> . STRING1
    (64) string_expr -> . STRING2
    (65) list_expr -> . LSBRACKET elements RSBRACKET
    (66) parse_text_expr -> . SELECTOR LPAREN elements RPAREN
    (67) group_expr -> . LPAREN expression RPAREN
    (68) uplus_expr -> . PLUS expression
    (69) uminus_expr -> . MINUS expression
    (70) arithmetic_expr -> . expression PLUS expression
    (71) arithmetic_expr -> . expression MINUS expression
    (72) arithmetic_expr -> . expression MULTIPLY expression
    (73) arithmetic_expr -> . expression DIVIDE expression
    (74) arithmetic_expr -> . expression POW expression
    (75) arithmetic_expr -> . expression MOD expression
    (76) conditional_expr -> . expression AND expression
    (77) conditional_expr -> . expression OR expression
    (78) conditional_expr -> . expression XOR expression
    (79) conditional_expr -> . expression EQUALS expression
    (80) conditional_expr -> . expression NOT_EQUALS expression
    (81) conditional_expr -> . expression GREATER_THAN expression
    (82) conditional_expr -> . expression LESS_THAN expression
    (83) conditional_expr -> . expression GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> . expression LESS_THAN_OR_EQUAL expression

    MINUS           shift and go to state 107
    TRUE            shift and go to state 15
    FALSE           shift and go to state 37
    NOT             shift and go to state 44
    NUMBER          shift and go to state 7
    ID              shift and go to state 49
    STRING1         shift and go to state 26
    STRING2         shift and go to state 25
    LSBRACKET       shift and go to state 4
    SELECTOR        shift and go to state 9
    LPAREN          shift and go to state 32
    PLUS            shift and go to state 24

    conditional_expr               shift and go to state 12
    list_expr                      shift and go to state 1
    number_expr                    shift and go to state 33
    string_expr                    shift and go to state 18
    unary_expr                     shift and go to state 3
    uminus_expr                    shift and go to state 39
    id_expr                        shift and go to state 40
    group_expr                     shift and go to state 27
    arithmetic_expr                shift and go to state 19
    boolean_expr                   shift and go to state 41
    not_expr                       shift and go to state 6
    binary_expr                    shift and go to state 10
    parse_text_expr                shift and go to state 14
    uplus_expr                     shift and go to state 45
    expression                     shift and go to state 108

state 78

    (75) arithmetic_expr -> expression MOD . expression
    (44) expression -> . unary_expr
    (45) expression -> . binary_expr
    (46) unary_expr -> . boolean_expr
    (47) unary_expr -> . not_expr
    (48) unary_expr -> . number_expr
    (49) unary_expr -> . id_expr
    (50) unary_expr -> . string_expr
    (51) unary_expr -> . list_expr
    (52) unary_expr -> . parse_text_expr
    (53) unary_expr -> . group_expr
    (54) unary_expr -> . uplus_expr
    (55) unary_expr -> . uminus_expr
    (56) binary_expr -> . arithmetic_expr
    (57) binary_expr -> . conditional_expr
    (58) boolean_expr -> . TRUE
    (59) boolean_expr -> . FALSE
    (60) not_expr -> . NOT expression
    (61) number_expr -> . NUMBER
    (62) id_expr -> . ID
    (63) string_expr -> . STRING1
    (64) string_expr -> . STRING2
    (65) list_expr -> . LSBRACKET elements RSBRACKET
    (66) parse_text_expr -> . SELECTOR LPAREN elements RPAREN
    (67) group_expr -> . LPAREN expression RPAREN
    (68) uplus_expr -> . PLUS expression
    (69) uminus_expr -> . MINUS expression
    (70) arithmetic_expr -> . expression PLUS expression
    (71) arithmetic_expr -> . expression MINUS expression
    (72) arithmetic_expr -> . expression MULTIPLY expression
    (73) arithmetic_expr -> . expression DIVIDE expression
    (74) arithmetic_expr -> . expression POW expression
    (75) arithmetic_expr -> . expression MOD expression
    (76) conditional_expr -> . expression AND expression
    (77) conditional_expr -> . expression OR expression
    (78) conditional_expr -> . expression XOR expression
    (79) conditional_expr -> . expression EQUALS expression
    (80) conditional_expr -> . expression NOT_EQUALS expression
    (81) conditional_expr -> . expression GREATER_THAN expression
    (82) conditional_expr -> . expression LESS_THAN expression
    (83) conditional_expr -> . expression GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> . expression LESS_THAN_OR_EQUAL expression

    TRUE            shift and go to state 15
    FALSE           shift and go to state 37
    NOT             shift and go to state 44
    NUMBER          shift and go to state 7
    ID              shift and go to state 49
    STRING1         shift and go to state 26
    STRING2         shift and go to state 25
    LSBRACKET       shift and go to state 4
    SELECTOR        shift and go to state 9
    LPAREN          shift and go to state 32
    PLUS            shift and go to state 24
    MINUS           shift and go to state 16

    conditional_expr               shift and go to state 12
    list_expr                      shift and go to state 1
    number_expr                    shift and go to state 33
    string_expr                    shift and go to state 18
    unary_expr                     shift and go to state 3
    uminus_expr                    shift and go to state 39
    id_expr                        shift and go to state 40
    group_expr                     shift and go to state 27
    arithmetic_expr                shift and go to state 19
    boolean_expr                   shift and go to state 41
    not_expr                       shift and go to state 6
    binary_expr                    shift and go to state 10
    parse_text_expr                shift and go to state 14
    uplus_expr                     shift and go to state 45
    expression                     shift and go to state 109

state 79

    (65) list_expr -> LSBRACKET elements RSBRACKET .

    PLUS            reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)
    MINUS           reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)
    MULTIPLY        reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)
    DIVIDE          reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)
    POW             reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)
    MOD             reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)
    AND             reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)
    OR              reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)
    XOR             reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)
    EQUALS          reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)
    NOT_EQUALS      reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)
    GREATER_THAN    reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)
    LESS_THAN       reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)
    GREATER_THAN_OR_EQUAL reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)
    LESS_THAN_OR_EQUAL reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)
    ID              reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)
    IF              reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)
    WHILE           reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)
    FOR             reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)
    FUN             reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)
    TRUE            reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)
    FALSE           reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)
    NOT             reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)
    NUMBER          reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)
    STRING1         reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)
    STRING2         reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)
    LSBRACKET       reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)
    SELECTOR        reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)
    LPAREN          reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)
    $end            reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)
    COMMA           reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)
    RSBRACKET       reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)
    DO              reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)
    END             reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)
    ELIF            reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)
    ELSE            reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)
    RPAREN          reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)
    SEMICOLON       reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)
    RCBRACKET       reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)


state 80

    (22) elements -> element COMMA . elements
    (22) elements -> . element COMMA elements
    (23) elements -> . element
    (24) elements -> .
    (25) element -> . expression
    (44) expression -> . unary_expr
    (45) expression -> . binary_expr
    (46) unary_expr -> . boolean_expr
    (47) unary_expr -> . not_expr
    (48) unary_expr -> . number_expr
    (49) unary_expr -> . id_expr
    (50) unary_expr -> . string_expr
    (51) unary_expr -> . list_expr
    (52) unary_expr -> . parse_text_expr
    (53) unary_expr -> . group_expr
    (54) unary_expr -> . uplus_expr
    (55) unary_expr -> . uminus_expr
    (56) binary_expr -> . arithmetic_expr
    (57) binary_expr -> . conditional_expr
    (58) boolean_expr -> . TRUE
    (59) boolean_expr -> . FALSE
    (60) not_expr -> . NOT expression
    (61) number_expr -> . NUMBER
    (62) id_expr -> . ID
    (63) string_expr -> . STRING1
    (64) string_expr -> . STRING2
    (65) list_expr -> . LSBRACKET elements RSBRACKET
    (66) parse_text_expr -> . SELECTOR LPAREN elements RPAREN
    (67) group_expr -> . LPAREN expression RPAREN
    (68) uplus_expr -> . PLUS expression
    (69) uminus_expr -> . MINUS expression
    (70) arithmetic_expr -> . expression PLUS expression
    (71) arithmetic_expr -> . expression MINUS expression
    (72) arithmetic_expr -> . expression MULTIPLY expression
    (73) arithmetic_expr -> . expression DIVIDE expression
    (74) arithmetic_expr -> . expression POW expression
    (75) arithmetic_expr -> . expression MOD expression
    (76) conditional_expr -> . expression AND expression
    (77) conditional_expr -> . expression OR expression
    (78) conditional_expr -> . expression XOR expression
    (79) conditional_expr -> . expression EQUALS expression
    (80) conditional_expr -> . expression NOT_EQUALS expression
    (81) conditional_expr -> . expression GREATER_THAN expression
    (82) conditional_expr -> . expression LESS_THAN expression
    (83) conditional_expr -> . expression GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> . expression LESS_THAN_OR_EQUAL expression

    RSBRACKET       reduce using rule 24 (elements -> .)
    RPAREN          reduce using rule 24 (elements -> .)
    TRUE            shift and go to state 15
    FALSE           shift and go to state 37
    NOT             shift and go to state 44
    NUMBER          shift and go to state 7
    ID              shift and go to state 49
    STRING1         shift and go to state 26
    STRING2         shift and go to state 25
    LSBRACKET       shift and go to state 4
    SELECTOR        shift and go to state 9
    LPAREN          shift and go to state 32
    PLUS            shift and go to state 24
    MINUS           shift and go to state 16

    conditional_expr               shift and go to state 12
    elements                       shift and go to state 110
    number_expr                    shift and go to state 33
    string_expr                    shift and go to state 18
    unary_expr                     shift and go to state 3
    uminus_expr                    shift and go to state 39
    id_expr                        shift and go to state 40
    group_expr                     shift and go to state 27
    element                        shift and go to state 50
    arithmetic_expr                shift and go to state 19
    boolean_expr                   shift and go to state 41
    list_expr                      shift and go to state 1
    not_expr                       shift and go to state 6
    binary_expr                    shift and go to state 10
    parse_text_expr                shift and go to state 14
    uplus_expr                     shift and go to state 45
    expression                     shift and go to state 51

state 81

    (70) arithmetic_expr -> expression PLUS . expression
    (44) expression -> . unary_expr
    (45) expression -> . binary_expr
    (46) unary_expr -> . boolean_expr
    (47) unary_expr -> . not_expr
    (48) unary_expr -> . number_expr
    (49) unary_expr -> . id_expr
    (50) unary_expr -> . string_expr
    (51) unary_expr -> . list_expr
    (52) unary_expr -> . parse_text_expr
    (53) unary_expr -> . group_expr
    (54) unary_expr -> . uplus_expr
    (55) unary_expr -> . uminus_expr
    (56) binary_expr -> . arithmetic_expr
    (57) binary_expr -> . conditional_expr
    (58) boolean_expr -> . TRUE
    (59) boolean_expr -> . FALSE
    (60) not_expr -> . NOT expression
    (61) number_expr -> . NUMBER
    (62) id_expr -> . ID
    (63) string_expr -> . STRING1
    (64) string_expr -> . STRING2
    (65) list_expr -> . LSBRACKET elements RSBRACKET
    (66) parse_text_expr -> . SELECTOR LPAREN elements RPAREN
    (67) group_expr -> . LPAREN expression RPAREN
    (68) uplus_expr -> . PLUS expression
    (69) uminus_expr -> . MINUS expression
    (70) arithmetic_expr -> . expression PLUS expression
    (71) arithmetic_expr -> . expression MINUS expression
    (72) arithmetic_expr -> . expression MULTIPLY expression
    (73) arithmetic_expr -> . expression DIVIDE expression
    (74) arithmetic_expr -> . expression POW expression
    (75) arithmetic_expr -> . expression MOD expression
    (76) conditional_expr -> . expression AND expression
    (77) conditional_expr -> . expression OR expression
    (78) conditional_expr -> . expression XOR expression
    (79) conditional_expr -> . expression EQUALS expression
    (80) conditional_expr -> . expression NOT_EQUALS expression
    (81) conditional_expr -> . expression GREATER_THAN expression
    (82) conditional_expr -> . expression LESS_THAN expression
    (83) conditional_expr -> . expression GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> . expression LESS_THAN_OR_EQUAL expression

    TRUE            shift and go to state 15
    FALSE           shift and go to state 37
    NOT             shift and go to state 44
    NUMBER          shift and go to state 7
    ID              shift and go to state 49
    STRING1         shift and go to state 26
    STRING2         shift and go to state 25
    LSBRACKET       shift and go to state 4
    SELECTOR        shift and go to state 9
    LPAREN          shift and go to state 32
    PLUS            shift and go to state 24
    MINUS           shift and go to state 16

    conditional_expr               shift and go to state 12
    list_expr                      shift and go to state 1
    number_expr                    shift and go to state 33
    string_expr                    shift and go to state 18
    unary_expr                     shift and go to state 3
    uminus_expr                    shift and go to state 39
    id_expr                        shift and go to state 40
    group_expr                     shift and go to state 27
    arithmetic_expr                shift and go to state 19
    boolean_expr                   shift and go to state 41
    not_expr                       shift and go to state 6
    binary_expr                    shift and go to state 10
    parse_text_expr                shift and go to state 14
    uplus_expr                     shift and go to state 45
    expression                     shift and go to state 104

state 82

    (71) arithmetic_expr -> expression MINUS . expression
    (44) expression -> . unary_expr
    (45) expression -> . binary_expr
    (46) unary_expr -> . boolean_expr
    (47) unary_expr -> . not_expr
    (48) unary_expr -> . number_expr
    (49) unary_expr -> . id_expr
    (50) unary_expr -> . string_expr
    (51) unary_expr -> . list_expr
    (52) unary_expr -> . parse_text_expr
    (53) unary_expr -> . group_expr
    (54) unary_expr -> . uplus_expr
    (55) unary_expr -> . uminus_expr
    (56) binary_expr -> . arithmetic_expr
    (57) binary_expr -> . conditional_expr
    (58) boolean_expr -> . TRUE
    (59) boolean_expr -> . FALSE
    (60) not_expr -> . NOT expression
    (61) number_expr -> . NUMBER
    (62) id_expr -> . ID
    (63) string_expr -> . STRING1
    (64) string_expr -> . STRING2
    (65) list_expr -> . LSBRACKET elements RSBRACKET
    (66) parse_text_expr -> . SELECTOR LPAREN elements RPAREN
    (67) group_expr -> . LPAREN expression RPAREN
    (68) uplus_expr -> . PLUS expression
    (69) uminus_expr -> . MINUS expression
    (70) arithmetic_expr -> . expression PLUS expression
    (71) arithmetic_expr -> . expression MINUS expression
    (72) arithmetic_expr -> . expression MULTIPLY expression
    (73) arithmetic_expr -> . expression DIVIDE expression
    (74) arithmetic_expr -> . expression POW expression
    (75) arithmetic_expr -> . expression MOD expression
    (76) conditional_expr -> . expression AND expression
    (77) conditional_expr -> . expression OR expression
    (78) conditional_expr -> . expression XOR expression
    (79) conditional_expr -> . expression EQUALS expression
    (80) conditional_expr -> . expression NOT_EQUALS expression
    (81) conditional_expr -> . expression GREATER_THAN expression
    (82) conditional_expr -> . expression LESS_THAN expression
    (83) conditional_expr -> . expression GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> . expression LESS_THAN_OR_EQUAL expression

    TRUE            shift and go to state 15
    FALSE           shift and go to state 37
    NOT             shift and go to state 44
    NUMBER          shift and go to state 7
    ID              shift and go to state 49
    STRING1         shift and go to state 26
    STRING2         shift and go to state 25
    LSBRACKET       shift and go to state 4
    SELECTOR        shift and go to state 9
    LPAREN          shift and go to state 32
    PLUS            shift and go to state 24
    MINUS           shift and go to state 16

    conditional_expr               shift and go to state 12
    list_expr                      shift and go to state 1
    number_expr                    shift and go to state 33
    string_expr                    shift and go to state 18
    unary_expr                     shift and go to state 3
    uminus_expr                    shift and go to state 39
    id_expr                        shift and go to state 40
    group_expr                     shift and go to state 27
    arithmetic_expr                shift and go to state 19
    boolean_expr                   shift and go to state 41
    not_expr                       shift and go to state 6
    binary_expr                    shift and go to state 10
    parse_text_expr                shift and go to state 14
    uplus_expr                     shift and go to state 45
    expression                     shift and go to state 108

state 83

    (66) parse_text_expr -> SELECTOR LPAREN elements . RPAREN

    RPAREN          shift and go to state 111


state 84

    (40) while_stmt -> WHILE expression DO . statements END
    (2) statements -> . statement statements
    (3) statements -> . statement
    (4) statement -> . simple_stmt
    (5) statement -> . compound_stmt
    (6) simple_stmt -> . expression_stmt
    (7) simple_stmt -> . assign_stmt
    (8) simple_stmt -> . increment_stmt
    (9) simple_stmt -> . decrement_stmt
    (10) simple_stmt -> . list_stmt
    (11) simple_stmt -> . dictionary_stmt
    (12) simple_stmt -> . function_call
    (13) compound_stmt -> . if_stmt
    (14) compound_stmt -> . while_stmt
    (15) compound_stmt -> . for_stmt
    (16) compound_stmt -> . function_decl
    (17) expression_stmt -> . expression
    (18) assign_stmt -> . ID ASSIGN expression SEMICOLON
    (19) increment_stmt -> . expression PLUS PLUS SEMICOLON
    (20) decrement_stmt -> . expression MINUS MINUS SEMICOLON
    (21) list_stmt -> . ID ASSIGN LSBRACKET elements RSBRACKET SEMICOLON
    (26) dictionary_stmt -> . ID ASSIGN LCBRACKET dictionary_objects RCBRACKET SEMICOLON
    (43) function_call -> . ID LPAREN elements RPAREN SEMICOLON
    (34) if_stmt -> . IF expression DO statements elif_blocks END
    (40) while_stmt -> . WHILE expression DO statements END
    (41) for_stmt -> . FOR EACH ID IN element DO statements END
    (42) function_decl -> . FUN ID LPAREN elements RPAREN DO statements END
    (44) expression -> . unary_expr
    (45) expression -> . binary_expr
    (46) unary_expr -> . boolean_expr
    (47) unary_expr -> . not_expr
    (48) unary_expr -> . number_expr
    (49) unary_expr -> . id_expr
    (50) unary_expr -> . string_expr
    (51) unary_expr -> . list_expr
    (52) unary_expr -> . parse_text_expr
    (53) unary_expr -> . group_expr
    (54) unary_expr -> . uplus_expr
    (55) unary_expr -> . uminus_expr
    (56) binary_expr -> . arithmetic_expr
    (57) binary_expr -> . conditional_expr
    (58) boolean_expr -> . TRUE
    (59) boolean_expr -> . FALSE
    (60) not_expr -> . NOT expression
    (61) number_expr -> . NUMBER
    (62) id_expr -> . ID
    (63) string_expr -> . STRING1
    (64) string_expr -> . STRING2
    (65) list_expr -> . LSBRACKET elements RSBRACKET
    (66) parse_text_expr -> . SELECTOR LPAREN elements RPAREN
    (67) group_expr -> . LPAREN expression RPAREN
    (68) uplus_expr -> . PLUS expression
    (69) uminus_expr -> . MINUS expression
    (70) arithmetic_expr -> . expression PLUS expression
    (71) arithmetic_expr -> . expression MINUS expression
    (72) arithmetic_expr -> . expression MULTIPLY expression
    (73) arithmetic_expr -> . expression DIVIDE expression
    (74) arithmetic_expr -> . expression POW expression
    (75) arithmetic_expr -> . expression MOD expression
    (76) conditional_expr -> . expression AND expression
    (77) conditional_expr -> . expression OR expression
    (78) conditional_expr -> . expression XOR expression
    (79) conditional_expr -> . expression EQUALS expression
    (80) conditional_expr -> . expression NOT_EQUALS expression
    (81) conditional_expr -> . expression GREATER_THAN expression
    (82) conditional_expr -> . expression LESS_THAN expression
    (83) conditional_expr -> . expression GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> . expression LESS_THAN_OR_EQUAL expression

    ID              shift and go to state 34
    IF              shift and go to state 35
    WHILE           shift and go to state 11
    FOR             shift and go to state 28
    FUN             shift and go to state 13
    TRUE            shift and go to state 15
    FALSE           shift and go to state 37
    NOT             shift and go to state 44
    NUMBER          shift and go to state 7
    STRING1         shift and go to state 26
    STRING2         shift and go to state 25
    LSBRACKET       shift and go to state 4
    SELECTOR        shift and go to state 9
    LPAREN          shift and go to state 32
    PLUS            shift and go to state 24
    MINUS           shift and go to state 16

    list_expr                      shift and go to state 1
    statements                     shift and go to state 112
    unary_expr                     shift and go to state 3
    dictionary_stmt                shift and go to state 5
    group_expr                     shift and go to state 27
    function_call                  shift and go to state 8
    parse_text_expr                shift and go to state 14
    conditional_expr               shift and go to state 12
    list_stmt                      shift and go to state 17
    number_expr                    shift and go to state 33
    string_expr                    shift and go to state 18
    assign_stmt                    shift and go to state 20
    arithmetic_expr                shift and go to state 19
    expression_stmt                shift and go to state 22
    statement                      shift and go to state 23
    compound_stmt                  shift and go to state 42
    simple_stmt                    shift and go to state 29
    function_decl                  shift and go to state 30
    for_stmt                       shift and go to state 31
    not_expr                       shift and go to state 6
    binary_expr                    shift and go to state 10
    decrement_stmt                 shift and go to state 36
    if_stmt                        shift and go to state 38
    uminus_expr                    shift and go to state 39
    id_expr                        shift and go to state 40
    boolean_expr                   shift and go to state 41
    while_stmt                     shift and go to state 43
    uplus_expr                     shift and go to state 45
    expression                     shift and go to state 46
    increment_stmt                 shift and go to state 47

state 85

    (42) function_decl -> FUN ID LPAREN . elements RPAREN DO statements END
    (22) elements -> . element COMMA elements
    (23) elements -> . element
    (24) elements -> .
    (25) element -> . expression
    (44) expression -> . unary_expr
    (45) expression -> . binary_expr
    (46) unary_expr -> . boolean_expr
    (47) unary_expr -> . not_expr
    (48) unary_expr -> . number_expr
    (49) unary_expr -> . id_expr
    (50) unary_expr -> . string_expr
    (51) unary_expr -> . list_expr
    (52) unary_expr -> . parse_text_expr
    (53) unary_expr -> . group_expr
    (54) unary_expr -> . uplus_expr
    (55) unary_expr -> . uminus_expr
    (56) binary_expr -> . arithmetic_expr
    (57) binary_expr -> . conditional_expr
    (58) boolean_expr -> . TRUE
    (59) boolean_expr -> . FALSE
    (60) not_expr -> . NOT expression
    (61) number_expr -> . NUMBER
    (62) id_expr -> . ID
    (63) string_expr -> . STRING1
    (64) string_expr -> . STRING2
    (65) list_expr -> . LSBRACKET elements RSBRACKET
    (66) parse_text_expr -> . SELECTOR LPAREN elements RPAREN
    (67) group_expr -> . LPAREN expression RPAREN
    (68) uplus_expr -> . PLUS expression
    (69) uminus_expr -> . MINUS expression
    (70) arithmetic_expr -> . expression PLUS expression
    (71) arithmetic_expr -> . expression MINUS expression
    (72) arithmetic_expr -> . expression MULTIPLY expression
    (73) arithmetic_expr -> . expression DIVIDE expression
    (74) arithmetic_expr -> . expression POW expression
    (75) arithmetic_expr -> . expression MOD expression
    (76) conditional_expr -> . expression AND expression
    (77) conditional_expr -> . expression OR expression
    (78) conditional_expr -> . expression XOR expression
    (79) conditional_expr -> . expression EQUALS expression
    (80) conditional_expr -> . expression NOT_EQUALS expression
    (81) conditional_expr -> . expression GREATER_THAN expression
    (82) conditional_expr -> . expression LESS_THAN expression
    (83) conditional_expr -> . expression GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> . expression LESS_THAN_OR_EQUAL expression

    RPAREN          reduce using rule 24 (elements -> .)
    TRUE            shift and go to state 15
    FALSE           shift and go to state 37
    NOT             shift and go to state 44
    NUMBER          shift and go to state 7
    ID              shift and go to state 49
    STRING1         shift and go to state 26
    STRING2         shift and go to state 25
    LSBRACKET       shift and go to state 4
    SELECTOR        shift and go to state 9
    LPAREN          shift and go to state 32
    PLUS            shift and go to state 24
    MINUS           shift and go to state 16

    conditional_expr               shift and go to state 12
    elements                       shift and go to state 113
    string_expr                    shift and go to state 18
    unary_expr                     shift and go to state 3
    uminus_expr                    shift and go to state 39
    id_expr                        shift and go to state 40
    group_expr                     shift and go to state 27
    element                        shift and go to state 50
    arithmetic_expr                shift and go to state 19
    boolean_expr                   shift and go to state 41
    list_expr                      shift and go to state 1
    not_expr                       shift and go to state 6
    binary_expr                    shift and go to state 10
    number_expr                    shift and go to state 33
    parse_text_expr                shift and go to state 14
    uplus_expr                     shift and go to state 45
    expression                     shift and go to state 51

state 86

    (41) for_stmt -> FOR EACH ID . IN element DO statements END

    IN              shift and go to state 114


state 87

    (67) group_expr -> LPAREN expression RPAREN .

    DO              reduce using rule 67 (group_expr -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 67 (group_expr -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 67 (group_expr -> LPAREN expression RPAREN .)
    MULTIPLY        reduce using rule 67 (group_expr -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 67 (group_expr -> LPAREN expression RPAREN .)
    POW             reduce using rule 67 (group_expr -> LPAREN expression RPAREN .)
    MOD             reduce using rule 67 (group_expr -> LPAREN expression RPAREN .)
    AND             reduce using rule 67 (group_expr -> LPAREN expression RPAREN .)
    OR              reduce using rule 67 (group_expr -> LPAREN expression RPAREN .)
    XOR             reduce using rule 67 (group_expr -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 67 (group_expr -> LPAREN expression RPAREN .)
    NOT_EQUALS      reduce using rule 67 (group_expr -> LPAREN expression RPAREN .)
    GREATER_THAN    reduce using rule 67 (group_expr -> LPAREN expression RPAREN .)
    LESS_THAN       reduce using rule 67 (group_expr -> LPAREN expression RPAREN .)
    GREATER_THAN_OR_EQUAL reduce using rule 67 (group_expr -> LPAREN expression RPAREN .)
    LESS_THAN_OR_EQUAL reduce using rule 67 (group_expr -> LPAREN expression RPAREN .)
    ID              reduce using rule 67 (group_expr -> LPAREN expression RPAREN .)
    IF              reduce using rule 67 (group_expr -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 67 (group_expr -> LPAREN expression RPAREN .)
    FOR             reduce using rule 67 (group_expr -> LPAREN expression RPAREN .)
    FUN             reduce using rule 67 (group_expr -> LPAREN expression RPAREN .)
    TRUE            reduce using rule 67 (group_expr -> LPAREN expression RPAREN .)
    FALSE           reduce using rule 67 (group_expr -> LPAREN expression RPAREN .)
    NOT             reduce using rule 67 (group_expr -> LPAREN expression RPAREN .)
    NUMBER          reduce using rule 67 (group_expr -> LPAREN expression RPAREN .)
    STRING1         reduce using rule 67 (group_expr -> LPAREN expression RPAREN .)
    STRING2         reduce using rule 67 (group_expr -> LPAREN expression RPAREN .)
    LSBRACKET       reduce using rule 67 (group_expr -> LPAREN expression RPAREN .)
    SELECTOR        reduce using rule 67 (group_expr -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 67 (group_expr -> LPAREN expression RPAREN .)
    $end            reduce using rule 67 (group_expr -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 67 (group_expr -> LPAREN expression RPAREN .)
    RSBRACKET       reduce using rule 67 (group_expr -> LPAREN expression RPAREN .)
    END             reduce using rule 67 (group_expr -> LPAREN expression RPAREN .)
    ELIF            reduce using rule 67 (group_expr -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 67 (group_expr -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 67 (group_expr -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 67 (group_expr -> LPAREN expression RPAREN .)
    RCBRACKET       reduce using rule 67 (group_expr -> LPAREN expression RPAREN .)


state 88

    (21) list_stmt -> ID ASSIGN LSBRACKET . elements RSBRACKET SEMICOLON
    (65) list_expr -> LSBRACKET . elements RSBRACKET
    (22) elements -> . element COMMA elements
    (23) elements -> . element
    (24) elements -> .
    (25) element -> . expression
    (44) expression -> . unary_expr
    (45) expression -> . binary_expr
    (46) unary_expr -> . boolean_expr
    (47) unary_expr -> . not_expr
    (48) unary_expr -> . number_expr
    (49) unary_expr -> . id_expr
    (50) unary_expr -> . string_expr
    (51) unary_expr -> . list_expr
    (52) unary_expr -> . parse_text_expr
    (53) unary_expr -> . group_expr
    (54) unary_expr -> . uplus_expr
    (55) unary_expr -> . uminus_expr
    (56) binary_expr -> . arithmetic_expr
    (57) binary_expr -> . conditional_expr
    (58) boolean_expr -> . TRUE
    (59) boolean_expr -> . FALSE
    (60) not_expr -> . NOT expression
    (61) number_expr -> . NUMBER
    (62) id_expr -> . ID
    (63) string_expr -> . STRING1
    (64) string_expr -> . STRING2
    (65) list_expr -> . LSBRACKET elements RSBRACKET
    (66) parse_text_expr -> . SELECTOR LPAREN elements RPAREN
    (67) group_expr -> . LPAREN expression RPAREN
    (68) uplus_expr -> . PLUS expression
    (69) uminus_expr -> . MINUS expression
    (70) arithmetic_expr -> . expression PLUS expression
    (71) arithmetic_expr -> . expression MINUS expression
    (72) arithmetic_expr -> . expression MULTIPLY expression
    (73) arithmetic_expr -> . expression DIVIDE expression
    (74) arithmetic_expr -> . expression POW expression
    (75) arithmetic_expr -> . expression MOD expression
    (76) conditional_expr -> . expression AND expression
    (77) conditional_expr -> . expression OR expression
    (78) conditional_expr -> . expression XOR expression
    (79) conditional_expr -> . expression EQUALS expression
    (80) conditional_expr -> . expression NOT_EQUALS expression
    (81) conditional_expr -> . expression GREATER_THAN expression
    (82) conditional_expr -> . expression LESS_THAN expression
    (83) conditional_expr -> . expression GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> . expression LESS_THAN_OR_EQUAL expression

    RSBRACKET       reduce using rule 24 (elements -> .)
    TRUE            shift and go to state 15
    FALSE           shift and go to state 37
    NOT             shift and go to state 44
    NUMBER          shift and go to state 7
    ID              shift and go to state 49
    STRING1         shift and go to state 26
    STRING2         shift and go to state 25
    LSBRACKET       shift and go to state 4
    SELECTOR        shift and go to state 9
    LPAREN          shift and go to state 32
    PLUS            shift and go to state 24
    MINUS           shift and go to state 16

    conditional_expr               shift and go to state 12
    elements                       shift and go to state 115
    number_expr                    shift and go to state 33
    string_expr                    shift and go to state 18
    unary_expr                     shift and go to state 3
    uminus_expr                    shift and go to state 39
    id_expr                        shift and go to state 40
    group_expr                     shift and go to state 27
    element                        shift and go to state 50
    arithmetic_expr                shift and go to state 19
    boolean_expr                   shift and go to state 41
    list_expr                      shift and go to state 1
    not_expr                       shift and go to state 6
    binary_expr                    shift and go to state 10
    parse_text_expr                shift and go to state 14
    uplus_expr                     shift and go to state 45
    expression                     shift and go to state 51

state 89

    (26) dictionary_stmt -> ID ASSIGN LCBRACKET . dictionary_objects RCBRACKET SEMICOLON
    (27) dictionary_objects -> . dictionary_object COMMA dictionary_objects
    (28) dictionary_objects -> . dictionary_object
    (29) dictionary_objects -> .
    (30) dictionary_object -> . key COLON value
    (31) key -> . STRING1
    (32) key -> . STRING2

    RCBRACKET       reduce using rule 29 (dictionary_objects -> .)
    STRING1         shift and go to state 119
    STRING2         shift and go to state 118

    dictionary_object              shift and go to state 117
    key                            shift and go to state 116
    dictionary_objects             shift and go to state 120

state 90

    (18) assign_stmt -> ID ASSIGN expression . SEMICOLON
    (70) arithmetic_expr -> expression . PLUS expression
    (71) arithmetic_expr -> expression . MINUS expression
    (72) arithmetic_expr -> expression . MULTIPLY expression
    (73) arithmetic_expr -> expression . DIVIDE expression
    (74) arithmetic_expr -> expression . POW expression
    (75) arithmetic_expr -> expression . MOD expression
    (76) conditional_expr -> expression . AND expression
    (77) conditional_expr -> expression . OR expression
    (78) conditional_expr -> expression . XOR expression
    (79) conditional_expr -> expression . EQUALS expression
    (80) conditional_expr -> expression . NOT_EQUALS expression
    (81) conditional_expr -> expression . GREATER_THAN expression
    (82) conditional_expr -> expression . LESS_THAN expression
    (83) conditional_expr -> expression . GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> expression . LESS_THAN_OR_EQUAL expression

    SEMICOLON       shift and go to state 121
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 66
    POW             shift and go to state 69
    MOD             shift and go to state 78
    AND             shift and go to state 64
    OR              shift and go to state 72
    XOR             shift and go to state 65
    EQUALS          shift and go to state 71
    NOT_EQUALS      shift and go to state 67
    GREATER_THAN    shift and go to state 73
    LESS_THAN       shift and go to state 76
    GREATER_THAN_OR_EQUAL shift and go to state 68
    LESS_THAN_OR_EQUAL shift and go to state 70


state 91

    (43) function_call -> ID LPAREN elements . RPAREN SEMICOLON

    RPAREN          shift and go to state 122


state 92

    (34) if_stmt -> IF expression DO . statements elif_blocks END
    (2) statements -> . statement statements
    (3) statements -> . statement
    (4) statement -> . simple_stmt
    (5) statement -> . compound_stmt
    (6) simple_stmt -> . expression_stmt
    (7) simple_stmt -> . assign_stmt
    (8) simple_stmt -> . increment_stmt
    (9) simple_stmt -> . decrement_stmt
    (10) simple_stmt -> . list_stmt
    (11) simple_stmt -> . dictionary_stmt
    (12) simple_stmt -> . function_call
    (13) compound_stmt -> . if_stmt
    (14) compound_stmt -> . while_stmt
    (15) compound_stmt -> . for_stmt
    (16) compound_stmt -> . function_decl
    (17) expression_stmt -> . expression
    (18) assign_stmt -> . ID ASSIGN expression SEMICOLON
    (19) increment_stmt -> . expression PLUS PLUS SEMICOLON
    (20) decrement_stmt -> . expression MINUS MINUS SEMICOLON
    (21) list_stmt -> . ID ASSIGN LSBRACKET elements RSBRACKET SEMICOLON
    (26) dictionary_stmt -> . ID ASSIGN LCBRACKET dictionary_objects RCBRACKET SEMICOLON
    (43) function_call -> . ID LPAREN elements RPAREN SEMICOLON
    (34) if_stmt -> . IF expression DO statements elif_blocks END
    (40) while_stmt -> . WHILE expression DO statements END
    (41) for_stmt -> . FOR EACH ID IN element DO statements END
    (42) function_decl -> . FUN ID LPAREN elements RPAREN DO statements END
    (44) expression -> . unary_expr
    (45) expression -> . binary_expr
    (46) unary_expr -> . boolean_expr
    (47) unary_expr -> . not_expr
    (48) unary_expr -> . number_expr
    (49) unary_expr -> . id_expr
    (50) unary_expr -> . string_expr
    (51) unary_expr -> . list_expr
    (52) unary_expr -> . parse_text_expr
    (53) unary_expr -> . group_expr
    (54) unary_expr -> . uplus_expr
    (55) unary_expr -> . uminus_expr
    (56) binary_expr -> . arithmetic_expr
    (57) binary_expr -> . conditional_expr
    (58) boolean_expr -> . TRUE
    (59) boolean_expr -> . FALSE
    (60) not_expr -> . NOT expression
    (61) number_expr -> . NUMBER
    (62) id_expr -> . ID
    (63) string_expr -> . STRING1
    (64) string_expr -> . STRING2
    (65) list_expr -> . LSBRACKET elements RSBRACKET
    (66) parse_text_expr -> . SELECTOR LPAREN elements RPAREN
    (67) group_expr -> . LPAREN expression RPAREN
    (68) uplus_expr -> . PLUS expression
    (69) uminus_expr -> . MINUS expression
    (70) arithmetic_expr -> . expression PLUS expression
    (71) arithmetic_expr -> . expression MINUS expression
    (72) arithmetic_expr -> . expression MULTIPLY expression
    (73) arithmetic_expr -> . expression DIVIDE expression
    (74) arithmetic_expr -> . expression POW expression
    (75) arithmetic_expr -> . expression MOD expression
    (76) conditional_expr -> . expression AND expression
    (77) conditional_expr -> . expression OR expression
    (78) conditional_expr -> . expression XOR expression
    (79) conditional_expr -> . expression EQUALS expression
    (80) conditional_expr -> . expression NOT_EQUALS expression
    (81) conditional_expr -> . expression GREATER_THAN expression
    (82) conditional_expr -> . expression LESS_THAN expression
    (83) conditional_expr -> . expression GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> . expression LESS_THAN_OR_EQUAL expression

    ID              shift and go to state 34
    IF              shift and go to state 35
    WHILE           shift and go to state 11
    FOR             shift and go to state 28
    FUN             shift and go to state 13
    TRUE            shift and go to state 15
    FALSE           shift and go to state 37
    NOT             shift and go to state 44
    NUMBER          shift and go to state 7
    STRING1         shift and go to state 26
    STRING2         shift and go to state 25
    LSBRACKET       shift and go to state 4
    SELECTOR        shift and go to state 9
    LPAREN          shift and go to state 32
    PLUS            shift and go to state 24
    MINUS           shift and go to state 16

    list_expr                      shift and go to state 1
    statements                     shift and go to state 123
    unary_expr                     shift and go to state 3
    dictionary_stmt                shift and go to state 5
    group_expr                     shift and go to state 27
    function_call                  shift and go to state 8
    parse_text_expr                shift and go to state 14
    conditional_expr               shift and go to state 12
    list_stmt                      shift and go to state 17
    number_expr                    shift and go to state 33
    string_expr                    shift and go to state 18
    assign_stmt                    shift and go to state 20
    arithmetic_expr                shift and go to state 19
    expression_stmt                shift and go to state 22
    statement                      shift and go to state 23
    compound_stmt                  shift and go to state 42
    simple_stmt                    shift and go to state 29
    function_decl                  shift and go to state 30
    for_stmt                       shift and go to state 31
    not_expr                       shift and go to state 6
    binary_expr                    shift and go to state 10
    decrement_stmt                 shift and go to state 36
    if_stmt                        shift and go to state 38
    uminus_expr                    shift and go to state 39
    id_expr                        shift and go to state 40
    boolean_expr                   shift and go to state 41
    while_stmt                     shift and go to state 43
    uplus_expr                     shift and go to state 45
    expression                     shift and go to state 46
    increment_stmt                 shift and go to state 47

state 93

    (76) conditional_expr -> expression AND expression .
    (70) arithmetic_expr -> expression . PLUS expression
    (71) arithmetic_expr -> expression . MINUS expression
    (72) arithmetic_expr -> expression . MULTIPLY expression
    (73) arithmetic_expr -> expression . DIVIDE expression
    (74) arithmetic_expr -> expression . POW expression
    (75) arithmetic_expr -> expression . MOD expression
    (76) conditional_expr -> expression . AND expression
    (77) conditional_expr -> expression . OR expression
    (78) conditional_expr -> expression . XOR expression
    (79) conditional_expr -> expression . EQUALS expression
    (80) conditional_expr -> expression . NOT_EQUALS expression
    (81) conditional_expr -> expression . GREATER_THAN expression
    (82) conditional_expr -> expression . LESS_THAN expression
    (83) conditional_expr -> expression . GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> expression . LESS_THAN_OR_EQUAL expression

    PLUS            reduce using rule 76 (conditional_expr -> expression AND expression .)
    MINUS           reduce using rule 76 (conditional_expr -> expression AND expression .)
    AND             reduce using rule 76 (conditional_expr -> expression AND expression .)
    OR              reduce using rule 76 (conditional_expr -> expression AND expression .)
    XOR             reduce using rule 76 (conditional_expr -> expression AND expression .)
    EQUALS          reduce using rule 76 (conditional_expr -> expression AND expression .)
    NOT_EQUALS      reduce using rule 76 (conditional_expr -> expression AND expression .)
    GREATER_THAN    reduce using rule 76 (conditional_expr -> expression AND expression .)
    LESS_THAN       reduce using rule 76 (conditional_expr -> expression AND expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 76 (conditional_expr -> expression AND expression .)
    LESS_THAN_OR_EQUAL reduce using rule 76 (conditional_expr -> expression AND expression .)
    ID              reduce using rule 76 (conditional_expr -> expression AND expression .)
    IF              reduce using rule 76 (conditional_expr -> expression AND expression .)
    WHILE           reduce using rule 76 (conditional_expr -> expression AND expression .)
    FOR             reduce using rule 76 (conditional_expr -> expression AND expression .)
    FUN             reduce using rule 76 (conditional_expr -> expression AND expression .)
    TRUE            reduce using rule 76 (conditional_expr -> expression AND expression .)
    FALSE           reduce using rule 76 (conditional_expr -> expression AND expression .)
    NOT             reduce using rule 76 (conditional_expr -> expression AND expression .)
    NUMBER          reduce using rule 76 (conditional_expr -> expression AND expression .)
    STRING1         reduce using rule 76 (conditional_expr -> expression AND expression .)
    STRING2         reduce using rule 76 (conditional_expr -> expression AND expression .)
    LSBRACKET       reduce using rule 76 (conditional_expr -> expression AND expression .)
    SELECTOR        reduce using rule 76 (conditional_expr -> expression AND expression .)
    LPAREN          reduce using rule 76 (conditional_expr -> expression AND expression .)
    END             reduce using rule 76 (conditional_expr -> expression AND expression .)
    COMMA           reduce using rule 76 (conditional_expr -> expression AND expression .)
    RCBRACKET       reduce using rule 76 (conditional_expr -> expression AND expression .)
    $end            reduce using rule 76 (conditional_expr -> expression AND expression .)
    RSBRACKET       reduce using rule 76 (conditional_expr -> expression AND expression .)
    DO              reduce using rule 76 (conditional_expr -> expression AND expression .)
    ELIF            reduce using rule 76 (conditional_expr -> expression AND expression .)
    ELSE            reduce using rule 76 (conditional_expr -> expression AND expression .)
    RPAREN          reduce using rule 76 (conditional_expr -> expression AND expression .)
    SEMICOLON       reduce using rule 76 (conditional_expr -> expression AND expression .)
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 66
    POW             shift and go to state 69
    MOD             shift and go to state 78

  ! MULTIPLY        [ reduce using rule 76 (conditional_expr -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 76 (conditional_expr -> expression AND expression .) ]
  ! POW             [ reduce using rule 76 (conditional_expr -> expression AND expression .) ]
  ! MOD             [ reduce using rule 76 (conditional_expr -> expression AND expression .) ]
  ! PLUS            [ shift and go to state 81 ]
  ! MINUS           [ shift and go to state 82 ]
  ! AND             [ shift and go to state 64 ]
  ! OR              [ shift and go to state 72 ]
  ! XOR             [ shift and go to state 65 ]
  ! EQUALS          [ shift and go to state 71 ]
  ! NOT_EQUALS      [ shift and go to state 67 ]
  ! GREATER_THAN    [ shift and go to state 73 ]
  ! LESS_THAN       [ shift and go to state 76 ]
  ! GREATER_THAN_OR_EQUAL [ shift and go to state 68 ]
  ! LESS_THAN_OR_EQUAL [ shift and go to state 70 ]


state 94

    (78) conditional_expr -> expression XOR expression .
    (70) arithmetic_expr -> expression . PLUS expression
    (71) arithmetic_expr -> expression . MINUS expression
    (72) arithmetic_expr -> expression . MULTIPLY expression
    (73) arithmetic_expr -> expression . DIVIDE expression
    (74) arithmetic_expr -> expression . POW expression
    (75) arithmetic_expr -> expression . MOD expression
    (76) conditional_expr -> expression . AND expression
    (77) conditional_expr -> expression . OR expression
    (78) conditional_expr -> expression . XOR expression
    (79) conditional_expr -> expression . EQUALS expression
    (80) conditional_expr -> expression . NOT_EQUALS expression
    (81) conditional_expr -> expression . GREATER_THAN expression
    (82) conditional_expr -> expression . LESS_THAN expression
    (83) conditional_expr -> expression . GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> expression . LESS_THAN_OR_EQUAL expression

    PLUS            reduce using rule 78 (conditional_expr -> expression XOR expression .)
    MINUS           reduce using rule 78 (conditional_expr -> expression XOR expression .)
    AND             reduce using rule 78 (conditional_expr -> expression XOR expression .)
    OR              reduce using rule 78 (conditional_expr -> expression XOR expression .)
    XOR             reduce using rule 78 (conditional_expr -> expression XOR expression .)
    EQUALS          reduce using rule 78 (conditional_expr -> expression XOR expression .)
    NOT_EQUALS      reduce using rule 78 (conditional_expr -> expression XOR expression .)
    GREATER_THAN    reduce using rule 78 (conditional_expr -> expression XOR expression .)
    LESS_THAN       reduce using rule 78 (conditional_expr -> expression XOR expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 78 (conditional_expr -> expression XOR expression .)
    LESS_THAN_OR_EQUAL reduce using rule 78 (conditional_expr -> expression XOR expression .)
    ID              reduce using rule 78 (conditional_expr -> expression XOR expression .)
    IF              reduce using rule 78 (conditional_expr -> expression XOR expression .)
    WHILE           reduce using rule 78 (conditional_expr -> expression XOR expression .)
    FOR             reduce using rule 78 (conditional_expr -> expression XOR expression .)
    FUN             reduce using rule 78 (conditional_expr -> expression XOR expression .)
    TRUE            reduce using rule 78 (conditional_expr -> expression XOR expression .)
    FALSE           reduce using rule 78 (conditional_expr -> expression XOR expression .)
    NOT             reduce using rule 78 (conditional_expr -> expression XOR expression .)
    NUMBER          reduce using rule 78 (conditional_expr -> expression XOR expression .)
    STRING1         reduce using rule 78 (conditional_expr -> expression XOR expression .)
    STRING2         reduce using rule 78 (conditional_expr -> expression XOR expression .)
    LSBRACKET       reduce using rule 78 (conditional_expr -> expression XOR expression .)
    SELECTOR        reduce using rule 78 (conditional_expr -> expression XOR expression .)
    LPAREN          reduce using rule 78 (conditional_expr -> expression XOR expression .)
    END             reduce using rule 78 (conditional_expr -> expression XOR expression .)
    COMMA           reduce using rule 78 (conditional_expr -> expression XOR expression .)
    RCBRACKET       reduce using rule 78 (conditional_expr -> expression XOR expression .)
    $end            reduce using rule 78 (conditional_expr -> expression XOR expression .)
    RSBRACKET       reduce using rule 78 (conditional_expr -> expression XOR expression .)
    DO              reduce using rule 78 (conditional_expr -> expression XOR expression .)
    ELIF            reduce using rule 78 (conditional_expr -> expression XOR expression .)
    ELSE            reduce using rule 78 (conditional_expr -> expression XOR expression .)
    RPAREN          reduce using rule 78 (conditional_expr -> expression XOR expression .)
    SEMICOLON       reduce using rule 78 (conditional_expr -> expression XOR expression .)
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 66
    POW             shift and go to state 69
    MOD             shift and go to state 78

  ! MULTIPLY        [ reduce using rule 78 (conditional_expr -> expression XOR expression .) ]
  ! DIVIDE          [ reduce using rule 78 (conditional_expr -> expression XOR expression .) ]
  ! POW             [ reduce using rule 78 (conditional_expr -> expression XOR expression .) ]
  ! MOD             [ reduce using rule 78 (conditional_expr -> expression XOR expression .) ]
  ! PLUS            [ shift and go to state 81 ]
  ! MINUS           [ shift and go to state 82 ]
  ! AND             [ shift and go to state 64 ]
  ! OR              [ shift and go to state 72 ]
  ! XOR             [ shift and go to state 65 ]
  ! EQUALS          [ shift and go to state 71 ]
  ! NOT_EQUALS      [ shift and go to state 67 ]
  ! GREATER_THAN    [ shift and go to state 73 ]
  ! LESS_THAN       [ shift and go to state 76 ]
  ! GREATER_THAN_OR_EQUAL [ shift and go to state 68 ]
  ! LESS_THAN_OR_EQUAL [ shift and go to state 70 ]


state 95

    (73) arithmetic_expr -> expression DIVIDE expression .
    (70) arithmetic_expr -> expression . PLUS expression
    (71) arithmetic_expr -> expression . MINUS expression
    (72) arithmetic_expr -> expression . MULTIPLY expression
    (73) arithmetic_expr -> expression . DIVIDE expression
    (74) arithmetic_expr -> expression . POW expression
    (75) arithmetic_expr -> expression . MOD expression
    (76) conditional_expr -> expression . AND expression
    (77) conditional_expr -> expression . OR expression
    (78) conditional_expr -> expression . XOR expression
    (79) conditional_expr -> expression . EQUALS expression
    (80) conditional_expr -> expression . NOT_EQUALS expression
    (81) conditional_expr -> expression . GREATER_THAN expression
    (82) conditional_expr -> expression . LESS_THAN expression
    (83) conditional_expr -> expression . GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> expression . LESS_THAN_OR_EQUAL expression

    PLUS            reduce using rule 73 (arithmetic_expr -> expression DIVIDE expression .)
    MINUS           reduce using rule 73 (arithmetic_expr -> expression DIVIDE expression .)
    MULTIPLY        reduce using rule 73 (arithmetic_expr -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 73 (arithmetic_expr -> expression DIVIDE expression .)
    MOD             reduce using rule 73 (arithmetic_expr -> expression DIVIDE expression .)
    AND             reduce using rule 73 (arithmetic_expr -> expression DIVIDE expression .)
    OR              reduce using rule 73 (arithmetic_expr -> expression DIVIDE expression .)
    XOR             reduce using rule 73 (arithmetic_expr -> expression DIVIDE expression .)
    EQUALS          reduce using rule 73 (arithmetic_expr -> expression DIVIDE expression .)
    NOT_EQUALS      reduce using rule 73 (arithmetic_expr -> expression DIVIDE expression .)
    GREATER_THAN    reduce using rule 73 (arithmetic_expr -> expression DIVIDE expression .)
    LESS_THAN       reduce using rule 73 (arithmetic_expr -> expression DIVIDE expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 73 (arithmetic_expr -> expression DIVIDE expression .)
    LESS_THAN_OR_EQUAL reduce using rule 73 (arithmetic_expr -> expression DIVIDE expression .)
    ID              reduce using rule 73 (arithmetic_expr -> expression DIVIDE expression .)
    IF              reduce using rule 73 (arithmetic_expr -> expression DIVIDE expression .)
    WHILE           reduce using rule 73 (arithmetic_expr -> expression DIVIDE expression .)
    FOR             reduce using rule 73 (arithmetic_expr -> expression DIVIDE expression .)
    FUN             reduce using rule 73 (arithmetic_expr -> expression DIVIDE expression .)
    TRUE            reduce using rule 73 (arithmetic_expr -> expression DIVIDE expression .)
    FALSE           reduce using rule 73 (arithmetic_expr -> expression DIVIDE expression .)
    NOT             reduce using rule 73 (arithmetic_expr -> expression DIVIDE expression .)
    NUMBER          reduce using rule 73 (arithmetic_expr -> expression DIVIDE expression .)
    STRING1         reduce using rule 73 (arithmetic_expr -> expression DIVIDE expression .)
    STRING2         reduce using rule 73 (arithmetic_expr -> expression DIVIDE expression .)
    LSBRACKET       reduce using rule 73 (arithmetic_expr -> expression DIVIDE expression .)
    SELECTOR        reduce using rule 73 (arithmetic_expr -> expression DIVIDE expression .)
    LPAREN          reduce using rule 73 (arithmetic_expr -> expression DIVIDE expression .)
    $end            reduce using rule 73 (arithmetic_expr -> expression DIVIDE expression .)
    COMMA           reduce using rule 73 (arithmetic_expr -> expression DIVIDE expression .)
    RSBRACKET       reduce using rule 73 (arithmetic_expr -> expression DIVIDE expression .)
    DO              reduce using rule 73 (arithmetic_expr -> expression DIVIDE expression .)
    END             reduce using rule 73 (arithmetic_expr -> expression DIVIDE expression .)
    ELIF            reduce using rule 73 (arithmetic_expr -> expression DIVIDE expression .)
    ELSE            reduce using rule 73 (arithmetic_expr -> expression DIVIDE expression .)
    RPAREN          reduce using rule 73 (arithmetic_expr -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 73 (arithmetic_expr -> expression DIVIDE expression .)
    RCBRACKET       reduce using rule 73 (arithmetic_expr -> expression DIVIDE expression .)
    POW             shift and go to state 69

  ! POW             [ reduce using rule 73 (arithmetic_expr -> expression DIVIDE expression .) ]
  ! PLUS            [ shift and go to state 81 ]
  ! MINUS           [ shift and go to state 82 ]
  ! MULTIPLY        [ shift and go to state 75 ]
  ! DIVIDE          [ shift and go to state 66 ]
  ! MOD             [ shift and go to state 78 ]
  ! AND             [ shift and go to state 64 ]
  ! OR              [ shift and go to state 72 ]
  ! XOR             [ shift and go to state 65 ]
  ! EQUALS          [ shift and go to state 71 ]
  ! NOT_EQUALS      [ shift and go to state 67 ]
  ! GREATER_THAN    [ shift and go to state 73 ]
  ! LESS_THAN       [ shift and go to state 76 ]
  ! GREATER_THAN_OR_EQUAL [ shift and go to state 68 ]
  ! LESS_THAN_OR_EQUAL [ shift and go to state 70 ]


state 96

    (80) conditional_expr -> expression NOT_EQUALS expression .
    (70) arithmetic_expr -> expression . PLUS expression
    (71) arithmetic_expr -> expression . MINUS expression
    (72) arithmetic_expr -> expression . MULTIPLY expression
    (73) arithmetic_expr -> expression . DIVIDE expression
    (74) arithmetic_expr -> expression . POW expression
    (75) arithmetic_expr -> expression . MOD expression
    (76) conditional_expr -> expression . AND expression
    (77) conditional_expr -> expression . OR expression
    (78) conditional_expr -> expression . XOR expression
    (79) conditional_expr -> expression . EQUALS expression
    (80) conditional_expr -> expression . NOT_EQUALS expression
    (81) conditional_expr -> expression . GREATER_THAN expression
    (82) conditional_expr -> expression . LESS_THAN expression
    (83) conditional_expr -> expression . GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> expression . LESS_THAN_OR_EQUAL expression

    EQUALS          reduce using rule 80 (conditional_expr -> expression NOT_EQUALS expression .)
    NOT_EQUALS      reduce using rule 80 (conditional_expr -> expression NOT_EQUALS expression .)
    GREATER_THAN    reduce using rule 80 (conditional_expr -> expression NOT_EQUALS expression .)
    LESS_THAN       reduce using rule 80 (conditional_expr -> expression NOT_EQUALS expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 80 (conditional_expr -> expression NOT_EQUALS expression .)
    LESS_THAN_OR_EQUAL reduce using rule 80 (conditional_expr -> expression NOT_EQUALS expression .)
    ID              reduce using rule 80 (conditional_expr -> expression NOT_EQUALS expression .)
    IF              reduce using rule 80 (conditional_expr -> expression NOT_EQUALS expression .)
    WHILE           reduce using rule 80 (conditional_expr -> expression NOT_EQUALS expression .)
    FOR             reduce using rule 80 (conditional_expr -> expression NOT_EQUALS expression .)
    FUN             reduce using rule 80 (conditional_expr -> expression NOT_EQUALS expression .)
    TRUE            reduce using rule 80 (conditional_expr -> expression NOT_EQUALS expression .)
    FALSE           reduce using rule 80 (conditional_expr -> expression NOT_EQUALS expression .)
    NOT             reduce using rule 80 (conditional_expr -> expression NOT_EQUALS expression .)
    NUMBER          reduce using rule 80 (conditional_expr -> expression NOT_EQUALS expression .)
    STRING1         reduce using rule 80 (conditional_expr -> expression NOT_EQUALS expression .)
    STRING2         reduce using rule 80 (conditional_expr -> expression NOT_EQUALS expression .)
    LSBRACKET       reduce using rule 80 (conditional_expr -> expression NOT_EQUALS expression .)
    SELECTOR        reduce using rule 80 (conditional_expr -> expression NOT_EQUALS expression .)
    LPAREN          reduce using rule 80 (conditional_expr -> expression NOT_EQUALS expression .)
    END             reduce using rule 80 (conditional_expr -> expression NOT_EQUALS expression .)
    COMMA           reduce using rule 80 (conditional_expr -> expression NOT_EQUALS expression .)
    RCBRACKET       reduce using rule 80 (conditional_expr -> expression NOT_EQUALS expression .)
    $end            reduce using rule 80 (conditional_expr -> expression NOT_EQUALS expression .)
    RSBRACKET       reduce using rule 80 (conditional_expr -> expression NOT_EQUALS expression .)
    DO              reduce using rule 80 (conditional_expr -> expression NOT_EQUALS expression .)
    ELIF            reduce using rule 80 (conditional_expr -> expression NOT_EQUALS expression .)
    ELSE            reduce using rule 80 (conditional_expr -> expression NOT_EQUALS expression .)
    RPAREN          reduce using rule 80 (conditional_expr -> expression NOT_EQUALS expression .)
    SEMICOLON       reduce using rule 80 (conditional_expr -> expression NOT_EQUALS expression .)
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 66
    POW             shift and go to state 69
    MOD             shift and go to state 78
    AND             shift and go to state 64
    OR              shift and go to state 72
    XOR             shift and go to state 65

  ! PLUS            [ reduce using rule 80 (conditional_expr -> expression NOT_EQUALS expression .) ]
  ! MINUS           [ reduce using rule 80 (conditional_expr -> expression NOT_EQUALS expression .) ]
  ! MULTIPLY        [ reduce using rule 80 (conditional_expr -> expression NOT_EQUALS expression .) ]
  ! DIVIDE          [ reduce using rule 80 (conditional_expr -> expression NOT_EQUALS expression .) ]
  ! POW             [ reduce using rule 80 (conditional_expr -> expression NOT_EQUALS expression .) ]
  ! MOD             [ reduce using rule 80 (conditional_expr -> expression NOT_EQUALS expression .) ]
  ! AND             [ reduce using rule 80 (conditional_expr -> expression NOT_EQUALS expression .) ]
  ! OR              [ reduce using rule 80 (conditional_expr -> expression NOT_EQUALS expression .) ]
  ! XOR             [ reduce using rule 80 (conditional_expr -> expression NOT_EQUALS expression .) ]
  ! EQUALS          [ shift and go to state 71 ]
  ! NOT_EQUALS      [ shift and go to state 67 ]
  ! GREATER_THAN    [ shift and go to state 73 ]
  ! LESS_THAN       [ shift and go to state 76 ]
  ! GREATER_THAN_OR_EQUAL [ shift and go to state 68 ]
  ! LESS_THAN_OR_EQUAL [ shift and go to state 70 ]


state 97

    (83) conditional_expr -> expression GREATER_THAN_OR_EQUAL expression .
    (70) arithmetic_expr -> expression . PLUS expression
    (71) arithmetic_expr -> expression . MINUS expression
    (72) arithmetic_expr -> expression . MULTIPLY expression
    (73) arithmetic_expr -> expression . DIVIDE expression
    (74) arithmetic_expr -> expression . POW expression
    (75) arithmetic_expr -> expression . MOD expression
    (76) conditional_expr -> expression . AND expression
    (77) conditional_expr -> expression . OR expression
    (78) conditional_expr -> expression . XOR expression
    (79) conditional_expr -> expression . EQUALS expression
    (80) conditional_expr -> expression . NOT_EQUALS expression
    (81) conditional_expr -> expression . GREATER_THAN expression
    (82) conditional_expr -> expression . LESS_THAN expression
    (83) conditional_expr -> expression . GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> expression . LESS_THAN_OR_EQUAL expression

    EQUALS          reduce using rule 83 (conditional_expr -> expression GREATER_THAN_OR_EQUAL expression .)
    NOT_EQUALS      reduce using rule 83 (conditional_expr -> expression GREATER_THAN_OR_EQUAL expression .)
    GREATER_THAN    reduce using rule 83 (conditional_expr -> expression GREATER_THAN_OR_EQUAL expression .)
    LESS_THAN       reduce using rule 83 (conditional_expr -> expression GREATER_THAN_OR_EQUAL expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 83 (conditional_expr -> expression GREATER_THAN_OR_EQUAL expression .)
    LESS_THAN_OR_EQUAL reduce using rule 83 (conditional_expr -> expression GREATER_THAN_OR_EQUAL expression .)
    ID              reduce using rule 83 (conditional_expr -> expression GREATER_THAN_OR_EQUAL expression .)
    IF              reduce using rule 83 (conditional_expr -> expression GREATER_THAN_OR_EQUAL expression .)
    WHILE           reduce using rule 83 (conditional_expr -> expression GREATER_THAN_OR_EQUAL expression .)
    FOR             reduce using rule 83 (conditional_expr -> expression GREATER_THAN_OR_EQUAL expression .)
    FUN             reduce using rule 83 (conditional_expr -> expression GREATER_THAN_OR_EQUAL expression .)
    TRUE            reduce using rule 83 (conditional_expr -> expression GREATER_THAN_OR_EQUAL expression .)
    FALSE           reduce using rule 83 (conditional_expr -> expression GREATER_THAN_OR_EQUAL expression .)
    NOT             reduce using rule 83 (conditional_expr -> expression GREATER_THAN_OR_EQUAL expression .)
    NUMBER          reduce using rule 83 (conditional_expr -> expression GREATER_THAN_OR_EQUAL expression .)
    STRING1         reduce using rule 83 (conditional_expr -> expression GREATER_THAN_OR_EQUAL expression .)
    STRING2         reduce using rule 83 (conditional_expr -> expression GREATER_THAN_OR_EQUAL expression .)
    LSBRACKET       reduce using rule 83 (conditional_expr -> expression GREATER_THAN_OR_EQUAL expression .)
    SELECTOR        reduce using rule 83 (conditional_expr -> expression GREATER_THAN_OR_EQUAL expression .)
    LPAREN          reduce using rule 83 (conditional_expr -> expression GREATER_THAN_OR_EQUAL expression .)
    END             reduce using rule 83 (conditional_expr -> expression GREATER_THAN_OR_EQUAL expression .)
    COMMA           reduce using rule 83 (conditional_expr -> expression GREATER_THAN_OR_EQUAL expression .)
    RCBRACKET       reduce using rule 83 (conditional_expr -> expression GREATER_THAN_OR_EQUAL expression .)
    $end            reduce using rule 83 (conditional_expr -> expression GREATER_THAN_OR_EQUAL expression .)
    RSBRACKET       reduce using rule 83 (conditional_expr -> expression GREATER_THAN_OR_EQUAL expression .)
    DO              reduce using rule 83 (conditional_expr -> expression GREATER_THAN_OR_EQUAL expression .)
    ELIF            reduce using rule 83 (conditional_expr -> expression GREATER_THAN_OR_EQUAL expression .)
    ELSE            reduce using rule 83 (conditional_expr -> expression GREATER_THAN_OR_EQUAL expression .)
    RPAREN          reduce using rule 83 (conditional_expr -> expression GREATER_THAN_OR_EQUAL expression .)
    SEMICOLON       reduce using rule 83 (conditional_expr -> expression GREATER_THAN_OR_EQUAL expression .)
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 66
    POW             shift and go to state 69
    MOD             shift and go to state 78
    AND             shift and go to state 64
    OR              shift and go to state 72
    XOR             shift and go to state 65

  ! PLUS            [ reduce using rule 83 (conditional_expr -> expression GREATER_THAN_OR_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 83 (conditional_expr -> expression GREATER_THAN_OR_EQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 83 (conditional_expr -> expression GREATER_THAN_OR_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 83 (conditional_expr -> expression GREATER_THAN_OR_EQUAL expression .) ]
  ! POW             [ reduce using rule 83 (conditional_expr -> expression GREATER_THAN_OR_EQUAL expression .) ]
  ! MOD             [ reduce using rule 83 (conditional_expr -> expression GREATER_THAN_OR_EQUAL expression .) ]
  ! AND             [ reduce using rule 83 (conditional_expr -> expression GREATER_THAN_OR_EQUAL expression .) ]
  ! OR              [ reduce using rule 83 (conditional_expr -> expression GREATER_THAN_OR_EQUAL expression .) ]
  ! XOR             [ reduce using rule 83 (conditional_expr -> expression GREATER_THAN_OR_EQUAL expression .) ]
  ! EQUALS          [ shift and go to state 71 ]
  ! NOT_EQUALS      [ shift and go to state 67 ]
  ! GREATER_THAN    [ shift and go to state 73 ]
  ! LESS_THAN       [ shift and go to state 76 ]
  ! GREATER_THAN_OR_EQUAL [ shift and go to state 68 ]
  ! LESS_THAN_OR_EQUAL [ shift and go to state 70 ]


state 98

    (74) arithmetic_expr -> expression POW expression .
    (70) arithmetic_expr -> expression . PLUS expression
    (71) arithmetic_expr -> expression . MINUS expression
    (72) arithmetic_expr -> expression . MULTIPLY expression
    (73) arithmetic_expr -> expression . DIVIDE expression
    (74) arithmetic_expr -> expression . POW expression
    (75) arithmetic_expr -> expression . MOD expression
    (76) conditional_expr -> expression . AND expression
    (77) conditional_expr -> expression . OR expression
    (78) conditional_expr -> expression . XOR expression
    (79) conditional_expr -> expression . EQUALS expression
    (80) conditional_expr -> expression . NOT_EQUALS expression
    (81) conditional_expr -> expression . GREATER_THAN expression
    (82) conditional_expr -> expression . LESS_THAN expression
    (83) conditional_expr -> expression . GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> expression . LESS_THAN_OR_EQUAL expression

    PLUS            reduce using rule 74 (arithmetic_expr -> expression POW expression .)
    MINUS           reduce using rule 74 (arithmetic_expr -> expression POW expression .)
    MULTIPLY        reduce using rule 74 (arithmetic_expr -> expression POW expression .)
    DIVIDE          reduce using rule 74 (arithmetic_expr -> expression POW expression .)
    MOD             reduce using rule 74 (arithmetic_expr -> expression POW expression .)
    AND             reduce using rule 74 (arithmetic_expr -> expression POW expression .)
    OR              reduce using rule 74 (arithmetic_expr -> expression POW expression .)
    XOR             reduce using rule 74 (arithmetic_expr -> expression POW expression .)
    EQUALS          reduce using rule 74 (arithmetic_expr -> expression POW expression .)
    NOT_EQUALS      reduce using rule 74 (arithmetic_expr -> expression POW expression .)
    GREATER_THAN    reduce using rule 74 (arithmetic_expr -> expression POW expression .)
    LESS_THAN       reduce using rule 74 (arithmetic_expr -> expression POW expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 74 (arithmetic_expr -> expression POW expression .)
    LESS_THAN_OR_EQUAL reduce using rule 74 (arithmetic_expr -> expression POW expression .)
    ID              reduce using rule 74 (arithmetic_expr -> expression POW expression .)
    IF              reduce using rule 74 (arithmetic_expr -> expression POW expression .)
    WHILE           reduce using rule 74 (arithmetic_expr -> expression POW expression .)
    FOR             reduce using rule 74 (arithmetic_expr -> expression POW expression .)
    FUN             reduce using rule 74 (arithmetic_expr -> expression POW expression .)
    TRUE            reduce using rule 74 (arithmetic_expr -> expression POW expression .)
    FALSE           reduce using rule 74 (arithmetic_expr -> expression POW expression .)
    NOT             reduce using rule 74 (arithmetic_expr -> expression POW expression .)
    NUMBER          reduce using rule 74 (arithmetic_expr -> expression POW expression .)
    STRING1         reduce using rule 74 (arithmetic_expr -> expression POW expression .)
    STRING2         reduce using rule 74 (arithmetic_expr -> expression POW expression .)
    LSBRACKET       reduce using rule 74 (arithmetic_expr -> expression POW expression .)
    SELECTOR        reduce using rule 74 (arithmetic_expr -> expression POW expression .)
    LPAREN          reduce using rule 74 (arithmetic_expr -> expression POW expression .)
    $end            reduce using rule 74 (arithmetic_expr -> expression POW expression .)
    COMMA           reduce using rule 74 (arithmetic_expr -> expression POW expression .)
    RSBRACKET       reduce using rule 74 (arithmetic_expr -> expression POW expression .)
    DO              reduce using rule 74 (arithmetic_expr -> expression POW expression .)
    END             reduce using rule 74 (arithmetic_expr -> expression POW expression .)
    ELIF            reduce using rule 74 (arithmetic_expr -> expression POW expression .)
    ELSE            reduce using rule 74 (arithmetic_expr -> expression POW expression .)
    RPAREN          reduce using rule 74 (arithmetic_expr -> expression POW expression .)
    SEMICOLON       reduce using rule 74 (arithmetic_expr -> expression POW expression .)
    RCBRACKET       reduce using rule 74 (arithmetic_expr -> expression POW expression .)
    POW             shift and go to state 69

  ! POW             [ reduce using rule 74 (arithmetic_expr -> expression POW expression .) ]
  ! PLUS            [ shift and go to state 81 ]
  ! MINUS           [ shift and go to state 82 ]
  ! MULTIPLY        [ shift and go to state 75 ]
  ! DIVIDE          [ shift and go to state 66 ]
  ! MOD             [ shift and go to state 78 ]
  ! AND             [ shift and go to state 64 ]
  ! OR              [ shift and go to state 72 ]
  ! XOR             [ shift and go to state 65 ]
  ! EQUALS          [ shift and go to state 71 ]
  ! NOT_EQUALS      [ shift and go to state 67 ]
  ! GREATER_THAN    [ shift and go to state 73 ]
  ! LESS_THAN       [ shift and go to state 76 ]
  ! GREATER_THAN_OR_EQUAL [ shift and go to state 68 ]
  ! LESS_THAN_OR_EQUAL [ shift and go to state 70 ]


state 99

    (84) conditional_expr -> expression LESS_THAN_OR_EQUAL expression .
    (70) arithmetic_expr -> expression . PLUS expression
    (71) arithmetic_expr -> expression . MINUS expression
    (72) arithmetic_expr -> expression . MULTIPLY expression
    (73) arithmetic_expr -> expression . DIVIDE expression
    (74) arithmetic_expr -> expression . POW expression
    (75) arithmetic_expr -> expression . MOD expression
    (76) conditional_expr -> expression . AND expression
    (77) conditional_expr -> expression . OR expression
    (78) conditional_expr -> expression . XOR expression
    (79) conditional_expr -> expression . EQUALS expression
    (80) conditional_expr -> expression . NOT_EQUALS expression
    (81) conditional_expr -> expression . GREATER_THAN expression
    (82) conditional_expr -> expression . LESS_THAN expression
    (83) conditional_expr -> expression . GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> expression . LESS_THAN_OR_EQUAL expression

    EQUALS          reduce using rule 84 (conditional_expr -> expression LESS_THAN_OR_EQUAL expression .)
    NOT_EQUALS      reduce using rule 84 (conditional_expr -> expression LESS_THAN_OR_EQUAL expression .)
    GREATER_THAN    reduce using rule 84 (conditional_expr -> expression LESS_THAN_OR_EQUAL expression .)
    LESS_THAN       reduce using rule 84 (conditional_expr -> expression LESS_THAN_OR_EQUAL expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 84 (conditional_expr -> expression LESS_THAN_OR_EQUAL expression .)
    LESS_THAN_OR_EQUAL reduce using rule 84 (conditional_expr -> expression LESS_THAN_OR_EQUAL expression .)
    ID              reduce using rule 84 (conditional_expr -> expression LESS_THAN_OR_EQUAL expression .)
    IF              reduce using rule 84 (conditional_expr -> expression LESS_THAN_OR_EQUAL expression .)
    WHILE           reduce using rule 84 (conditional_expr -> expression LESS_THAN_OR_EQUAL expression .)
    FOR             reduce using rule 84 (conditional_expr -> expression LESS_THAN_OR_EQUAL expression .)
    FUN             reduce using rule 84 (conditional_expr -> expression LESS_THAN_OR_EQUAL expression .)
    TRUE            reduce using rule 84 (conditional_expr -> expression LESS_THAN_OR_EQUAL expression .)
    FALSE           reduce using rule 84 (conditional_expr -> expression LESS_THAN_OR_EQUAL expression .)
    NOT             reduce using rule 84 (conditional_expr -> expression LESS_THAN_OR_EQUAL expression .)
    NUMBER          reduce using rule 84 (conditional_expr -> expression LESS_THAN_OR_EQUAL expression .)
    STRING1         reduce using rule 84 (conditional_expr -> expression LESS_THAN_OR_EQUAL expression .)
    STRING2         reduce using rule 84 (conditional_expr -> expression LESS_THAN_OR_EQUAL expression .)
    LSBRACKET       reduce using rule 84 (conditional_expr -> expression LESS_THAN_OR_EQUAL expression .)
    SELECTOR        reduce using rule 84 (conditional_expr -> expression LESS_THAN_OR_EQUAL expression .)
    LPAREN          reduce using rule 84 (conditional_expr -> expression LESS_THAN_OR_EQUAL expression .)
    END             reduce using rule 84 (conditional_expr -> expression LESS_THAN_OR_EQUAL expression .)
    COMMA           reduce using rule 84 (conditional_expr -> expression LESS_THAN_OR_EQUAL expression .)
    RCBRACKET       reduce using rule 84 (conditional_expr -> expression LESS_THAN_OR_EQUAL expression .)
    $end            reduce using rule 84 (conditional_expr -> expression LESS_THAN_OR_EQUAL expression .)
    RSBRACKET       reduce using rule 84 (conditional_expr -> expression LESS_THAN_OR_EQUAL expression .)
    DO              reduce using rule 84 (conditional_expr -> expression LESS_THAN_OR_EQUAL expression .)
    ELIF            reduce using rule 84 (conditional_expr -> expression LESS_THAN_OR_EQUAL expression .)
    ELSE            reduce using rule 84 (conditional_expr -> expression LESS_THAN_OR_EQUAL expression .)
    RPAREN          reduce using rule 84 (conditional_expr -> expression LESS_THAN_OR_EQUAL expression .)
    SEMICOLON       reduce using rule 84 (conditional_expr -> expression LESS_THAN_OR_EQUAL expression .)
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 66
    POW             shift and go to state 69
    MOD             shift and go to state 78
    AND             shift and go to state 64
    OR              shift and go to state 72
    XOR             shift and go to state 65

  ! PLUS            [ reduce using rule 84 (conditional_expr -> expression LESS_THAN_OR_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 84 (conditional_expr -> expression LESS_THAN_OR_EQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 84 (conditional_expr -> expression LESS_THAN_OR_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 84 (conditional_expr -> expression LESS_THAN_OR_EQUAL expression .) ]
  ! POW             [ reduce using rule 84 (conditional_expr -> expression LESS_THAN_OR_EQUAL expression .) ]
  ! MOD             [ reduce using rule 84 (conditional_expr -> expression LESS_THAN_OR_EQUAL expression .) ]
  ! AND             [ reduce using rule 84 (conditional_expr -> expression LESS_THAN_OR_EQUAL expression .) ]
  ! OR              [ reduce using rule 84 (conditional_expr -> expression LESS_THAN_OR_EQUAL expression .) ]
  ! XOR             [ reduce using rule 84 (conditional_expr -> expression LESS_THAN_OR_EQUAL expression .) ]
  ! EQUALS          [ shift and go to state 71 ]
  ! NOT_EQUALS      [ shift and go to state 67 ]
  ! GREATER_THAN    [ shift and go to state 73 ]
  ! LESS_THAN       [ shift and go to state 76 ]
  ! GREATER_THAN_OR_EQUAL [ shift and go to state 68 ]
  ! LESS_THAN_OR_EQUAL [ shift and go to state 70 ]


state 100

    (79) conditional_expr -> expression EQUALS expression .
    (70) arithmetic_expr -> expression . PLUS expression
    (71) arithmetic_expr -> expression . MINUS expression
    (72) arithmetic_expr -> expression . MULTIPLY expression
    (73) arithmetic_expr -> expression . DIVIDE expression
    (74) arithmetic_expr -> expression . POW expression
    (75) arithmetic_expr -> expression . MOD expression
    (76) conditional_expr -> expression . AND expression
    (77) conditional_expr -> expression . OR expression
    (78) conditional_expr -> expression . XOR expression
    (79) conditional_expr -> expression . EQUALS expression
    (80) conditional_expr -> expression . NOT_EQUALS expression
    (81) conditional_expr -> expression . GREATER_THAN expression
    (82) conditional_expr -> expression . LESS_THAN expression
    (83) conditional_expr -> expression . GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> expression . LESS_THAN_OR_EQUAL expression

    EQUALS          reduce using rule 79 (conditional_expr -> expression EQUALS expression .)
    NOT_EQUALS      reduce using rule 79 (conditional_expr -> expression EQUALS expression .)
    GREATER_THAN    reduce using rule 79 (conditional_expr -> expression EQUALS expression .)
    LESS_THAN       reduce using rule 79 (conditional_expr -> expression EQUALS expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 79 (conditional_expr -> expression EQUALS expression .)
    LESS_THAN_OR_EQUAL reduce using rule 79 (conditional_expr -> expression EQUALS expression .)
    ID              reduce using rule 79 (conditional_expr -> expression EQUALS expression .)
    IF              reduce using rule 79 (conditional_expr -> expression EQUALS expression .)
    WHILE           reduce using rule 79 (conditional_expr -> expression EQUALS expression .)
    FOR             reduce using rule 79 (conditional_expr -> expression EQUALS expression .)
    FUN             reduce using rule 79 (conditional_expr -> expression EQUALS expression .)
    TRUE            reduce using rule 79 (conditional_expr -> expression EQUALS expression .)
    FALSE           reduce using rule 79 (conditional_expr -> expression EQUALS expression .)
    NOT             reduce using rule 79 (conditional_expr -> expression EQUALS expression .)
    NUMBER          reduce using rule 79 (conditional_expr -> expression EQUALS expression .)
    STRING1         reduce using rule 79 (conditional_expr -> expression EQUALS expression .)
    STRING2         reduce using rule 79 (conditional_expr -> expression EQUALS expression .)
    LSBRACKET       reduce using rule 79 (conditional_expr -> expression EQUALS expression .)
    SELECTOR        reduce using rule 79 (conditional_expr -> expression EQUALS expression .)
    LPAREN          reduce using rule 79 (conditional_expr -> expression EQUALS expression .)
    END             reduce using rule 79 (conditional_expr -> expression EQUALS expression .)
    COMMA           reduce using rule 79 (conditional_expr -> expression EQUALS expression .)
    RCBRACKET       reduce using rule 79 (conditional_expr -> expression EQUALS expression .)
    $end            reduce using rule 79 (conditional_expr -> expression EQUALS expression .)
    RSBRACKET       reduce using rule 79 (conditional_expr -> expression EQUALS expression .)
    DO              reduce using rule 79 (conditional_expr -> expression EQUALS expression .)
    ELIF            reduce using rule 79 (conditional_expr -> expression EQUALS expression .)
    ELSE            reduce using rule 79 (conditional_expr -> expression EQUALS expression .)
    RPAREN          reduce using rule 79 (conditional_expr -> expression EQUALS expression .)
    SEMICOLON       reduce using rule 79 (conditional_expr -> expression EQUALS expression .)
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 66
    POW             shift and go to state 69
    MOD             shift and go to state 78
    AND             shift and go to state 64
    OR              shift and go to state 72
    XOR             shift and go to state 65

  ! PLUS            [ reduce using rule 79 (conditional_expr -> expression EQUALS expression .) ]
  ! MINUS           [ reduce using rule 79 (conditional_expr -> expression EQUALS expression .) ]
  ! MULTIPLY        [ reduce using rule 79 (conditional_expr -> expression EQUALS expression .) ]
  ! DIVIDE          [ reduce using rule 79 (conditional_expr -> expression EQUALS expression .) ]
  ! POW             [ reduce using rule 79 (conditional_expr -> expression EQUALS expression .) ]
  ! MOD             [ reduce using rule 79 (conditional_expr -> expression EQUALS expression .) ]
  ! AND             [ reduce using rule 79 (conditional_expr -> expression EQUALS expression .) ]
  ! OR              [ reduce using rule 79 (conditional_expr -> expression EQUALS expression .) ]
  ! XOR             [ reduce using rule 79 (conditional_expr -> expression EQUALS expression .) ]
  ! EQUALS          [ shift and go to state 71 ]
  ! NOT_EQUALS      [ shift and go to state 67 ]
  ! GREATER_THAN    [ shift and go to state 73 ]
  ! LESS_THAN       [ shift and go to state 76 ]
  ! GREATER_THAN_OR_EQUAL [ shift and go to state 68 ]
  ! LESS_THAN_OR_EQUAL [ shift and go to state 70 ]


state 101

    (77) conditional_expr -> expression OR expression .
    (70) arithmetic_expr -> expression . PLUS expression
    (71) arithmetic_expr -> expression . MINUS expression
    (72) arithmetic_expr -> expression . MULTIPLY expression
    (73) arithmetic_expr -> expression . DIVIDE expression
    (74) arithmetic_expr -> expression . POW expression
    (75) arithmetic_expr -> expression . MOD expression
    (76) conditional_expr -> expression . AND expression
    (77) conditional_expr -> expression . OR expression
    (78) conditional_expr -> expression . XOR expression
    (79) conditional_expr -> expression . EQUALS expression
    (80) conditional_expr -> expression . NOT_EQUALS expression
    (81) conditional_expr -> expression . GREATER_THAN expression
    (82) conditional_expr -> expression . LESS_THAN expression
    (83) conditional_expr -> expression . GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> expression . LESS_THAN_OR_EQUAL expression

    PLUS            reduce using rule 77 (conditional_expr -> expression OR expression .)
    MINUS           reduce using rule 77 (conditional_expr -> expression OR expression .)
    AND             reduce using rule 77 (conditional_expr -> expression OR expression .)
    OR              reduce using rule 77 (conditional_expr -> expression OR expression .)
    XOR             reduce using rule 77 (conditional_expr -> expression OR expression .)
    EQUALS          reduce using rule 77 (conditional_expr -> expression OR expression .)
    NOT_EQUALS      reduce using rule 77 (conditional_expr -> expression OR expression .)
    GREATER_THAN    reduce using rule 77 (conditional_expr -> expression OR expression .)
    LESS_THAN       reduce using rule 77 (conditional_expr -> expression OR expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 77 (conditional_expr -> expression OR expression .)
    LESS_THAN_OR_EQUAL reduce using rule 77 (conditional_expr -> expression OR expression .)
    ID              reduce using rule 77 (conditional_expr -> expression OR expression .)
    IF              reduce using rule 77 (conditional_expr -> expression OR expression .)
    WHILE           reduce using rule 77 (conditional_expr -> expression OR expression .)
    FOR             reduce using rule 77 (conditional_expr -> expression OR expression .)
    FUN             reduce using rule 77 (conditional_expr -> expression OR expression .)
    TRUE            reduce using rule 77 (conditional_expr -> expression OR expression .)
    FALSE           reduce using rule 77 (conditional_expr -> expression OR expression .)
    NOT             reduce using rule 77 (conditional_expr -> expression OR expression .)
    NUMBER          reduce using rule 77 (conditional_expr -> expression OR expression .)
    STRING1         reduce using rule 77 (conditional_expr -> expression OR expression .)
    STRING2         reduce using rule 77 (conditional_expr -> expression OR expression .)
    LSBRACKET       reduce using rule 77 (conditional_expr -> expression OR expression .)
    SELECTOR        reduce using rule 77 (conditional_expr -> expression OR expression .)
    LPAREN          reduce using rule 77 (conditional_expr -> expression OR expression .)
    END             reduce using rule 77 (conditional_expr -> expression OR expression .)
    COMMA           reduce using rule 77 (conditional_expr -> expression OR expression .)
    RCBRACKET       reduce using rule 77 (conditional_expr -> expression OR expression .)
    $end            reduce using rule 77 (conditional_expr -> expression OR expression .)
    RSBRACKET       reduce using rule 77 (conditional_expr -> expression OR expression .)
    DO              reduce using rule 77 (conditional_expr -> expression OR expression .)
    ELIF            reduce using rule 77 (conditional_expr -> expression OR expression .)
    ELSE            reduce using rule 77 (conditional_expr -> expression OR expression .)
    RPAREN          reduce using rule 77 (conditional_expr -> expression OR expression .)
    SEMICOLON       reduce using rule 77 (conditional_expr -> expression OR expression .)
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 66
    POW             shift and go to state 69
    MOD             shift and go to state 78

  ! MULTIPLY        [ reduce using rule 77 (conditional_expr -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 77 (conditional_expr -> expression OR expression .) ]
  ! POW             [ reduce using rule 77 (conditional_expr -> expression OR expression .) ]
  ! MOD             [ reduce using rule 77 (conditional_expr -> expression OR expression .) ]
  ! PLUS            [ shift and go to state 81 ]
  ! MINUS           [ shift and go to state 82 ]
  ! AND             [ shift and go to state 64 ]
  ! OR              [ shift and go to state 72 ]
  ! XOR             [ shift and go to state 65 ]
  ! EQUALS          [ shift and go to state 71 ]
  ! NOT_EQUALS      [ shift and go to state 67 ]
  ! GREATER_THAN    [ shift and go to state 73 ]
  ! LESS_THAN       [ shift and go to state 76 ]
  ! GREATER_THAN_OR_EQUAL [ shift and go to state 68 ]
  ! LESS_THAN_OR_EQUAL [ shift and go to state 70 ]


state 102

    (81) conditional_expr -> expression GREATER_THAN expression .
    (70) arithmetic_expr -> expression . PLUS expression
    (71) arithmetic_expr -> expression . MINUS expression
    (72) arithmetic_expr -> expression . MULTIPLY expression
    (73) arithmetic_expr -> expression . DIVIDE expression
    (74) arithmetic_expr -> expression . POW expression
    (75) arithmetic_expr -> expression . MOD expression
    (76) conditional_expr -> expression . AND expression
    (77) conditional_expr -> expression . OR expression
    (78) conditional_expr -> expression . XOR expression
    (79) conditional_expr -> expression . EQUALS expression
    (80) conditional_expr -> expression . NOT_EQUALS expression
    (81) conditional_expr -> expression . GREATER_THAN expression
    (82) conditional_expr -> expression . LESS_THAN expression
    (83) conditional_expr -> expression . GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> expression . LESS_THAN_OR_EQUAL expression

    EQUALS          reduce using rule 81 (conditional_expr -> expression GREATER_THAN expression .)
    NOT_EQUALS      reduce using rule 81 (conditional_expr -> expression GREATER_THAN expression .)
    GREATER_THAN    reduce using rule 81 (conditional_expr -> expression GREATER_THAN expression .)
    LESS_THAN       reduce using rule 81 (conditional_expr -> expression GREATER_THAN expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 81 (conditional_expr -> expression GREATER_THAN expression .)
    LESS_THAN_OR_EQUAL reduce using rule 81 (conditional_expr -> expression GREATER_THAN expression .)
    ID              reduce using rule 81 (conditional_expr -> expression GREATER_THAN expression .)
    IF              reduce using rule 81 (conditional_expr -> expression GREATER_THAN expression .)
    WHILE           reduce using rule 81 (conditional_expr -> expression GREATER_THAN expression .)
    FOR             reduce using rule 81 (conditional_expr -> expression GREATER_THAN expression .)
    FUN             reduce using rule 81 (conditional_expr -> expression GREATER_THAN expression .)
    TRUE            reduce using rule 81 (conditional_expr -> expression GREATER_THAN expression .)
    FALSE           reduce using rule 81 (conditional_expr -> expression GREATER_THAN expression .)
    NOT             reduce using rule 81 (conditional_expr -> expression GREATER_THAN expression .)
    NUMBER          reduce using rule 81 (conditional_expr -> expression GREATER_THAN expression .)
    STRING1         reduce using rule 81 (conditional_expr -> expression GREATER_THAN expression .)
    STRING2         reduce using rule 81 (conditional_expr -> expression GREATER_THAN expression .)
    LSBRACKET       reduce using rule 81 (conditional_expr -> expression GREATER_THAN expression .)
    SELECTOR        reduce using rule 81 (conditional_expr -> expression GREATER_THAN expression .)
    LPAREN          reduce using rule 81 (conditional_expr -> expression GREATER_THAN expression .)
    END             reduce using rule 81 (conditional_expr -> expression GREATER_THAN expression .)
    COMMA           reduce using rule 81 (conditional_expr -> expression GREATER_THAN expression .)
    RCBRACKET       reduce using rule 81 (conditional_expr -> expression GREATER_THAN expression .)
    $end            reduce using rule 81 (conditional_expr -> expression GREATER_THAN expression .)
    RSBRACKET       reduce using rule 81 (conditional_expr -> expression GREATER_THAN expression .)
    DO              reduce using rule 81 (conditional_expr -> expression GREATER_THAN expression .)
    ELIF            reduce using rule 81 (conditional_expr -> expression GREATER_THAN expression .)
    ELSE            reduce using rule 81 (conditional_expr -> expression GREATER_THAN expression .)
    RPAREN          reduce using rule 81 (conditional_expr -> expression GREATER_THAN expression .)
    SEMICOLON       reduce using rule 81 (conditional_expr -> expression GREATER_THAN expression .)
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 66
    POW             shift and go to state 69
    MOD             shift and go to state 78
    AND             shift and go to state 64
    OR              shift and go to state 72
    XOR             shift and go to state 65

  ! PLUS            [ reduce using rule 81 (conditional_expr -> expression GREATER_THAN expression .) ]
  ! MINUS           [ reduce using rule 81 (conditional_expr -> expression GREATER_THAN expression .) ]
  ! MULTIPLY        [ reduce using rule 81 (conditional_expr -> expression GREATER_THAN expression .) ]
  ! DIVIDE          [ reduce using rule 81 (conditional_expr -> expression GREATER_THAN expression .) ]
  ! POW             [ reduce using rule 81 (conditional_expr -> expression GREATER_THAN expression .) ]
  ! MOD             [ reduce using rule 81 (conditional_expr -> expression GREATER_THAN expression .) ]
  ! AND             [ reduce using rule 81 (conditional_expr -> expression GREATER_THAN expression .) ]
  ! OR              [ reduce using rule 81 (conditional_expr -> expression GREATER_THAN expression .) ]
  ! XOR             [ reduce using rule 81 (conditional_expr -> expression GREATER_THAN expression .) ]
  ! EQUALS          [ shift and go to state 71 ]
  ! NOT_EQUALS      [ shift and go to state 67 ]
  ! GREATER_THAN    [ shift and go to state 73 ]
  ! LESS_THAN       [ shift and go to state 76 ]
  ! GREATER_THAN_OR_EQUAL [ shift and go to state 68 ]
  ! LESS_THAN_OR_EQUAL [ shift and go to state 70 ]


state 103

    (19) increment_stmt -> expression PLUS PLUS . SEMICOLON
    (68) uplus_expr -> PLUS . expression
    (44) expression -> . unary_expr
    (45) expression -> . binary_expr
    (46) unary_expr -> . boolean_expr
    (47) unary_expr -> . not_expr
    (48) unary_expr -> . number_expr
    (49) unary_expr -> . id_expr
    (50) unary_expr -> . string_expr
    (51) unary_expr -> . list_expr
    (52) unary_expr -> . parse_text_expr
    (53) unary_expr -> . group_expr
    (54) unary_expr -> . uplus_expr
    (55) unary_expr -> . uminus_expr
    (56) binary_expr -> . arithmetic_expr
    (57) binary_expr -> . conditional_expr
    (58) boolean_expr -> . TRUE
    (59) boolean_expr -> . FALSE
    (60) not_expr -> . NOT expression
    (61) number_expr -> . NUMBER
    (62) id_expr -> . ID
    (63) string_expr -> . STRING1
    (64) string_expr -> . STRING2
    (65) list_expr -> . LSBRACKET elements RSBRACKET
    (66) parse_text_expr -> . SELECTOR LPAREN elements RPAREN
    (67) group_expr -> . LPAREN expression RPAREN
    (68) uplus_expr -> . PLUS expression
    (69) uminus_expr -> . MINUS expression
    (70) arithmetic_expr -> . expression PLUS expression
    (71) arithmetic_expr -> . expression MINUS expression
    (72) arithmetic_expr -> . expression MULTIPLY expression
    (73) arithmetic_expr -> . expression DIVIDE expression
    (74) arithmetic_expr -> . expression POW expression
    (75) arithmetic_expr -> . expression MOD expression
    (76) conditional_expr -> . expression AND expression
    (77) conditional_expr -> . expression OR expression
    (78) conditional_expr -> . expression XOR expression
    (79) conditional_expr -> . expression EQUALS expression
    (80) conditional_expr -> . expression NOT_EQUALS expression
    (81) conditional_expr -> . expression GREATER_THAN expression
    (82) conditional_expr -> . expression LESS_THAN expression
    (83) conditional_expr -> . expression GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> . expression LESS_THAN_OR_EQUAL expression

    SEMICOLON       shift and go to state 124
    TRUE            shift and go to state 15
    FALSE           shift and go to state 37
    NOT             shift and go to state 44
    NUMBER          shift and go to state 7
    ID              shift and go to state 49
    STRING1         shift and go to state 26
    STRING2         shift and go to state 25
    LSBRACKET       shift and go to state 4
    SELECTOR        shift and go to state 9
    LPAREN          shift and go to state 32
    PLUS            shift and go to state 24
    MINUS           shift and go to state 16

    conditional_expr               shift and go to state 12
    list_expr                      shift and go to state 1
    number_expr                    shift and go to state 33
    string_expr                    shift and go to state 18
    unary_expr                     shift and go to state 3
    uminus_expr                    shift and go to state 39
    id_expr                        shift and go to state 40
    group_expr                     shift and go to state 27
    arithmetic_expr                shift and go to state 19
    boolean_expr                   shift and go to state 41
    not_expr                       shift and go to state 6
    binary_expr                    shift and go to state 10
    parse_text_expr                shift and go to state 14
    uplus_expr                     shift and go to state 45
    expression                     shift and go to state 57

state 104

    (70) arithmetic_expr -> expression PLUS expression .
    (70) arithmetic_expr -> expression . PLUS expression
    (71) arithmetic_expr -> expression . MINUS expression
    (72) arithmetic_expr -> expression . MULTIPLY expression
    (73) arithmetic_expr -> expression . DIVIDE expression
    (74) arithmetic_expr -> expression . POW expression
    (75) arithmetic_expr -> expression . MOD expression
    (76) conditional_expr -> expression . AND expression
    (77) conditional_expr -> expression . OR expression
    (78) conditional_expr -> expression . XOR expression
    (79) conditional_expr -> expression . EQUALS expression
    (80) conditional_expr -> expression . NOT_EQUALS expression
    (81) conditional_expr -> expression . GREATER_THAN expression
    (82) conditional_expr -> expression . LESS_THAN expression
    (83) conditional_expr -> expression . GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> expression . LESS_THAN_OR_EQUAL expression

    PLUS            reduce using rule 70 (arithmetic_expr -> expression PLUS expression .)
    MINUS           reduce using rule 70 (arithmetic_expr -> expression PLUS expression .)
    AND             reduce using rule 70 (arithmetic_expr -> expression PLUS expression .)
    OR              reduce using rule 70 (arithmetic_expr -> expression PLUS expression .)
    XOR             reduce using rule 70 (arithmetic_expr -> expression PLUS expression .)
    EQUALS          reduce using rule 70 (arithmetic_expr -> expression PLUS expression .)
    NOT_EQUALS      reduce using rule 70 (arithmetic_expr -> expression PLUS expression .)
    GREATER_THAN    reduce using rule 70 (arithmetic_expr -> expression PLUS expression .)
    LESS_THAN       reduce using rule 70 (arithmetic_expr -> expression PLUS expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 70 (arithmetic_expr -> expression PLUS expression .)
    LESS_THAN_OR_EQUAL reduce using rule 70 (arithmetic_expr -> expression PLUS expression .)
    ID              reduce using rule 70 (arithmetic_expr -> expression PLUS expression .)
    IF              reduce using rule 70 (arithmetic_expr -> expression PLUS expression .)
    WHILE           reduce using rule 70 (arithmetic_expr -> expression PLUS expression .)
    FOR             reduce using rule 70 (arithmetic_expr -> expression PLUS expression .)
    FUN             reduce using rule 70 (arithmetic_expr -> expression PLUS expression .)
    TRUE            reduce using rule 70 (arithmetic_expr -> expression PLUS expression .)
    FALSE           reduce using rule 70 (arithmetic_expr -> expression PLUS expression .)
    NOT             reduce using rule 70 (arithmetic_expr -> expression PLUS expression .)
    NUMBER          reduce using rule 70 (arithmetic_expr -> expression PLUS expression .)
    STRING1         reduce using rule 70 (arithmetic_expr -> expression PLUS expression .)
    STRING2         reduce using rule 70 (arithmetic_expr -> expression PLUS expression .)
    LSBRACKET       reduce using rule 70 (arithmetic_expr -> expression PLUS expression .)
    SELECTOR        reduce using rule 70 (arithmetic_expr -> expression PLUS expression .)
    LPAREN          reduce using rule 70 (arithmetic_expr -> expression PLUS expression .)
    $end            reduce using rule 70 (arithmetic_expr -> expression PLUS expression .)
    COMMA           reduce using rule 70 (arithmetic_expr -> expression PLUS expression .)
    RSBRACKET       reduce using rule 70 (arithmetic_expr -> expression PLUS expression .)
    DO              reduce using rule 70 (arithmetic_expr -> expression PLUS expression .)
    END             reduce using rule 70 (arithmetic_expr -> expression PLUS expression .)
    ELIF            reduce using rule 70 (arithmetic_expr -> expression PLUS expression .)
    ELSE            reduce using rule 70 (arithmetic_expr -> expression PLUS expression .)
    RPAREN          reduce using rule 70 (arithmetic_expr -> expression PLUS expression .)
    SEMICOLON       reduce using rule 70 (arithmetic_expr -> expression PLUS expression .)
    RCBRACKET       reduce using rule 70 (arithmetic_expr -> expression PLUS expression .)
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 66
    POW             shift and go to state 69
    MOD             shift and go to state 78

  ! MULTIPLY        [ reduce using rule 70 (arithmetic_expr -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 70 (arithmetic_expr -> expression PLUS expression .) ]
  ! POW             [ reduce using rule 70 (arithmetic_expr -> expression PLUS expression .) ]
  ! MOD             [ reduce using rule 70 (arithmetic_expr -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 81 ]
  ! MINUS           [ shift and go to state 82 ]
  ! AND             [ shift and go to state 64 ]
  ! OR              [ shift and go to state 72 ]
  ! XOR             [ shift and go to state 65 ]
  ! EQUALS          [ shift and go to state 71 ]
  ! NOT_EQUALS      [ shift and go to state 67 ]
  ! GREATER_THAN    [ shift and go to state 73 ]
  ! LESS_THAN       [ shift and go to state 76 ]
  ! GREATER_THAN_OR_EQUAL [ shift and go to state 68 ]
  ! LESS_THAN_OR_EQUAL [ shift and go to state 70 ]


state 105

    (72) arithmetic_expr -> expression MULTIPLY expression .
    (70) arithmetic_expr -> expression . PLUS expression
    (71) arithmetic_expr -> expression . MINUS expression
    (72) arithmetic_expr -> expression . MULTIPLY expression
    (73) arithmetic_expr -> expression . DIVIDE expression
    (74) arithmetic_expr -> expression . POW expression
    (75) arithmetic_expr -> expression . MOD expression
    (76) conditional_expr -> expression . AND expression
    (77) conditional_expr -> expression . OR expression
    (78) conditional_expr -> expression . XOR expression
    (79) conditional_expr -> expression . EQUALS expression
    (80) conditional_expr -> expression . NOT_EQUALS expression
    (81) conditional_expr -> expression . GREATER_THAN expression
    (82) conditional_expr -> expression . LESS_THAN expression
    (83) conditional_expr -> expression . GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> expression . LESS_THAN_OR_EQUAL expression

    PLUS            reduce using rule 72 (arithmetic_expr -> expression MULTIPLY expression .)
    MINUS           reduce using rule 72 (arithmetic_expr -> expression MULTIPLY expression .)
    MULTIPLY        reduce using rule 72 (arithmetic_expr -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 72 (arithmetic_expr -> expression MULTIPLY expression .)
    MOD             reduce using rule 72 (arithmetic_expr -> expression MULTIPLY expression .)
    AND             reduce using rule 72 (arithmetic_expr -> expression MULTIPLY expression .)
    OR              reduce using rule 72 (arithmetic_expr -> expression MULTIPLY expression .)
    XOR             reduce using rule 72 (arithmetic_expr -> expression MULTIPLY expression .)
    EQUALS          reduce using rule 72 (arithmetic_expr -> expression MULTIPLY expression .)
    NOT_EQUALS      reduce using rule 72 (arithmetic_expr -> expression MULTIPLY expression .)
    GREATER_THAN    reduce using rule 72 (arithmetic_expr -> expression MULTIPLY expression .)
    LESS_THAN       reduce using rule 72 (arithmetic_expr -> expression MULTIPLY expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 72 (arithmetic_expr -> expression MULTIPLY expression .)
    LESS_THAN_OR_EQUAL reduce using rule 72 (arithmetic_expr -> expression MULTIPLY expression .)
    ID              reduce using rule 72 (arithmetic_expr -> expression MULTIPLY expression .)
    IF              reduce using rule 72 (arithmetic_expr -> expression MULTIPLY expression .)
    WHILE           reduce using rule 72 (arithmetic_expr -> expression MULTIPLY expression .)
    FOR             reduce using rule 72 (arithmetic_expr -> expression MULTIPLY expression .)
    FUN             reduce using rule 72 (arithmetic_expr -> expression MULTIPLY expression .)
    TRUE            reduce using rule 72 (arithmetic_expr -> expression MULTIPLY expression .)
    FALSE           reduce using rule 72 (arithmetic_expr -> expression MULTIPLY expression .)
    NOT             reduce using rule 72 (arithmetic_expr -> expression MULTIPLY expression .)
    NUMBER          reduce using rule 72 (arithmetic_expr -> expression MULTIPLY expression .)
    STRING1         reduce using rule 72 (arithmetic_expr -> expression MULTIPLY expression .)
    STRING2         reduce using rule 72 (arithmetic_expr -> expression MULTIPLY expression .)
    LSBRACKET       reduce using rule 72 (arithmetic_expr -> expression MULTIPLY expression .)
    SELECTOR        reduce using rule 72 (arithmetic_expr -> expression MULTIPLY expression .)
    LPAREN          reduce using rule 72 (arithmetic_expr -> expression MULTIPLY expression .)
    $end            reduce using rule 72 (arithmetic_expr -> expression MULTIPLY expression .)
    COMMA           reduce using rule 72 (arithmetic_expr -> expression MULTIPLY expression .)
    RSBRACKET       reduce using rule 72 (arithmetic_expr -> expression MULTIPLY expression .)
    DO              reduce using rule 72 (arithmetic_expr -> expression MULTIPLY expression .)
    END             reduce using rule 72 (arithmetic_expr -> expression MULTIPLY expression .)
    ELIF            reduce using rule 72 (arithmetic_expr -> expression MULTIPLY expression .)
    ELSE            reduce using rule 72 (arithmetic_expr -> expression MULTIPLY expression .)
    RPAREN          reduce using rule 72 (arithmetic_expr -> expression MULTIPLY expression .)
    SEMICOLON       reduce using rule 72 (arithmetic_expr -> expression MULTIPLY expression .)
    RCBRACKET       reduce using rule 72 (arithmetic_expr -> expression MULTIPLY expression .)
    POW             shift and go to state 69

  ! POW             [ reduce using rule 72 (arithmetic_expr -> expression MULTIPLY expression .) ]
  ! PLUS            [ shift and go to state 81 ]
  ! MINUS           [ shift and go to state 82 ]
  ! MULTIPLY        [ shift and go to state 75 ]
  ! DIVIDE          [ shift and go to state 66 ]
  ! MOD             [ shift and go to state 78 ]
  ! AND             [ shift and go to state 64 ]
  ! OR              [ shift and go to state 72 ]
  ! XOR             [ shift and go to state 65 ]
  ! EQUALS          [ shift and go to state 71 ]
  ! NOT_EQUALS      [ shift and go to state 67 ]
  ! GREATER_THAN    [ shift and go to state 73 ]
  ! LESS_THAN       [ shift and go to state 76 ]
  ! GREATER_THAN_OR_EQUAL [ shift and go to state 68 ]
  ! LESS_THAN_OR_EQUAL [ shift and go to state 70 ]


state 106

    (82) conditional_expr -> expression LESS_THAN expression .
    (70) arithmetic_expr -> expression . PLUS expression
    (71) arithmetic_expr -> expression . MINUS expression
    (72) arithmetic_expr -> expression . MULTIPLY expression
    (73) arithmetic_expr -> expression . DIVIDE expression
    (74) arithmetic_expr -> expression . POW expression
    (75) arithmetic_expr -> expression . MOD expression
    (76) conditional_expr -> expression . AND expression
    (77) conditional_expr -> expression . OR expression
    (78) conditional_expr -> expression . XOR expression
    (79) conditional_expr -> expression . EQUALS expression
    (80) conditional_expr -> expression . NOT_EQUALS expression
    (81) conditional_expr -> expression . GREATER_THAN expression
    (82) conditional_expr -> expression . LESS_THAN expression
    (83) conditional_expr -> expression . GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> expression . LESS_THAN_OR_EQUAL expression

    EQUALS          reduce using rule 82 (conditional_expr -> expression LESS_THAN expression .)
    NOT_EQUALS      reduce using rule 82 (conditional_expr -> expression LESS_THAN expression .)
    GREATER_THAN    reduce using rule 82 (conditional_expr -> expression LESS_THAN expression .)
    LESS_THAN       reduce using rule 82 (conditional_expr -> expression LESS_THAN expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 82 (conditional_expr -> expression LESS_THAN expression .)
    LESS_THAN_OR_EQUAL reduce using rule 82 (conditional_expr -> expression LESS_THAN expression .)
    ID              reduce using rule 82 (conditional_expr -> expression LESS_THAN expression .)
    IF              reduce using rule 82 (conditional_expr -> expression LESS_THAN expression .)
    WHILE           reduce using rule 82 (conditional_expr -> expression LESS_THAN expression .)
    FOR             reduce using rule 82 (conditional_expr -> expression LESS_THAN expression .)
    FUN             reduce using rule 82 (conditional_expr -> expression LESS_THAN expression .)
    TRUE            reduce using rule 82 (conditional_expr -> expression LESS_THAN expression .)
    FALSE           reduce using rule 82 (conditional_expr -> expression LESS_THAN expression .)
    NOT             reduce using rule 82 (conditional_expr -> expression LESS_THAN expression .)
    NUMBER          reduce using rule 82 (conditional_expr -> expression LESS_THAN expression .)
    STRING1         reduce using rule 82 (conditional_expr -> expression LESS_THAN expression .)
    STRING2         reduce using rule 82 (conditional_expr -> expression LESS_THAN expression .)
    LSBRACKET       reduce using rule 82 (conditional_expr -> expression LESS_THAN expression .)
    SELECTOR        reduce using rule 82 (conditional_expr -> expression LESS_THAN expression .)
    LPAREN          reduce using rule 82 (conditional_expr -> expression LESS_THAN expression .)
    END             reduce using rule 82 (conditional_expr -> expression LESS_THAN expression .)
    COMMA           reduce using rule 82 (conditional_expr -> expression LESS_THAN expression .)
    RCBRACKET       reduce using rule 82 (conditional_expr -> expression LESS_THAN expression .)
    $end            reduce using rule 82 (conditional_expr -> expression LESS_THAN expression .)
    RSBRACKET       reduce using rule 82 (conditional_expr -> expression LESS_THAN expression .)
    DO              reduce using rule 82 (conditional_expr -> expression LESS_THAN expression .)
    ELIF            reduce using rule 82 (conditional_expr -> expression LESS_THAN expression .)
    ELSE            reduce using rule 82 (conditional_expr -> expression LESS_THAN expression .)
    RPAREN          reduce using rule 82 (conditional_expr -> expression LESS_THAN expression .)
    SEMICOLON       reduce using rule 82 (conditional_expr -> expression LESS_THAN expression .)
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 66
    POW             shift and go to state 69
    MOD             shift and go to state 78
    AND             shift and go to state 64
    OR              shift and go to state 72
    XOR             shift and go to state 65

  ! PLUS            [ reduce using rule 82 (conditional_expr -> expression LESS_THAN expression .) ]
  ! MINUS           [ reduce using rule 82 (conditional_expr -> expression LESS_THAN expression .) ]
  ! MULTIPLY        [ reduce using rule 82 (conditional_expr -> expression LESS_THAN expression .) ]
  ! DIVIDE          [ reduce using rule 82 (conditional_expr -> expression LESS_THAN expression .) ]
  ! POW             [ reduce using rule 82 (conditional_expr -> expression LESS_THAN expression .) ]
  ! MOD             [ reduce using rule 82 (conditional_expr -> expression LESS_THAN expression .) ]
  ! AND             [ reduce using rule 82 (conditional_expr -> expression LESS_THAN expression .) ]
  ! OR              [ reduce using rule 82 (conditional_expr -> expression LESS_THAN expression .) ]
  ! XOR             [ reduce using rule 82 (conditional_expr -> expression LESS_THAN expression .) ]
  ! EQUALS          [ shift and go to state 71 ]
  ! NOT_EQUALS      [ shift and go to state 67 ]
  ! GREATER_THAN    [ shift and go to state 73 ]
  ! LESS_THAN       [ shift and go to state 76 ]
  ! GREATER_THAN_OR_EQUAL [ shift and go to state 68 ]
  ! LESS_THAN_OR_EQUAL [ shift and go to state 70 ]


state 107

    (20) decrement_stmt -> expression MINUS MINUS . SEMICOLON
    (69) uminus_expr -> MINUS . expression
    (44) expression -> . unary_expr
    (45) expression -> . binary_expr
    (46) unary_expr -> . boolean_expr
    (47) unary_expr -> . not_expr
    (48) unary_expr -> . number_expr
    (49) unary_expr -> . id_expr
    (50) unary_expr -> . string_expr
    (51) unary_expr -> . list_expr
    (52) unary_expr -> . parse_text_expr
    (53) unary_expr -> . group_expr
    (54) unary_expr -> . uplus_expr
    (55) unary_expr -> . uminus_expr
    (56) binary_expr -> . arithmetic_expr
    (57) binary_expr -> . conditional_expr
    (58) boolean_expr -> . TRUE
    (59) boolean_expr -> . FALSE
    (60) not_expr -> . NOT expression
    (61) number_expr -> . NUMBER
    (62) id_expr -> . ID
    (63) string_expr -> . STRING1
    (64) string_expr -> . STRING2
    (65) list_expr -> . LSBRACKET elements RSBRACKET
    (66) parse_text_expr -> . SELECTOR LPAREN elements RPAREN
    (67) group_expr -> . LPAREN expression RPAREN
    (68) uplus_expr -> . PLUS expression
    (69) uminus_expr -> . MINUS expression
    (70) arithmetic_expr -> . expression PLUS expression
    (71) arithmetic_expr -> . expression MINUS expression
    (72) arithmetic_expr -> . expression MULTIPLY expression
    (73) arithmetic_expr -> . expression DIVIDE expression
    (74) arithmetic_expr -> . expression POW expression
    (75) arithmetic_expr -> . expression MOD expression
    (76) conditional_expr -> . expression AND expression
    (77) conditional_expr -> . expression OR expression
    (78) conditional_expr -> . expression XOR expression
    (79) conditional_expr -> . expression EQUALS expression
    (80) conditional_expr -> . expression NOT_EQUALS expression
    (81) conditional_expr -> . expression GREATER_THAN expression
    (82) conditional_expr -> . expression LESS_THAN expression
    (83) conditional_expr -> . expression GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> . expression LESS_THAN_OR_EQUAL expression

    SEMICOLON       shift and go to state 125
    TRUE            shift and go to state 15
    FALSE           shift and go to state 37
    NOT             shift and go to state 44
    NUMBER          shift and go to state 7
    ID              shift and go to state 49
    STRING1         shift and go to state 26
    STRING2         shift and go to state 25
    LSBRACKET       shift and go to state 4
    SELECTOR        shift and go to state 9
    LPAREN          shift and go to state 32
    PLUS            shift and go to state 24
    MINUS           shift and go to state 16

    conditional_expr               shift and go to state 12
    list_expr                      shift and go to state 1
    number_expr                    shift and go to state 33
    string_expr                    shift and go to state 18
    unary_expr                     shift and go to state 3
    uminus_expr                    shift and go to state 39
    id_expr                        shift and go to state 40
    group_expr                     shift and go to state 27
    arithmetic_expr                shift and go to state 19
    boolean_expr                   shift and go to state 41
    not_expr                       shift and go to state 6
    binary_expr                    shift and go to state 10
    parse_text_expr                shift and go to state 14
    uplus_expr                     shift and go to state 45
    expression                     shift and go to state 55

state 108

    (71) arithmetic_expr -> expression MINUS expression .
    (70) arithmetic_expr -> expression . PLUS expression
    (71) arithmetic_expr -> expression . MINUS expression
    (72) arithmetic_expr -> expression . MULTIPLY expression
    (73) arithmetic_expr -> expression . DIVIDE expression
    (74) arithmetic_expr -> expression . POW expression
    (75) arithmetic_expr -> expression . MOD expression
    (76) conditional_expr -> expression . AND expression
    (77) conditional_expr -> expression . OR expression
    (78) conditional_expr -> expression . XOR expression
    (79) conditional_expr -> expression . EQUALS expression
    (80) conditional_expr -> expression . NOT_EQUALS expression
    (81) conditional_expr -> expression . GREATER_THAN expression
    (82) conditional_expr -> expression . LESS_THAN expression
    (83) conditional_expr -> expression . GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> expression . LESS_THAN_OR_EQUAL expression

    PLUS            reduce using rule 71 (arithmetic_expr -> expression MINUS expression .)
    MINUS           reduce using rule 71 (arithmetic_expr -> expression MINUS expression .)
    AND             reduce using rule 71 (arithmetic_expr -> expression MINUS expression .)
    OR              reduce using rule 71 (arithmetic_expr -> expression MINUS expression .)
    XOR             reduce using rule 71 (arithmetic_expr -> expression MINUS expression .)
    EQUALS          reduce using rule 71 (arithmetic_expr -> expression MINUS expression .)
    NOT_EQUALS      reduce using rule 71 (arithmetic_expr -> expression MINUS expression .)
    GREATER_THAN    reduce using rule 71 (arithmetic_expr -> expression MINUS expression .)
    LESS_THAN       reduce using rule 71 (arithmetic_expr -> expression MINUS expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 71 (arithmetic_expr -> expression MINUS expression .)
    LESS_THAN_OR_EQUAL reduce using rule 71 (arithmetic_expr -> expression MINUS expression .)
    ID              reduce using rule 71 (arithmetic_expr -> expression MINUS expression .)
    IF              reduce using rule 71 (arithmetic_expr -> expression MINUS expression .)
    WHILE           reduce using rule 71 (arithmetic_expr -> expression MINUS expression .)
    FOR             reduce using rule 71 (arithmetic_expr -> expression MINUS expression .)
    FUN             reduce using rule 71 (arithmetic_expr -> expression MINUS expression .)
    TRUE            reduce using rule 71 (arithmetic_expr -> expression MINUS expression .)
    FALSE           reduce using rule 71 (arithmetic_expr -> expression MINUS expression .)
    NOT             reduce using rule 71 (arithmetic_expr -> expression MINUS expression .)
    NUMBER          reduce using rule 71 (arithmetic_expr -> expression MINUS expression .)
    STRING1         reduce using rule 71 (arithmetic_expr -> expression MINUS expression .)
    STRING2         reduce using rule 71 (arithmetic_expr -> expression MINUS expression .)
    LSBRACKET       reduce using rule 71 (arithmetic_expr -> expression MINUS expression .)
    SELECTOR        reduce using rule 71 (arithmetic_expr -> expression MINUS expression .)
    LPAREN          reduce using rule 71 (arithmetic_expr -> expression MINUS expression .)
    $end            reduce using rule 71 (arithmetic_expr -> expression MINUS expression .)
    COMMA           reduce using rule 71 (arithmetic_expr -> expression MINUS expression .)
    RSBRACKET       reduce using rule 71 (arithmetic_expr -> expression MINUS expression .)
    DO              reduce using rule 71 (arithmetic_expr -> expression MINUS expression .)
    END             reduce using rule 71 (arithmetic_expr -> expression MINUS expression .)
    ELIF            reduce using rule 71 (arithmetic_expr -> expression MINUS expression .)
    ELSE            reduce using rule 71 (arithmetic_expr -> expression MINUS expression .)
    RPAREN          reduce using rule 71 (arithmetic_expr -> expression MINUS expression .)
    SEMICOLON       reduce using rule 71 (arithmetic_expr -> expression MINUS expression .)
    RCBRACKET       reduce using rule 71 (arithmetic_expr -> expression MINUS expression .)
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 66
    POW             shift and go to state 69
    MOD             shift and go to state 78

  ! MULTIPLY        [ reduce using rule 71 (arithmetic_expr -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 71 (arithmetic_expr -> expression MINUS expression .) ]
  ! POW             [ reduce using rule 71 (arithmetic_expr -> expression MINUS expression .) ]
  ! MOD             [ reduce using rule 71 (arithmetic_expr -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 81 ]
  ! MINUS           [ shift and go to state 82 ]
  ! AND             [ shift and go to state 64 ]
  ! OR              [ shift and go to state 72 ]
  ! XOR             [ shift and go to state 65 ]
  ! EQUALS          [ shift and go to state 71 ]
  ! NOT_EQUALS      [ shift and go to state 67 ]
  ! GREATER_THAN    [ shift and go to state 73 ]
  ! LESS_THAN       [ shift and go to state 76 ]
  ! GREATER_THAN_OR_EQUAL [ shift and go to state 68 ]
  ! LESS_THAN_OR_EQUAL [ shift and go to state 70 ]


state 109

    (75) arithmetic_expr -> expression MOD expression .
    (70) arithmetic_expr -> expression . PLUS expression
    (71) arithmetic_expr -> expression . MINUS expression
    (72) arithmetic_expr -> expression . MULTIPLY expression
    (73) arithmetic_expr -> expression . DIVIDE expression
    (74) arithmetic_expr -> expression . POW expression
    (75) arithmetic_expr -> expression . MOD expression
    (76) conditional_expr -> expression . AND expression
    (77) conditional_expr -> expression . OR expression
    (78) conditional_expr -> expression . XOR expression
    (79) conditional_expr -> expression . EQUALS expression
    (80) conditional_expr -> expression . NOT_EQUALS expression
    (81) conditional_expr -> expression . GREATER_THAN expression
    (82) conditional_expr -> expression . LESS_THAN expression
    (83) conditional_expr -> expression . GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> expression . LESS_THAN_OR_EQUAL expression

    PLUS            reduce using rule 75 (arithmetic_expr -> expression MOD expression .)
    MINUS           reduce using rule 75 (arithmetic_expr -> expression MOD expression .)
    MULTIPLY        reduce using rule 75 (arithmetic_expr -> expression MOD expression .)
    DIVIDE          reduce using rule 75 (arithmetic_expr -> expression MOD expression .)
    MOD             reduce using rule 75 (arithmetic_expr -> expression MOD expression .)
    AND             reduce using rule 75 (arithmetic_expr -> expression MOD expression .)
    OR              reduce using rule 75 (arithmetic_expr -> expression MOD expression .)
    XOR             reduce using rule 75 (arithmetic_expr -> expression MOD expression .)
    EQUALS          reduce using rule 75 (arithmetic_expr -> expression MOD expression .)
    NOT_EQUALS      reduce using rule 75 (arithmetic_expr -> expression MOD expression .)
    GREATER_THAN    reduce using rule 75 (arithmetic_expr -> expression MOD expression .)
    LESS_THAN       reduce using rule 75 (arithmetic_expr -> expression MOD expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 75 (arithmetic_expr -> expression MOD expression .)
    LESS_THAN_OR_EQUAL reduce using rule 75 (arithmetic_expr -> expression MOD expression .)
    ID              reduce using rule 75 (arithmetic_expr -> expression MOD expression .)
    IF              reduce using rule 75 (arithmetic_expr -> expression MOD expression .)
    WHILE           reduce using rule 75 (arithmetic_expr -> expression MOD expression .)
    FOR             reduce using rule 75 (arithmetic_expr -> expression MOD expression .)
    FUN             reduce using rule 75 (arithmetic_expr -> expression MOD expression .)
    TRUE            reduce using rule 75 (arithmetic_expr -> expression MOD expression .)
    FALSE           reduce using rule 75 (arithmetic_expr -> expression MOD expression .)
    NOT             reduce using rule 75 (arithmetic_expr -> expression MOD expression .)
    NUMBER          reduce using rule 75 (arithmetic_expr -> expression MOD expression .)
    STRING1         reduce using rule 75 (arithmetic_expr -> expression MOD expression .)
    STRING2         reduce using rule 75 (arithmetic_expr -> expression MOD expression .)
    LSBRACKET       reduce using rule 75 (arithmetic_expr -> expression MOD expression .)
    SELECTOR        reduce using rule 75 (arithmetic_expr -> expression MOD expression .)
    LPAREN          reduce using rule 75 (arithmetic_expr -> expression MOD expression .)
    $end            reduce using rule 75 (arithmetic_expr -> expression MOD expression .)
    COMMA           reduce using rule 75 (arithmetic_expr -> expression MOD expression .)
    RSBRACKET       reduce using rule 75 (arithmetic_expr -> expression MOD expression .)
    DO              reduce using rule 75 (arithmetic_expr -> expression MOD expression .)
    END             reduce using rule 75 (arithmetic_expr -> expression MOD expression .)
    ELIF            reduce using rule 75 (arithmetic_expr -> expression MOD expression .)
    ELSE            reduce using rule 75 (arithmetic_expr -> expression MOD expression .)
    RPAREN          reduce using rule 75 (arithmetic_expr -> expression MOD expression .)
    SEMICOLON       reduce using rule 75 (arithmetic_expr -> expression MOD expression .)
    RCBRACKET       reduce using rule 75 (arithmetic_expr -> expression MOD expression .)
    POW             shift and go to state 69

  ! POW             [ reduce using rule 75 (arithmetic_expr -> expression MOD expression .) ]
  ! PLUS            [ shift and go to state 81 ]
  ! MINUS           [ shift and go to state 82 ]
  ! MULTIPLY        [ shift and go to state 75 ]
  ! DIVIDE          [ shift and go to state 66 ]
  ! MOD             [ shift and go to state 78 ]
  ! AND             [ shift and go to state 64 ]
  ! OR              [ shift and go to state 72 ]
  ! XOR             [ shift and go to state 65 ]
  ! EQUALS          [ shift and go to state 71 ]
  ! NOT_EQUALS      [ shift and go to state 67 ]
  ! GREATER_THAN    [ shift and go to state 73 ]
  ! LESS_THAN       [ shift and go to state 76 ]
  ! GREATER_THAN_OR_EQUAL [ shift and go to state 68 ]
  ! LESS_THAN_OR_EQUAL [ shift and go to state 70 ]


state 110

    (22) elements -> element COMMA elements .

    RSBRACKET       reduce using rule 22 (elements -> element COMMA elements .)
    RPAREN          reduce using rule 22 (elements -> element COMMA elements .)


state 111

    (66) parse_text_expr -> SELECTOR LPAREN elements RPAREN .

    PLUS            reduce using rule 66 (parse_text_expr -> SELECTOR LPAREN elements RPAREN .)
    MINUS           reduce using rule 66 (parse_text_expr -> SELECTOR LPAREN elements RPAREN .)
    MULTIPLY        reduce using rule 66 (parse_text_expr -> SELECTOR LPAREN elements RPAREN .)
    DIVIDE          reduce using rule 66 (parse_text_expr -> SELECTOR LPAREN elements RPAREN .)
    POW             reduce using rule 66 (parse_text_expr -> SELECTOR LPAREN elements RPAREN .)
    MOD             reduce using rule 66 (parse_text_expr -> SELECTOR LPAREN elements RPAREN .)
    AND             reduce using rule 66 (parse_text_expr -> SELECTOR LPAREN elements RPAREN .)
    OR              reduce using rule 66 (parse_text_expr -> SELECTOR LPAREN elements RPAREN .)
    XOR             reduce using rule 66 (parse_text_expr -> SELECTOR LPAREN elements RPAREN .)
    EQUALS          reduce using rule 66 (parse_text_expr -> SELECTOR LPAREN elements RPAREN .)
    NOT_EQUALS      reduce using rule 66 (parse_text_expr -> SELECTOR LPAREN elements RPAREN .)
    GREATER_THAN    reduce using rule 66 (parse_text_expr -> SELECTOR LPAREN elements RPAREN .)
    LESS_THAN       reduce using rule 66 (parse_text_expr -> SELECTOR LPAREN elements RPAREN .)
    GREATER_THAN_OR_EQUAL reduce using rule 66 (parse_text_expr -> SELECTOR LPAREN elements RPAREN .)
    LESS_THAN_OR_EQUAL reduce using rule 66 (parse_text_expr -> SELECTOR LPAREN elements RPAREN .)
    ID              reduce using rule 66 (parse_text_expr -> SELECTOR LPAREN elements RPAREN .)
    IF              reduce using rule 66 (parse_text_expr -> SELECTOR LPAREN elements RPAREN .)
    WHILE           reduce using rule 66 (parse_text_expr -> SELECTOR LPAREN elements RPAREN .)
    FOR             reduce using rule 66 (parse_text_expr -> SELECTOR LPAREN elements RPAREN .)
    FUN             reduce using rule 66 (parse_text_expr -> SELECTOR LPAREN elements RPAREN .)
    TRUE            reduce using rule 66 (parse_text_expr -> SELECTOR LPAREN elements RPAREN .)
    FALSE           reduce using rule 66 (parse_text_expr -> SELECTOR LPAREN elements RPAREN .)
    NOT             reduce using rule 66 (parse_text_expr -> SELECTOR LPAREN elements RPAREN .)
    NUMBER          reduce using rule 66 (parse_text_expr -> SELECTOR LPAREN elements RPAREN .)
    STRING1         reduce using rule 66 (parse_text_expr -> SELECTOR LPAREN elements RPAREN .)
    STRING2         reduce using rule 66 (parse_text_expr -> SELECTOR LPAREN elements RPAREN .)
    LSBRACKET       reduce using rule 66 (parse_text_expr -> SELECTOR LPAREN elements RPAREN .)
    SELECTOR        reduce using rule 66 (parse_text_expr -> SELECTOR LPAREN elements RPAREN .)
    LPAREN          reduce using rule 66 (parse_text_expr -> SELECTOR LPAREN elements RPAREN .)
    $end            reduce using rule 66 (parse_text_expr -> SELECTOR LPAREN elements RPAREN .)
    COMMA           reduce using rule 66 (parse_text_expr -> SELECTOR LPAREN elements RPAREN .)
    RSBRACKET       reduce using rule 66 (parse_text_expr -> SELECTOR LPAREN elements RPAREN .)
    DO              reduce using rule 66 (parse_text_expr -> SELECTOR LPAREN elements RPAREN .)
    END             reduce using rule 66 (parse_text_expr -> SELECTOR LPAREN elements RPAREN .)
    ELIF            reduce using rule 66 (parse_text_expr -> SELECTOR LPAREN elements RPAREN .)
    ELSE            reduce using rule 66 (parse_text_expr -> SELECTOR LPAREN elements RPAREN .)
    RPAREN          reduce using rule 66 (parse_text_expr -> SELECTOR LPAREN elements RPAREN .)
    SEMICOLON       reduce using rule 66 (parse_text_expr -> SELECTOR LPAREN elements RPAREN .)
    RCBRACKET       reduce using rule 66 (parse_text_expr -> SELECTOR LPAREN elements RPAREN .)


state 112

    (40) while_stmt -> WHILE expression DO statements . END

    END             shift and go to state 126


state 113

    (42) function_decl -> FUN ID LPAREN elements . RPAREN DO statements END

    RPAREN          shift and go to state 127


state 114

    (41) for_stmt -> FOR EACH ID IN . element DO statements END
    (25) element -> . expression
    (44) expression -> . unary_expr
    (45) expression -> . binary_expr
    (46) unary_expr -> . boolean_expr
    (47) unary_expr -> . not_expr
    (48) unary_expr -> . number_expr
    (49) unary_expr -> . id_expr
    (50) unary_expr -> . string_expr
    (51) unary_expr -> . list_expr
    (52) unary_expr -> . parse_text_expr
    (53) unary_expr -> . group_expr
    (54) unary_expr -> . uplus_expr
    (55) unary_expr -> . uminus_expr
    (56) binary_expr -> . arithmetic_expr
    (57) binary_expr -> . conditional_expr
    (58) boolean_expr -> . TRUE
    (59) boolean_expr -> . FALSE
    (60) not_expr -> . NOT expression
    (61) number_expr -> . NUMBER
    (62) id_expr -> . ID
    (63) string_expr -> . STRING1
    (64) string_expr -> . STRING2
    (65) list_expr -> . LSBRACKET elements RSBRACKET
    (66) parse_text_expr -> . SELECTOR LPAREN elements RPAREN
    (67) group_expr -> . LPAREN expression RPAREN
    (68) uplus_expr -> . PLUS expression
    (69) uminus_expr -> . MINUS expression
    (70) arithmetic_expr -> . expression PLUS expression
    (71) arithmetic_expr -> . expression MINUS expression
    (72) arithmetic_expr -> . expression MULTIPLY expression
    (73) arithmetic_expr -> . expression DIVIDE expression
    (74) arithmetic_expr -> . expression POW expression
    (75) arithmetic_expr -> . expression MOD expression
    (76) conditional_expr -> . expression AND expression
    (77) conditional_expr -> . expression OR expression
    (78) conditional_expr -> . expression XOR expression
    (79) conditional_expr -> . expression EQUALS expression
    (80) conditional_expr -> . expression NOT_EQUALS expression
    (81) conditional_expr -> . expression GREATER_THAN expression
    (82) conditional_expr -> . expression LESS_THAN expression
    (83) conditional_expr -> . expression GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> . expression LESS_THAN_OR_EQUAL expression

    TRUE            shift and go to state 15
    FALSE           shift and go to state 37
    NOT             shift and go to state 44
    NUMBER          shift and go to state 7
    ID              shift and go to state 49
    STRING1         shift and go to state 26
    STRING2         shift and go to state 25
    LSBRACKET       shift and go to state 4
    SELECTOR        shift and go to state 9
    LPAREN          shift and go to state 32
    PLUS            shift and go to state 24
    MINUS           shift and go to state 16

    conditional_expr               shift and go to state 12
    list_expr                      shift and go to state 1
    string_expr                    shift and go to state 18
    unary_expr                     shift and go to state 3
    uminus_expr                    shift and go to state 39
    id_expr                        shift and go to state 40
    group_expr                     shift and go to state 27
    element                        shift and go to state 128
    arithmetic_expr                shift and go to state 19
    boolean_expr                   shift and go to state 41
    not_expr                       shift and go to state 6
    binary_expr                    shift and go to state 10
    number_expr                    shift and go to state 33
    parse_text_expr                shift and go to state 14
    uplus_expr                     shift and go to state 45
    expression                     shift and go to state 51

state 115

    (21) list_stmt -> ID ASSIGN LSBRACKET elements . RSBRACKET SEMICOLON
    (65) list_expr -> LSBRACKET elements . RSBRACKET

    RSBRACKET       shift and go to state 129


state 116

    (30) dictionary_object -> key . COLON value

    COLON           shift and go to state 130


state 117

    (27) dictionary_objects -> dictionary_object . COMMA dictionary_objects
    (28) dictionary_objects -> dictionary_object .

    COMMA           shift and go to state 131
    RCBRACKET       reduce using rule 28 (dictionary_objects -> dictionary_object .)


state 118

    (32) key -> STRING2 .

    COLON           reduce using rule 32 (key -> STRING2 .)


state 119

    (31) key -> STRING1 .

    COLON           reduce using rule 31 (key -> STRING1 .)


state 120

    (26) dictionary_stmt -> ID ASSIGN LCBRACKET dictionary_objects . RCBRACKET SEMICOLON

    RCBRACKET       shift and go to state 132


state 121

    (18) assign_stmt -> ID ASSIGN expression SEMICOLON .

    ID              reduce using rule 18 (assign_stmt -> ID ASSIGN expression SEMICOLON .)
    IF              reduce using rule 18 (assign_stmt -> ID ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 18 (assign_stmt -> ID ASSIGN expression SEMICOLON .)
    FOR             reduce using rule 18 (assign_stmt -> ID ASSIGN expression SEMICOLON .)
    FUN             reduce using rule 18 (assign_stmt -> ID ASSIGN expression SEMICOLON .)
    TRUE            reduce using rule 18 (assign_stmt -> ID ASSIGN expression SEMICOLON .)
    FALSE           reduce using rule 18 (assign_stmt -> ID ASSIGN expression SEMICOLON .)
    NOT             reduce using rule 18 (assign_stmt -> ID ASSIGN expression SEMICOLON .)
    NUMBER          reduce using rule 18 (assign_stmt -> ID ASSIGN expression SEMICOLON .)
    STRING1         reduce using rule 18 (assign_stmt -> ID ASSIGN expression SEMICOLON .)
    STRING2         reduce using rule 18 (assign_stmt -> ID ASSIGN expression SEMICOLON .)
    LSBRACKET       reduce using rule 18 (assign_stmt -> ID ASSIGN expression SEMICOLON .)
    SELECTOR        reduce using rule 18 (assign_stmt -> ID ASSIGN expression SEMICOLON .)
    LPAREN          reduce using rule 18 (assign_stmt -> ID ASSIGN expression SEMICOLON .)
    PLUS            reduce using rule 18 (assign_stmt -> ID ASSIGN expression SEMICOLON .)
    MINUS           reduce using rule 18 (assign_stmt -> ID ASSIGN expression SEMICOLON .)
    END             reduce using rule 18 (assign_stmt -> ID ASSIGN expression SEMICOLON .)
    ELIF            reduce using rule 18 (assign_stmt -> ID ASSIGN expression SEMICOLON .)
    ELSE            reduce using rule 18 (assign_stmt -> ID ASSIGN expression SEMICOLON .)
    $end            reduce using rule 18 (assign_stmt -> ID ASSIGN expression SEMICOLON .)


state 122

    (43) function_call -> ID LPAREN elements RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 133


state 123

    (34) if_stmt -> IF expression DO statements . elif_blocks END
    (35) elif_blocks -> . elif_block elif_blocks
    (36) elif_blocks -> . else_block
    (37) elif_blocks -> .
    (38) elif_block -> . ELIF expression DO statements
    (39) else_block -> . ELSE statements

    END             reduce using rule 37 (elif_blocks -> .)
    ELIF            shift and go to state 134
    ELSE            shift and go to state 135

    elif_blocks                    shift and go to state 136
    elif_block                     shift and go to state 137
    else_block                     shift and go to state 138

state 124

    (19) increment_stmt -> expression PLUS PLUS SEMICOLON .

    ID              reduce using rule 19 (increment_stmt -> expression PLUS PLUS SEMICOLON .)
    IF              reduce using rule 19 (increment_stmt -> expression PLUS PLUS SEMICOLON .)
    WHILE           reduce using rule 19 (increment_stmt -> expression PLUS PLUS SEMICOLON .)
    FOR             reduce using rule 19 (increment_stmt -> expression PLUS PLUS SEMICOLON .)
    FUN             reduce using rule 19 (increment_stmt -> expression PLUS PLUS SEMICOLON .)
    TRUE            reduce using rule 19 (increment_stmt -> expression PLUS PLUS SEMICOLON .)
    FALSE           reduce using rule 19 (increment_stmt -> expression PLUS PLUS SEMICOLON .)
    NOT             reduce using rule 19 (increment_stmt -> expression PLUS PLUS SEMICOLON .)
    NUMBER          reduce using rule 19 (increment_stmt -> expression PLUS PLUS SEMICOLON .)
    STRING1         reduce using rule 19 (increment_stmt -> expression PLUS PLUS SEMICOLON .)
    STRING2         reduce using rule 19 (increment_stmt -> expression PLUS PLUS SEMICOLON .)
    LSBRACKET       reduce using rule 19 (increment_stmt -> expression PLUS PLUS SEMICOLON .)
    SELECTOR        reduce using rule 19 (increment_stmt -> expression PLUS PLUS SEMICOLON .)
    LPAREN          reduce using rule 19 (increment_stmt -> expression PLUS PLUS SEMICOLON .)
    PLUS            reduce using rule 19 (increment_stmt -> expression PLUS PLUS SEMICOLON .)
    MINUS           reduce using rule 19 (increment_stmt -> expression PLUS PLUS SEMICOLON .)
    ELIF            reduce using rule 19 (increment_stmt -> expression PLUS PLUS SEMICOLON .)
    ELSE            reduce using rule 19 (increment_stmt -> expression PLUS PLUS SEMICOLON .)
    END             reduce using rule 19 (increment_stmt -> expression PLUS PLUS SEMICOLON .)
    $end            reduce using rule 19 (increment_stmt -> expression PLUS PLUS SEMICOLON .)


state 125

    (20) decrement_stmt -> expression MINUS MINUS SEMICOLON .

    ID              reduce using rule 20 (decrement_stmt -> expression MINUS MINUS SEMICOLON .)
    IF              reduce using rule 20 (decrement_stmt -> expression MINUS MINUS SEMICOLON .)
    WHILE           reduce using rule 20 (decrement_stmt -> expression MINUS MINUS SEMICOLON .)
    FOR             reduce using rule 20 (decrement_stmt -> expression MINUS MINUS SEMICOLON .)
    FUN             reduce using rule 20 (decrement_stmt -> expression MINUS MINUS SEMICOLON .)
    TRUE            reduce using rule 20 (decrement_stmt -> expression MINUS MINUS SEMICOLON .)
    FALSE           reduce using rule 20 (decrement_stmt -> expression MINUS MINUS SEMICOLON .)
    NOT             reduce using rule 20 (decrement_stmt -> expression MINUS MINUS SEMICOLON .)
    NUMBER          reduce using rule 20 (decrement_stmt -> expression MINUS MINUS SEMICOLON .)
    STRING1         reduce using rule 20 (decrement_stmt -> expression MINUS MINUS SEMICOLON .)
    STRING2         reduce using rule 20 (decrement_stmt -> expression MINUS MINUS SEMICOLON .)
    LSBRACKET       reduce using rule 20 (decrement_stmt -> expression MINUS MINUS SEMICOLON .)
    SELECTOR        reduce using rule 20 (decrement_stmt -> expression MINUS MINUS SEMICOLON .)
    LPAREN          reduce using rule 20 (decrement_stmt -> expression MINUS MINUS SEMICOLON .)
    PLUS            reduce using rule 20 (decrement_stmt -> expression MINUS MINUS SEMICOLON .)
    MINUS           reduce using rule 20 (decrement_stmt -> expression MINUS MINUS SEMICOLON .)
    $end            reduce using rule 20 (decrement_stmt -> expression MINUS MINUS SEMICOLON .)
    END             reduce using rule 20 (decrement_stmt -> expression MINUS MINUS SEMICOLON .)
    ELIF            reduce using rule 20 (decrement_stmt -> expression MINUS MINUS SEMICOLON .)
    ELSE            reduce using rule 20 (decrement_stmt -> expression MINUS MINUS SEMICOLON .)


state 126

    (40) while_stmt -> WHILE expression DO statements END .

    ID              reduce using rule 40 (while_stmt -> WHILE expression DO statements END .)
    IF              reduce using rule 40 (while_stmt -> WHILE expression DO statements END .)
    WHILE           reduce using rule 40 (while_stmt -> WHILE expression DO statements END .)
    FOR             reduce using rule 40 (while_stmt -> WHILE expression DO statements END .)
    FUN             reduce using rule 40 (while_stmt -> WHILE expression DO statements END .)
    TRUE            reduce using rule 40 (while_stmt -> WHILE expression DO statements END .)
    FALSE           reduce using rule 40 (while_stmt -> WHILE expression DO statements END .)
    NOT             reduce using rule 40 (while_stmt -> WHILE expression DO statements END .)
    NUMBER          reduce using rule 40 (while_stmt -> WHILE expression DO statements END .)
    STRING1         reduce using rule 40 (while_stmt -> WHILE expression DO statements END .)
    STRING2         reduce using rule 40 (while_stmt -> WHILE expression DO statements END .)
    LSBRACKET       reduce using rule 40 (while_stmt -> WHILE expression DO statements END .)
    SELECTOR        reduce using rule 40 (while_stmt -> WHILE expression DO statements END .)
    LPAREN          reduce using rule 40 (while_stmt -> WHILE expression DO statements END .)
    PLUS            reduce using rule 40 (while_stmt -> WHILE expression DO statements END .)
    MINUS           reduce using rule 40 (while_stmt -> WHILE expression DO statements END .)
    $end            reduce using rule 40 (while_stmt -> WHILE expression DO statements END .)
    END             reduce using rule 40 (while_stmt -> WHILE expression DO statements END .)
    ELIF            reduce using rule 40 (while_stmt -> WHILE expression DO statements END .)
    ELSE            reduce using rule 40 (while_stmt -> WHILE expression DO statements END .)


state 127

    (42) function_decl -> FUN ID LPAREN elements RPAREN . DO statements END

    DO              shift and go to state 139


state 128

    (41) for_stmt -> FOR EACH ID IN element . DO statements END

    DO              shift and go to state 140


state 129

    (21) list_stmt -> ID ASSIGN LSBRACKET elements RSBRACKET . SEMICOLON
    (65) list_expr -> LSBRACKET elements RSBRACKET .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 141
    PLUS            reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)
    MINUS           reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)
    MULTIPLY        reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)
    DIVIDE          reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)
    POW             reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)
    MOD             reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)
    AND             reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)
    OR              reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)
    XOR             reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)
    EQUALS          reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)
    NOT_EQUALS      reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)
    GREATER_THAN    reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)
    LESS_THAN       reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)
    GREATER_THAN_OR_EQUAL reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)
    LESS_THAN_OR_EQUAL reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .)

  ! SEMICOLON       [ reduce using rule 65 (list_expr -> LSBRACKET elements RSBRACKET .) ]


state 130

    (30) dictionary_object -> key COLON . value
    (33) value -> . expression
    (44) expression -> . unary_expr
    (45) expression -> . binary_expr
    (46) unary_expr -> . boolean_expr
    (47) unary_expr -> . not_expr
    (48) unary_expr -> . number_expr
    (49) unary_expr -> . id_expr
    (50) unary_expr -> . string_expr
    (51) unary_expr -> . list_expr
    (52) unary_expr -> . parse_text_expr
    (53) unary_expr -> . group_expr
    (54) unary_expr -> . uplus_expr
    (55) unary_expr -> . uminus_expr
    (56) binary_expr -> . arithmetic_expr
    (57) binary_expr -> . conditional_expr
    (58) boolean_expr -> . TRUE
    (59) boolean_expr -> . FALSE
    (60) not_expr -> . NOT expression
    (61) number_expr -> . NUMBER
    (62) id_expr -> . ID
    (63) string_expr -> . STRING1
    (64) string_expr -> . STRING2
    (65) list_expr -> . LSBRACKET elements RSBRACKET
    (66) parse_text_expr -> . SELECTOR LPAREN elements RPAREN
    (67) group_expr -> . LPAREN expression RPAREN
    (68) uplus_expr -> . PLUS expression
    (69) uminus_expr -> . MINUS expression
    (70) arithmetic_expr -> . expression PLUS expression
    (71) arithmetic_expr -> . expression MINUS expression
    (72) arithmetic_expr -> . expression MULTIPLY expression
    (73) arithmetic_expr -> . expression DIVIDE expression
    (74) arithmetic_expr -> . expression POW expression
    (75) arithmetic_expr -> . expression MOD expression
    (76) conditional_expr -> . expression AND expression
    (77) conditional_expr -> . expression OR expression
    (78) conditional_expr -> . expression XOR expression
    (79) conditional_expr -> . expression EQUALS expression
    (80) conditional_expr -> . expression NOT_EQUALS expression
    (81) conditional_expr -> . expression GREATER_THAN expression
    (82) conditional_expr -> . expression LESS_THAN expression
    (83) conditional_expr -> . expression GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> . expression LESS_THAN_OR_EQUAL expression

    TRUE            shift and go to state 15
    FALSE           shift and go to state 37
    NOT             shift and go to state 44
    NUMBER          shift and go to state 7
    ID              shift and go to state 49
    STRING1         shift and go to state 26
    STRING2         shift and go to state 25
    LSBRACKET       shift and go to state 4
    SELECTOR        shift and go to state 9
    LPAREN          shift and go to state 32
    PLUS            shift and go to state 24
    MINUS           shift and go to state 16

    conditional_expr               shift and go to state 12
    list_expr                      shift and go to state 1
    number_expr                    shift and go to state 33
    string_expr                    shift and go to state 18
    unary_expr                     shift and go to state 3
    uminus_expr                    shift and go to state 39
    id_expr                        shift and go to state 40
    group_expr                     shift and go to state 27
    value                          shift and go to state 142
    arithmetic_expr                shift and go to state 19
    boolean_expr                   shift and go to state 41
    not_expr                       shift and go to state 6
    binary_expr                    shift and go to state 10
    parse_text_expr                shift and go to state 14
    uplus_expr                     shift and go to state 45
    expression                     shift and go to state 143

state 131

    (27) dictionary_objects -> dictionary_object COMMA . dictionary_objects
    (27) dictionary_objects -> . dictionary_object COMMA dictionary_objects
    (28) dictionary_objects -> . dictionary_object
    (29) dictionary_objects -> .
    (30) dictionary_object -> . key COLON value
    (31) key -> . STRING1
    (32) key -> . STRING2

    RCBRACKET       reduce using rule 29 (dictionary_objects -> .)
    STRING1         shift and go to state 119
    STRING2         shift and go to state 118

    dictionary_object              shift and go to state 117
    key                            shift and go to state 116
    dictionary_objects             shift and go to state 144

state 132

    (26) dictionary_stmt -> ID ASSIGN LCBRACKET dictionary_objects RCBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 145


state 133

    (43) function_call -> ID LPAREN elements RPAREN SEMICOLON .

    ID              reduce using rule 43 (function_call -> ID LPAREN elements RPAREN SEMICOLON .)
    IF              reduce using rule 43 (function_call -> ID LPAREN elements RPAREN SEMICOLON .)
    WHILE           reduce using rule 43 (function_call -> ID LPAREN elements RPAREN SEMICOLON .)
    FOR             reduce using rule 43 (function_call -> ID LPAREN elements RPAREN SEMICOLON .)
    FUN             reduce using rule 43 (function_call -> ID LPAREN elements RPAREN SEMICOLON .)
    TRUE            reduce using rule 43 (function_call -> ID LPAREN elements RPAREN SEMICOLON .)
    FALSE           reduce using rule 43 (function_call -> ID LPAREN elements RPAREN SEMICOLON .)
    NOT             reduce using rule 43 (function_call -> ID LPAREN elements RPAREN SEMICOLON .)
    NUMBER          reduce using rule 43 (function_call -> ID LPAREN elements RPAREN SEMICOLON .)
    STRING1         reduce using rule 43 (function_call -> ID LPAREN elements RPAREN SEMICOLON .)
    STRING2         reduce using rule 43 (function_call -> ID LPAREN elements RPAREN SEMICOLON .)
    LSBRACKET       reduce using rule 43 (function_call -> ID LPAREN elements RPAREN SEMICOLON .)
    SELECTOR        reduce using rule 43 (function_call -> ID LPAREN elements RPAREN SEMICOLON .)
    LPAREN          reduce using rule 43 (function_call -> ID LPAREN elements RPAREN SEMICOLON .)
    PLUS            reduce using rule 43 (function_call -> ID LPAREN elements RPAREN SEMICOLON .)
    MINUS           reduce using rule 43 (function_call -> ID LPAREN elements RPAREN SEMICOLON .)
    $end            reduce using rule 43 (function_call -> ID LPAREN elements RPAREN SEMICOLON .)
    END             reduce using rule 43 (function_call -> ID LPAREN elements RPAREN SEMICOLON .)
    ELIF            reduce using rule 43 (function_call -> ID LPAREN elements RPAREN SEMICOLON .)
    ELSE            reduce using rule 43 (function_call -> ID LPAREN elements RPAREN SEMICOLON .)


state 134

    (38) elif_block -> ELIF . expression DO statements
    (44) expression -> . unary_expr
    (45) expression -> . binary_expr
    (46) unary_expr -> . boolean_expr
    (47) unary_expr -> . not_expr
    (48) unary_expr -> . number_expr
    (49) unary_expr -> . id_expr
    (50) unary_expr -> . string_expr
    (51) unary_expr -> . list_expr
    (52) unary_expr -> . parse_text_expr
    (53) unary_expr -> . group_expr
    (54) unary_expr -> . uplus_expr
    (55) unary_expr -> . uminus_expr
    (56) binary_expr -> . arithmetic_expr
    (57) binary_expr -> . conditional_expr
    (58) boolean_expr -> . TRUE
    (59) boolean_expr -> . FALSE
    (60) not_expr -> . NOT expression
    (61) number_expr -> . NUMBER
    (62) id_expr -> . ID
    (63) string_expr -> . STRING1
    (64) string_expr -> . STRING2
    (65) list_expr -> . LSBRACKET elements RSBRACKET
    (66) parse_text_expr -> . SELECTOR LPAREN elements RPAREN
    (67) group_expr -> . LPAREN expression RPAREN
    (68) uplus_expr -> . PLUS expression
    (69) uminus_expr -> . MINUS expression
    (70) arithmetic_expr -> . expression PLUS expression
    (71) arithmetic_expr -> . expression MINUS expression
    (72) arithmetic_expr -> . expression MULTIPLY expression
    (73) arithmetic_expr -> . expression DIVIDE expression
    (74) arithmetic_expr -> . expression POW expression
    (75) arithmetic_expr -> . expression MOD expression
    (76) conditional_expr -> . expression AND expression
    (77) conditional_expr -> . expression OR expression
    (78) conditional_expr -> . expression XOR expression
    (79) conditional_expr -> . expression EQUALS expression
    (80) conditional_expr -> . expression NOT_EQUALS expression
    (81) conditional_expr -> . expression GREATER_THAN expression
    (82) conditional_expr -> . expression LESS_THAN expression
    (83) conditional_expr -> . expression GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> . expression LESS_THAN_OR_EQUAL expression

    TRUE            shift and go to state 15
    FALSE           shift and go to state 37
    NOT             shift and go to state 44
    NUMBER          shift and go to state 7
    ID              shift and go to state 49
    STRING1         shift and go to state 26
    STRING2         shift and go to state 25
    LSBRACKET       shift and go to state 4
    SELECTOR        shift and go to state 9
    LPAREN          shift and go to state 32
    PLUS            shift and go to state 24
    MINUS           shift and go to state 16

    conditional_expr               shift and go to state 12
    list_expr                      shift and go to state 1
    string_expr                    shift and go to state 18
    unary_expr                     shift and go to state 3
    uminus_expr                    shift and go to state 39
    id_expr                        shift and go to state 40
    group_expr                     shift and go to state 27
    arithmetic_expr                shift and go to state 19
    boolean_expr                   shift and go to state 41
    not_expr                       shift and go to state 6
    binary_expr                    shift and go to state 10
    number_expr                    shift and go to state 33
    parse_text_expr                shift and go to state 14
    uplus_expr                     shift and go to state 45
    expression                     shift and go to state 146

state 135

    (39) else_block -> ELSE . statements
    (2) statements -> . statement statements
    (3) statements -> . statement
    (4) statement -> . simple_stmt
    (5) statement -> . compound_stmt
    (6) simple_stmt -> . expression_stmt
    (7) simple_stmt -> . assign_stmt
    (8) simple_stmt -> . increment_stmt
    (9) simple_stmt -> . decrement_stmt
    (10) simple_stmt -> . list_stmt
    (11) simple_stmt -> . dictionary_stmt
    (12) simple_stmt -> . function_call
    (13) compound_stmt -> . if_stmt
    (14) compound_stmt -> . while_stmt
    (15) compound_stmt -> . for_stmt
    (16) compound_stmt -> . function_decl
    (17) expression_stmt -> . expression
    (18) assign_stmt -> . ID ASSIGN expression SEMICOLON
    (19) increment_stmt -> . expression PLUS PLUS SEMICOLON
    (20) decrement_stmt -> . expression MINUS MINUS SEMICOLON
    (21) list_stmt -> . ID ASSIGN LSBRACKET elements RSBRACKET SEMICOLON
    (26) dictionary_stmt -> . ID ASSIGN LCBRACKET dictionary_objects RCBRACKET SEMICOLON
    (43) function_call -> . ID LPAREN elements RPAREN SEMICOLON
    (34) if_stmt -> . IF expression DO statements elif_blocks END
    (40) while_stmt -> . WHILE expression DO statements END
    (41) for_stmt -> . FOR EACH ID IN element DO statements END
    (42) function_decl -> . FUN ID LPAREN elements RPAREN DO statements END
    (44) expression -> . unary_expr
    (45) expression -> . binary_expr
    (46) unary_expr -> . boolean_expr
    (47) unary_expr -> . not_expr
    (48) unary_expr -> . number_expr
    (49) unary_expr -> . id_expr
    (50) unary_expr -> . string_expr
    (51) unary_expr -> . list_expr
    (52) unary_expr -> . parse_text_expr
    (53) unary_expr -> . group_expr
    (54) unary_expr -> . uplus_expr
    (55) unary_expr -> . uminus_expr
    (56) binary_expr -> . arithmetic_expr
    (57) binary_expr -> . conditional_expr
    (58) boolean_expr -> . TRUE
    (59) boolean_expr -> . FALSE
    (60) not_expr -> . NOT expression
    (61) number_expr -> . NUMBER
    (62) id_expr -> . ID
    (63) string_expr -> . STRING1
    (64) string_expr -> . STRING2
    (65) list_expr -> . LSBRACKET elements RSBRACKET
    (66) parse_text_expr -> . SELECTOR LPAREN elements RPAREN
    (67) group_expr -> . LPAREN expression RPAREN
    (68) uplus_expr -> . PLUS expression
    (69) uminus_expr -> . MINUS expression
    (70) arithmetic_expr -> . expression PLUS expression
    (71) arithmetic_expr -> . expression MINUS expression
    (72) arithmetic_expr -> . expression MULTIPLY expression
    (73) arithmetic_expr -> . expression DIVIDE expression
    (74) arithmetic_expr -> . expression POW expression
    (75) arithmetic_expr -> . expression MOD expression
    (76) conditional_expr -> . expression AND expression
    (77) conditional_expr -> . expression OR expression
    (78) conditional_expr -> . expression XOR expression
    (79) conditional_expr -> . expression EQUALS expression
    (80) conditional_expr -> . expression NOT_EQUALS expression
    (81) conditional_expr -> . expression GREATER_THAN expression
    (82) conditional_expr -> . expression LESS_THAN expression
    (83) conditional_expr -> . expression GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> . expression LESS_THAN_OR_EQUAL expression

    ID              shift and go to state 34
    IF              shift and go to state 35
    WHILE           shift and go to state 11
    FOR             shift and go to state 28
    FUN             shift and go to state 13
    TRUE            shift and go to state 15
    FALSE           shift and go to state 37
    NOT             shift and go to state 44
    NUMBER          shift and go to state 7
    STRING1         shift and go to state 26
    STRING2         shift and go to state 25
    LSBRACKET       shift and go to state 4
    SELECTOR        shift and go to state 9
    LPAREN          shift and go to state 32
    PLUS            shift and go to state 24
    MINUS           shift and go to state 16

    list_expr                      shift and go to state 1
    statements                     shift and go to state 147
    unary_expr                     shift and go to state 3
    dictionary_stmt                shift and go to state 5
    group_expr                     shift and go to state 27
    function_call                  shift and go to state 8
    parse_text_expr                shift and go to state 14
    conditional_expr               shift and go to state 12
    list_stmt                      shift and go to state 17
    number_expr                    shift and go to state 33
    string_expr                    shift and go to state 18
    assign_stmt                    shift and go to state 20
    arithmetic_expr                shift and go to state 19
    expression_stmt                shift and go to state 22
    statement                      shift and go to state 23
    compound_stmt                  shift and go to state 42
    simple_stmt                    shift and go to state 29
    function_decl                  shift and go to state 30
    for_stmt                       shift and go to state 31
    not_expr                       shift and go to state 6
    binary_expr                    shift and go to state 10
    decrement_stmt                 shift and go to state 36
    if_stmt                        shift and go to state 38
    uminus_expr                    shift and go to state 39
    id_expr                        shift and go to state 40
    boolean_expr                   shift and go to state 41
    while_stmt                     shift and go to state 43
    uplus_expr                     shift and go to state 45
    expression                     shift and go to state 46
    increment_stmt                 shift and go to state 47

state 136

    (34) if_stmt -> IF expression DO statements elif_blocks . END

    END             shift and go to state 148


state 137

    (35) elif_blocks -> elif_block . elif_blocks
    (35) elif_blocks -> . elif_block elif_blocks
    (36) elif_blocks -> . else_block
    (37) elif_blocks -> .
    (38) elif_block -> . ELIF expression DO statements
    (39) else_block -> . ELSE statements

    END             reduce using rule 37 (elif_blocks -> .)
    ELIF            shift and go to state 134
    ELSE            shift and go to state 135

    elif_blocks                    shift and go to state 149
    elif_block                     shift and go to state 137
    else_block                     shift and go to state 138

state 138

    (36) elif_blocks -> else_block .

    END             reduce using rule 36 (elif_blocks -> else_block .)


state 139

    (42) function_decl -> FUN ID LPAREN elements RPAREN DO . statements END
    (2) statements -> . statement statements
    (3) statements -> . statement
    (4) statement -> . simple_stmt
    (5) statement -> . compound_stmt
    (6) simple_stmt -> . expression_stmt
    (7) simple_stmt -> . assign_stmt
    (8) simple_stmt -> . increment_stmt
    (9) simple_stmt -> . decrement_stmt
    (10) simple_stmt -> . list_stmt
    (11) simple_stmt -> . dictionary_stmt
    (12) simple_stmt -> . function_call
    (13) compound_stmt -> . if_stmt
    (14) compound_stmt -> . while_stmt
    (15) compound_stmt -> . for_stmt
    (16) compound_stmt -> . function_decl
    (17) expression_stmt -> . expression
    (18) assign_stmt -> . ID ASSIGN expression SEMICOLON
    (19) increment_stmt -> . expression PLUS PLUS SEMICOLON
    (20) decrement_stmt -> . expression MINUS MINUS SEMICOLON
    (21) list_stmt -> . ID ASSIGN LSBRACKET elements RSBRACKET SEMICOLON
    (26) dictionary_stmt -> . ID ASSIGN LCBRACKET dictionary_objects RCBRACKET SEMICOLON
    (43) function_call -> . ID LPAREN elements RPAREN SEMICOLON
    (34) if_stmt -> . IF expression DO statements elif_blocks END
    (40) while_stmt -> . WHILE expression DO statements END
    (41) for_stmt -> . FOR EACH ID IN element DO statements END
    (42) function_decl -> . FUN ID LPAREN elements RPAREN DO statements END
    (44) expression -> . unary_expr
    (45) expression -> . binary_expr
    (46) unary_expr -> . boolean_expr
    (47) unary_expr -> . not_expr
    (48) unary_expr -> . number_expr
    (49) unary_expr -> . id_expr
    (50) unary_expr -> . string_expr
    (51) unary_expr -> . list_expr
    (52) unary_expr -> . parse_text_expr
    (53) unary_expr -> . group_expr
    (54) unary_expr -> . uplus_expr
    (55) unary_expr -> . uminus_expr
    (56) binary_expr -> . arithmetic_expr
    (57) binary_expr -> . conditional_expr
    (58) boolean_expr -> . TRUE
    (59) boolean_expr -> . FALSE
    (60) not_expr -> . NOT expression
    (61) number_expr -> . NUMBER
    (62) id_expr -> . ID
    (63) string_expr -> . STRING1
    (64) string_expr -> . STRING2
    (65) list_expr -> . LSBRACKET elements RSBRACKET
    (66) parse_text_expr -> . SELECTOR LPAREN elements RPAREN
    (67) group_expr -> . LPAREN expression RPAREN
    (68) uplus_expr -> . PLUS expression
    (69) uminus_expr -> . MINUS expression
    (70) arithmetic_expr -> . expression PLUS expression
    (71) arithmetic_expr -> . expression MINUS expression
    (72) arithmetic_expr -> . expression MULTIPLY expression
    (73) arithmetic_expr -> . expression DIVIDE expression
    (74) arithmetic_expr -> . expression POW expression
    (75) arithmetic_expr -> . expression MOD expression
    (76) conditional_expr -> . expression AND expression
    (77) conditional_expr -> . expression OR expression
    (78) conditional_expr -> . expression XOR expression
    (79) conditional_expr -> . expression EQUALS expression
    (80) conditional_expr -> . expression NOT_EQUALS expression
    (81) conditional_expr -> . expression GREATER_THAN expression
    (82) conditional_expr -> . expression LESS_THAN expression
    (83) conditional_expr -> . expression GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> . expression LESS_THAN_OR_EQUAL expression

    ID              shift and go to state 34
    IF              shift and go to state 35
    WHILE           shift and go to state 11
    FOR             shift and go to state 28
    FUN             shift and go to state 13
    TRUE            shift and go to state 15
    FALSE           shift and go to state 37
    NOT             shift and go to state 44
    NUMBER          shift and go to state 7
    STRING1         shift and go to state 26
    STRING2         shift and go to state 25
    LSBRACKET       shift and go to state 4
    SELECTOR        shift and go to state 9
    LPAREN          shift and go to state 32
    PLUS            shift and go to state 24
    MINUS           shift and go to state 16

    list_expr                      shift and go to state 1
    statements                     shift and go to state 150
    unary_expr                     shift and go to state 3
    dictionary_stmt                shift and go to state 5
    group_expr                     shift and go to state 27
    function_call                  shift and go to state 8
    parse_text_expr                shift and go to state 14
    conditional_expr               shift and go to state 12
    list_stmt                      shift and go to state 17
    number_expr                    shift and go to state 33
    string_expr                    shift and go to state 18
    assign_stmt                    shift and go to state 20
    arithmetic_expr                shift and go to state 19
    expression_stmt                shift and go to state 22
    statement                      shift and go to state 23
    compound_stmt                  shift and go to state 42
    simple_stmt                    shift and go to state 29
    function_decl                  shift and go to state 30
    for_stmt                       shift and go to state 31
    not_expr                       shift and go to state 6
    binary_expr                    shift and go to state 10
    decrement_stmt                 shift and go to state 36
    if_stmt                        shift and go to state 38
    uminus_expr                    shift and go to state 39
    id_expr                        shift and go to state 40
    boolean_expr                   shift and go to state 41
    while_stmt                     shift and go to state 43
    uplus_expr                     shift and go to state 45
    expression                     shift and go to state 46
    increment_stmt                 shift and go to state 47

state 140

    (41) for_stmt -> FOR EACH ID IN element DO . statements END
    (2) statements -> . statement statements
    (3) statements -> . statement
    (4) statement -> . simple_stmt
    (5) statement -> . compound_stmt
    (6) simple_stmt -> . expression_stmt
    (7) simple_stmt -> . assign_stmt
    (8) simple_stmt -> . increment_stmt
    (9) simple_stmt -> . decrement_stmt
    (10) simple_stmt -> . list_stmt
    (11) simple_stmt -> . dictionary_stmt
    (12) simple_stmt -> . function_call
    (13) compound_stmt -> . if_stmt
    (14) compound_stmt -> . while_stmt
    (15) compound_stmt -> . for_stmt
    (16) compound_stmt -> . function_decl
    (17) expression_stmt -> . expression
    (18) assign_stmt -> . ID ASSIGN expression SEMICOLON
    (19) increment_stmt -> . expression PLUS PLUS SEMICOLON
    (20) decrement_stmt -> . expression MINUS MINUS SEMICOLON
    (21) list_stmt -> . ID ASSIGN LSBRACKET elements RSBRACKET SEMICOLON
    (26) dictionary_stmt -> . ID ASSIGN LCBRACKET dictionary_objects RCBRACKET SEMICOLON
    (43) function_call -> . ID LPAREN elements RPAREN SEMICOLON
    (34) if_stmt -> . IF expression DO statements elif_blocks END
    (40) while_stmt -> . WHILE expression DO statements END
    (41) for_stmt -> . FOR EACH ID IN element DO statements END
    (42) function_decl -> . FUN ID LPAREN elements RPAREN DO statements END
    (44) expression -> . unary_expr
    (45) expression -> . binary_expr
    (46) unary_expr -> . boolean_expr
    (47) unary_expr -> . not_expr
    (48) unary_expr -> . number_expr
    (49) unary_expr -> . id_expr
    (50) unary_expr -> . string_expr
    (51) unary_expr -> . list_expr
    (52) unary_expr -> . parse_text_expr
    (53) unary_expr -> . group_expr
    (54) unary_expr -> . uplus_expr
    (55) unary_expr -> . uminus_expr
    (56) binary_expr -> . arithmetic_expr
    (57) binary_expr -> . conditional_expr
    (58) boolean_expr -> . TRUE
    (59) boolean_expr -> . FALSE
    (60) not_expr -> . NOT expression
    (61) number_expr -> . NUMBER
    (62) id_expr -> . ID
    (63) string_expr -> . STRING1
    (64) string_expr -> . STRING2
    (65) list_expr -> . LSBRACKET elements RSBRACKET
    (66) parse_text_expr -> . SELECTOR LPAREN elements RPAREN
    (67) group_expr -> . LPAREN expression RPAREN
    (68) uplus_expr -> . PLUS expression
    (69) uminus_expr -> . MINUS expression
    (70) arithmetic_expr -> . expression PLUS expression
    (71) arithmetic_expr -> . expression MINUS expression
    (72) arithmetic_expr -> . expression MULTIPLY expression
    (73) arithmetic_expr -> . expression DIVIDE expression
    (74) arithmetic_expr -> . expression POW expression
    (75) arithmetic_expr -> . expression MOD expression
    (76) conditional_expr -> . expression AND expression
    (77) conditional_expr -> . expression OR expression
    (78) conditional_expr -> . expression XOR expression
    (79) conditional_expr -> . expression EQUALS expression
    (80) conditional_expr -> . expression NOT_EQUALS expression
    (81) conditional_expr -> . expression GREATER_THAN expression
    (82) conditional_expr -> . expression LESS_THAN expression
    (83) conditional_expr -> . expression GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> . expression LESS_THAN_OR_EQUAL expression

    ID              shift and go to state 34
    IF              shift and go to state 35
    WHILE           shift and go to state 11
    FOR             shift and go to state 28
    FUN             shift and go to state 13
    TRUE            shift and go to state 15
    FALSE           shift and go to state 37
    NOT             shift and go to state 44
    NUMBER          shift and go to state 7
    STRING1         shift and go to state 26
    STRING2         shift and go to state 25
    LSBRACKET       shift and go to state 4
    SELECTOR        shift and go to state 9
    LPAREN          shift and go to state 32
    PLUS            shift and go to state 24
    MINUS           shift and go to state 16

    list_expr                      shift and go to state 1
    statements                     shift and go to state 151
    unary_expr                     shift and go to state 3
    dictionary_stmt                shift and go to state 5
    group_expr                     shift and go to state 27
    function_call                  shift and go to state 8
    parse_text_expr                shift and go to state 14
    conditional_expr               shift and go to state 12
    list_stmt                      shift and go to state 17
    number_expr                    shift and go to state 33
    string_expr                    shift and go to state 18
    assign_stmt                    shift and go to state 20
    arithmetic_expr                shift and go to state 19
    expression_stmt                shift and go to state 22
    statement                      shift and go to state 23
    compound_stmt                  shift and go to state 42
    simple_stmt                    shift and go to state 29
    function_decl                  shift and go to state 30
    for_stmt                       shift and go to state 31
    not_expr                       shift and go to state 6
    binary_expr                    shift and go to state 10
    decrement_stmt                 shift and go to state 36
    if_stmt                        shift and go to state 38
    uminus_expr                    shift and go to state 39
    id_expr                        shift and go to state 40
    boolean_expr                   shift and go to state 41
    while_stmt                     shift and go to state 43
    uplus_expr                     shift and go to state 45
    expression                     shift and go to state 46
    increment_stmt                 shift and go to state 47

state 141

    (21) list_stmt -> ID ASSIGN LSBRACKET elements RSBRACKET SEMICOLON .

    ID              reduce using rule 21 (list_stmt -> ID ASSIGN LSBRACKET elements RSBRACKET SEMICOLON .)
    IF              reduce using rule 21 (list_stmt -> ID ASSIGN LSBRACKET elements RSBRACKET SEMICOLON .)
    WHILE           reduce using rule 21 (list_stmt -> ID ASSIGN LSBRACKET elements RSBRACKET SEMICOLON .)
    FOR             reduce using rule 21 (list_stmt -> ID ASSIGN LSBRACKET elements RSBRACKET SEMICOLON .)
    FUN             reduce using rule 21 (list_stmt -> ID ASSIGN LSBRACKET elements RSBRACKET SEMICOLON .)
    TRUE            reduce using rule 21 (list_stmt -> ID ASSIGN LSBRACKET elements RSBRACKET SEMICOLON .)
    FALSE           reduce using rule 21 (list_stmt -> ID ASSIGN LSBRACKET elements RSBRACKET SEMICOLON .)
    NOT             reduce using rule 21 (list_stmt -> ID ASSIGN LSBRACKET elements RSBRACKET SEMICOLON .)
    NUMBER          reduce using rule 21 (list_stmt -> ID ASSIGN LSBRACKET elements RSBRACKET SEMICOLON .)
    STRING1         reduce using rule 21 (list_stmt -> ID ASSIGN LSBRACKET elements RSBRACKET SEMICOLON .)
    STRING2         reduce using rule 21 (list_stmt -> ID ASSIGN LSBRACKET elements RSBRACKET SEMICOLON .)
    LSBRACKET       reduce using rule 21 (list_stmt -> ID ASSIGN LSBRACKET elements RSBRACKET SEMICOLON .)
    SELECTOR        reduce using rule 21 (list_stmt -> ID ASSIGN LSBRACKET elements RSBRACKET SEMICOLON .)
    LPAREN          reduce using rule 21 (list_stmt -> ID ASSIGN LSBRACKET elements RSBRACKET SEMICOLON .)
    PLUS            reduce using rule 21 (list_stmt -> ID ASSIGN LSBRACKET elements RSBRACKET SEMICOLON .)
    MINUS           reduce using rule 21 (list_stmt -> ID ASSIGN LSBRACKET elements RSBRACKET SEMICOLON .)
    $end            reduce using rule 21 (list_stmt -> ID ASSIGN LSBRACKET elements RSBRACKET SEMICOLON .)
    END             reduce using rule 21 (list_stmt -> ID ASSIGN LSBRACKET elements RSBRACKET SEMICOLON .)
    ELIF            reduce using rule 21 (list_stmt -> ID ASSIGN LSBRACKET elements RSBRACKET SEMICOLON .)
    ELSE            reduce using rule 21 (list_stmt -> ID ASSIGN LSBRACKET elements RSBRACKET SEMICOLON .)


state 142

    (30) dictionary_object -> key COLON value .

    COMMA           reduce using rule 30 (dictionary_object -> key COLON value .)
    RCBRACKET       reduce using rule 30 (dictionary_object -> key COLON value .)


state 143

    (33) value -> expression .
    (70) arithmetic_expr -> expression . PLUS expression
    (71) arithmetic_expr -> expression . MINUS expression
    (72) arithmetic_expr -> expression . MULTIPLY expression
    (73) arithmetic_expr -> expression . DIVIDE expression
    (74) arithmetic_expr -> expression . POW expression
    (75) arithmetic_expr -> expression . MOD expression
    (76) conditional_expr -> expression . AND expression
    (77) conditional_expr -> expression . OR expression
    (78) conditional_expr -> expression . XOR expression
    (79) conditional_expr -> expression . EQUALS expression
    (80) conditional_expr -> expression . NOT_EQUALS expression
    (81) conditional_expr -> expression . GREATER_THAN expression
    (82) conditional_expr -> expression . LESS_THAN expression
    (83) conditional_expr -> expression . GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> expression . LESS_THAN_OR_EQUAL expression

    COMMA           reduce using rule 33 (value -> expression .)
    RCBRACKET       reduce using rule 33 (value -> expression .)
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 66
    POW             shift and go to state 69
    MOD             shift and go to state 78
    AND             shift and go to state 64
    OR              shift and go to state 72
    XOR             shift and go to state 65
    EQUALS          shift and go to state 71
    NOT_EQUALS      shift and go to state 67
    GREATER_THAN    shift and go to state 73
    LESS_THAN       shift and go to state 76
    GREATER_THAN_OR_EQUAL shift and go to state 68
    LESS_THAN_OR_EQUAL shift and go to state 70


state 144

    (27) dictionary_objects -> dictionary_object COMMA dictionary_objects .

    RCBRACKET       reduce using rule 27 (dictionary_objects -> dictionary_object COMMA dictionary_objects .)


state 145

    (26) dictionary_stmt -> ID ASSIGN LCBRACKET dictionary_objects RCBRACKET SEMICOLON .

    ID              reduce using rule 26 (dictionary_stmt -> ID ASSIGN LCBRACKET dictionary_objects RCBRACKET SEMICOLON .)
    IF              reduce using rule 26 (dictionary_stmt -> ID ASSIGN LCBRACKET dictionary_objects RCBRACKET SEMICOLON .)
    WHILE           reduce using rule 26 (dictionary_stmt -> ID ASSIGN LCBRACKET dictionary_objects RCBRACKET SEMICOLON .)
    FOR             reduce using rule 26 (dictionary_stmt -> ID ASSIGN LCBRACKET dictionary_objects RCBRACKET SEMICOLON .)
    FUN             reduce using rule 26 (dictionary_stmt -> ID ASSIGN LCBRACKET dictionary_objects RCBRACKET SEMICOLON .)
    TRUE            reduce using rule 26 (dictionary_stmt -> ID ASSIGN LCBRACKET dictionary_objects RCBRACKET SEMICOLON .)
    FALSE           reduce using rule 26 (dictionary_stmt -> ID ASSIGN LCBRACKET dictionary_objects RCBRACKET SEMICOLON .)
    NOT             reduce using rule 26 (dictionary_stmt -> ID ASSIGN LCBRACKET dictionary_objects RCBRACKET SEMICOLON .)
    NUMBER          reduce using rule 26 (dictionary_stmt -> ID ASSIGN LCBRACKET dictionary_objects RCBRACKET SEMICOLON .)
    STRING1         reduce using rule 26 (dictionary_stmt -> ID ASSIGN LCBRACKET dictionary_objects RCBRACKET SEMICOLON .)
    STRING2         reduce using rule 26 (dictionary_stmt -> ID ASSIGN LCBRACKET dictionary_objects RCBRACKET SEMICOLON .)
    LSBRACKET       reduce using rule 26 (dictionary_stmt -> ID ASSIGN LCBRACKET dictionary_objects RCBRACKET SEMICOLON .)
    SELECTOR        reduce using rule 26 (dictionary_stmt -> ID ASSIGN LCBRACKET dictionary_objects RCBRACKET SEMICOLON .)
    LPAREN          reduce using rule 26 (dictionary_stmt -> ID ASSIGN LCBRACKET dictionary_objects RCBRACKET SEMICOLON .)
    PLUS            reduce using rule 26 (dictionary_stmt -> ID ASSIGN LCBRACKET dictionary_objects RCBRACKET SEMICOLON .)
    MINUS           reduce using rule 26 (dictionary_stmt -> ID ASSIGN LCBRACKET dictionary_objects RCBRACKET SEMICOLON .)
    END             reduce using rule 26 (dictionary_stmt -> ID ASSIGN LCBRACKET dictionary_objects RCBRACKET SEMICOLON .)
    $end            reduce using rule 26 (dictionary_stmt -> ID ASSIGN LCBRACKET dictionary_objects RCBRACKET SEMICOLON .)
    ELIF            reduce using rule 26 (dictionary_stmt -> ID ASSIGN LCBRACKET dictionary_objects RCBRACKET SEMICOLON .)
    ELSE            reduce using rule 26 (dictionary_stmt -> ID ASSIGN LCBRACKET dictionary_objects RCBRACKET SEMICOLON .)


state 146

    (38) elif_block -> ELIF expression . DO statements
    (70) arithmetic_expr -> expression . PLUS expression
    (71) arithmetic_expr -> expression . MINUS expression
    (72) arithmetic_expr -> expression . MULTIPLY expression
    (73) arithmetic_expr -> expression . DIVIDE expression
    (74) arithmetic_expr -> expression . POW expression
    (75) arithmetic_expr -> expression . MOD expression
    (76) conditional_expr -> expression . AND expression
    (77) conditional_expr -> expression . OR expression
    (78) conditional_expr -> expression . XOR expression
    (79) conditional_expr -> expression . EQUALS expression
    (80) conditional_expr -> expression . NOT_EQUALS expression
    (81) conditional_expr -> expression . GREATER_THAN expression
    (82) conditional_expr -> expression . LESS_THAN expression
    (83) conditional_expr -> expression . GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> expression . LESS_THAN_OR_EQUAL expression

    DO              shift and go to state 152
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 66
    POW             shift and go to state 69
    MOD             shift and go to state 78
    AND             shift and go to state 64
    OR              shift and go to state 72
    XOR             shift and go to state 65
    EQUALS          shift and go to state 71
    NOT_EQUALS      shift and go to state 67
    GREATER_THAN    shift and go to state 73
    LESS_THAN       shift and go to state 76
    GREATER_THAN_OR_EQUAL shift and go to state 68
    LESS_THAN_OR_EQUAL shift and go to state 70


state 147

    (39) else_block -> ELSE statements .

    END             reduce using rule 39 (else_block -> ELSE statements .)


state 148

    (34) if_stmt -> IF expression DO statements elif_blocks END .

    ID              reduce using rule 34 (if_stmt -> IF expression DO statements elif_blocks END .)
    IF              reduce using rule 34 (if_stmt -> IF expression DO statements elif_blocks END .)
    WHILE           reduce using rule 34 (if_stmt -> IF expression DO statements elif_blocks END .)
    FOR             reduce using rule 34 (if_stmt -> IF expression DO statements elif_blocks END .)
    FUN             reduce using rule 34 (if_stmt -> IF expression DO statements elif_blocks END .)
    TRUE            reduce using rule 34 (if_stmt -> IF expression DO statements elif_blocks END .)
    FALSE           reduce using rule 34 (if_stmt -> IF expression DO statements elif_blocks END .)
    NOT             reduce using rule 34 (if_stmt -> IF expression DO statements elif_blocks END .)
    NUMBER          reduce using rule 34 (if_stmt -> IF expression DO statements elif_blocks END .)
    STRING1         reduce using rule 34 (if_stmt -> IF expression DO statements elif_blocks END .)
    STRING2         reduce using rule 34 (if_stmt -> IF expression DO statements elif_blocks END .)
    LSBRACKET       reduce using rule 34 (if_stmt -> IF expression DO statements elif_blocks END .)
    SELECTOR        reduce using rule 34 (if_stmt -> IF expression DO statements elif_blocks END .)
    LPAREN          reduce using rule 34 (if_stmt -> IF expression DO statements elif_blocks END .)
    PLUS            reduce using rule 34 (if_stmt -> IF expression DO statements elif_blocks END .)
    MINUS           reduce using rule 34 (if_stmt -> IF expression DO statements elif_blocks END .)
    END             reduce using rule 34 (if_stmt -> IF expression DO statements elif_blocks END .)
    $end            reduce using rule 34 (if_stmt -> IF expression DO statements elif_blocks END .)
    ELIF            reduce using rule 34 (if_stmt -> IF expression DO statements elif_blocks END .)
    ELSE            reduce using rule 34 (if_stmt -> IF expression DO statements elif_blocks END .)


state 149

    (35) elif_blocks -> elif_block elif_blocks .

    END             reduce using rule 35 (elif_blocks -> elif_block elif_blocks .)


state 150

    (42) function_decl -> FUN ID LPAREN elements RPAREN DO statements . END

    END             shift and go to state 153


state 151

    (41) for_stmt -> FOR EACH ID IN element DO statements . END

    END             shift and go to state 154


state 152

    (38) elif_block -> ELIF expression DO . statements
    (2) statements -> . statement statements
    (3) statements -> . statement
    (4) statement -> . simple_stmt
    (5) statement -> . compound_stmt
    (6) simple_stmt -> . expression_stmt
    (7) simple_stmt -> . assign_stmt
    (8) simple_stmt -> . increment_stmt
    (9) simple_stmt -> . decrement_stmt
    (10) simple_stmt -> . list_stmt
    (11) simple_stmt -> . dictionary_stmt
    (12) simple_stmt -> . function_call
    (13) compound_stmt -> . if_stmt
    (14) compound_stmt -> . while_stmt
    (15) compound_stmt -> . for_stmt
    (16) compound_stmt -> . function_decl
    (17) expression_stmt -> . expression
    (18) assign_stmt -> . ID ASSIGN expression SEMICOLON
    (19) increment_stmt -> . expression PLUS PLUS SEMICOLON
    (20) decrement_stmt -> . expression MINUS MINUS SEMICOLON
    (21) list_stmt -> . ID ASSIGN LSBRACKET elements RSBRACKET SEMICOLON
    (26) dictionary_stmt -> . ID ASSIGN LCBRACKET dictionary_objects RCBRACKET SEMICOLON
    (43) function_call -> . ID LPAREN elements RPAREN SEMICOLON
    (34) if_stmt -> . IF expression DO statements elif_blocks END
    (40) while_stmt -> . WHILE expression DO statements END
    (41) for_stmt -> . FOR EACH ID IN element DO statements END
    (42) function_decl -> . FUN ID LPAREN elements RPAREN DO statements END
    (44) expression -> . unary_expr
    (45) expression -> . binary_expr
    (46) unary_expr -> . boolean_expr
    (47) unary_expr -> . not_expr
    (48) unary_expr -> . number_expr
    (49) unary_expr -> . id_expr
    (50) unary_expr -> . string_expr
    (51) unary_expr -> . list_expr
    (52) unary_expr -> . parse_text_expr
    (53) unary_expr -> . group_expr
    (54) unary_expr -> . uplus_expr
    (55) unary_expr -> . uminus_expr
    (56) binary_expr -> . arithmetic_expr
    (57) binary_expr -> . conditional_expr
    (58) boolean_expr -> . TRUE
    (59) boolean_expr -> . FALSE
    (60) not_expr -> . NOT expression
    (61) number_expr -> . NUMBER
    (62) id_expr -> . ID
    (63) string_expr -> . STRING1
    (64) string_expr -> . STRING2
    (65) list_expr -> . LSBRACKET elements RSBRACKET
    (66) parse_text_expr -> . SELECTOR LPAREN elements RPAREN
    (67) group_expr -> . LPAREN expression RPAREN
    (68) uplus_expr -> . PLUS expression
    (69) uminus_expr -> . MINUS expression
    (70) arithmetic_expr -> . expression PLUS expression
    (71) arithmetic_expr -> . expression MINUS expression
    (72) arithmetic_expr -> . expression MULTIPLY expression
    (73) arithmetic_expr -> . expression DIVIDE expression
    (74) arithmetic_expr -> . expression POW expression
    (75) arithmetic_expr -> . expression MOD expression
    (76) conditional_expr -> . expression AND expression
    (77) conditional_expr -> . expression OR expression
    (78) conditional_expr -> . expression XOR expression
    (79) conditional_expr -> . expression EQUALS expression
    (80) conditional_expr -> . expression NOT_EQUALS expression
    (81) conditional_expr -> . expression GREATER_THAN expression
    (82) conditional_expr -> . expression LESS_THAN expression
    (83) conditional_expr -> . expression GREATER_THAN_OR_EQUAL expression
    (84) conditional_expr -> . expression LESS_THAN_OR_EQUAL expression

    ID              shift and go to state 34
    IF              shift and go to state 35
    WHILE           shift and go to state 11
    FOR             shift and go to state 28
    FUN             shift and go to state 13
    TRUE            shift and go to state 15
    FALSE           shift and go to state 37
    NOT             shift and go to state 44
    NUMBER          shift and go to state 7
    STRING1         shift and go to state 26
    STRING2         shift and go to state 25
    LSBRACKET       shift and go to state 4
    SELECTOR        shift and go to state 9
    LPAREN          shift and go to state 32
    PLUS            shift and go to state 24
    MINUS           shift and go to state 16

    list_expr                      shift and go to state 1
    statements                     shift and go to state 155
    unary_expr                     shift and go to state 3
    dictionary_stmt                shift and go to state 5
    group_expr                     shift and go to state 27
    function_call                  shift and go to state 8
    parse_text_expr                shift and go to state 14
    conditional_expr               shift and go to state 12
    list_stmt                      shift and go to state 17
    number_expr                    shift and go to state 33
    string_expr                    shift and go to state 18
    assign_stmt                    shift and go to state 20
    arithmetic_expr                shift and go to state 19
    expression_stmt                shift and go to state 22
    statement                      shift and go to state 23
    compound_stmt                  shift and go to state 42
    simple_stmt                    shift and go to state 29
    function_decl                  shift and go to state 30
    for_stmt                       shift and go to state 31
    not_expr                       shift and go to state 6
    binary_expr                    shift and go to state 10
    decrement_stmt                 shift and go to state 36
    if_stmt                        shift and go to state 38
    uminus_expr                    shift and go to state 39
    id_expr                        shift and go to state 40
    boolean_expr                   shift and go to state 41
    while_stmt                     shift and go to state 43
    uplus_expr                     shift and go to state 45
    expression                     shift and go to state 46
    increment_stmt                 shift and go to state 47

state 153

    (42) function_decl -> FUN ID LPAREN elements RPAREN DO statements END .

    ID              reduce using rule 42 (function_decl -> FUN ID LPAREN elements RPAREN DO statements END .)
    IF              reduce using rule 42 (function_decl -> FUN ID LPAREN elements RPAREN DO statements END .)
    WHILE           reduce using rule 42 (function_decl -> FUN ID LPAREN elements RPAREN DO statements END .)
    FOR             reduce using rule 42 (function_decl -> FUN ID LPAREN elements RPAREN DO statements END .)
    FUN             reduce using rule 42 (function_decl -> FUN ID LPAREN elements RPAREN DO statements END .)
    TRUE            reduce using rule 42 (function_decl -> FUN ID LPAREN elements RPAREN DO statements END .)
    FALSE           reduce using rule 42 (function_decl -> FUN ID LPAREN elements RPAREN DO statements END .)
    NOT             reduce using rule 42 (function_decl -> FUN ID LPAREN elements RPAREN DO statements END .)
    NUMBER          reduce using rule 42 (function_decl -> FUN ID LPAREN elements RPAREN DO statements END .)
    STRING1         reduce using rule 42 (function_decl -> FUN ID LPAREN elements RPAREN DO statements END .)
    STRING2         reduce using rule 42 (function_decl -> FUN ID LPAREN elements RPAREN DO statements END .)
    LSBRACKET       reduce using rule 42 (function_decl -> FUN ID LPAREN elements RPAREN DO statements END .)
    SELECTOR        reduce using rule 42 (function_decl -> FUN ID LPAREN elements RPAREN DO statements END .)
    LPAREN          reduce using rule 42 (function_decl -> FUN ID LPAREN elements RPAREN DO statements END .)
    PLUS            reduce using rule 42 (function_decl -> FUN ID LPAREN elements RPAREN DO statements END .)
    MINUS           reduce using rule 42 (function_decl -> FUN ID LPAREN elements RPAREN DO statements END .)
    END             reduce using rule 42 (function_decl -> FUN ID LPAREN elements RPAREN DO statements END .)
    ELIF            reduce using rule 42 (function_decl -> FUN ID LPAREN elements RPAREN DO statements END .)
    ELSE            reduce using rule 42 (function_decl -> FUN ID LPAREN elements RPAREN DO statements END .)
    $end            reduce using rule 42 (function_decl -> FUN ID LPAREN elements RPAREN DO statements END .)


state 154

    (41) for_stmt -> FOR EACH ID IN element DO statements END .

    ID              reduce using rule 41 (for_stmt -> FOR EACH ID IN element DO statements END .)
    IF              reduce using rule 41 (for_stmt -> FOR EACH ID IN element DO statements END .)
    WHILE           reduce using rule 41 (for_stmt -> FOR EACH ID IN element DO statements END .)
    FOR             reduce using rule 41 (for_stmt -> FOR EACH ID IN element DO statements END .)
    FUN             reduce using rule 41 (for_stmt -> FOR EACH ID IN element DO statements END .)
    TRUE            reduce using rule 41 (for_stmt -> FOR EACH ID IN element DO statements END .)
    FALSE           reduce using rule 41 (for_stmt -> FOR EACH ID IN element DO statements END .)
    NOT             reduce using rule 41 (for_stmt -> FOR EACH ID IN element DO statements END .)
    NUMBER          reduce using rule 41 (for_stmt -> FOR EACH ID IN element DO statements END .)
    STRING1         reduce using rule 41 (for_stmt -> FOR EACH ID IN element DO statements END .)
    STRING2         reduce using rule 41 (for_stmt -> FOR EACH ID IN element DO statements END .)
    LSBRACKET       reduce using rule 41 (for_stmt -> FOR EACH ID IN element DO statements END .)
    SELECTOR        reduce using rule 41 (for_stmt -> FOR EACH ID IN element DO statements END .)
    LPAREN          reduce using rule 41 (for_stmt -> FOR EACH ID IN element DO statements END .)
    PLUS            reduce using rule 41 (for_stmt -> FOR EACH ID IN element DO statements END .)
    MINUS           reduce using rule 41 (for_stmt -> FOR EACH ID IN element DO statements END .)
    $end            reduce using rule 41 (for_stmt -> FOR EACH ID IN element DO statements END .)
    END             reduce using rule 41 (for_stmt -> FOR EACH ID IN element DO statements END .)
    ELIF            reduce using rule 41 (for_stmt -> FOR EACH ID IN element DO statements END .)
    ELSE            reduce using rule 41 (for_stmt -> FOR EACH ID IN element DO statements END .)


state 155

    (38) elif_block -> ELIF expression DO statements .

    ELIF            reduce using rule 38 (elif_block -> ELIF expression DO statements .)
    ELSE            reduce using rule 38 (elif_block -> ELIF expression DO statements .)
    END             reduce using rule 38 (elif_block -> ELIF expression DO statements .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LPAREN in state 34 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 46 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 46 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 129 resolved as shift
