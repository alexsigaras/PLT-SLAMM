Created by PLY version 3.4 (http://www.dabeaz.com/ply)
<<<<<<< HEAD
=======

Unused terminals:

    DO
    RETURN
    LESS_THAN_OR_EQUAL
    NUMBER
    GREATER_THAN
    WHILE
    MULTIPLY
    LESS_THAN
    MINUS
    DIVIDE
    RPAREN
    NOT_EQUALS
    POW
    PLUS
    CATCH
    MULTI_LINE_COMMENT_END
    ASSIGN
    XOR
    STRING
    FOR
    IS
    EQUALS
    ELSE
    TRY
    LPAREN
    MULTI_LINE_COMMENT_START
    SINGLE_LINE_COMMENT
    ID
    IF
    AND
    GREATER_THAN_OR_EQUAL
    BREAK
    CONTINUE
    EACH
    NOT
    OR
    MOD

Grammar

Rule 0     S' -> start
Rule 1     start -> statement
Rule 2     statement -> TRUE
Rule 3     statement -> FALSE

Terminals, with rules where they appear

AND                  : 
ASSIGN               : 
BREAK                : 
CATCH                : 
CONTINUE             : 
DIVIDE               : 
DO                   : 
EACH                 : 
ELSE                 : 
EQUALS               : 
FALSE                : 3
FOR                  : 
GREATER_THAN         : 
GREATER_THAN_OR_EQUAL : 
ID                   : 
IF                   : 
IS                   : 
LESS_THAN            : 
LESS_THAN_OR_EQUAL   : 
LPAREN               : 
MINUS                : 
MOD                  : 
MULTIPLY             : 
MULTI_LINE_COMMENT_END : 
MULTI_LINE_COMMENT_START : 
NOT                  : 
NOT_EQUALS           : 
NUMBER               : 
OR                   : 
PLUS                 : 
POW                  : 
RETURN               : 
RPAREN               : 
SINGLE_LINE_COMMENT  : 
STRING               : 
TRUE                 : 2
TRY                  : 
WHILE                : 
XOR                  : 
error                : 

Nonterminals, with rules where they appear

start                : 0
statement            : 1

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . statement
    (2) statement -> . TRUE
    (3) statement -> . FALSE

    TRUE            shift and go to state 3
    FALSE           shift and go to state 2

    start                          shift and go to state 1
    statement                      shift and go to state 4

state 1

    (0) S' -> start .



state 2

    (3) statement -> FALSE .

    $end            reduce using rule 3 (statement -> FALSE .)


state 3

    (2) statement -> TRUE .

    $end            reduce using rule 2 (statement -> TRUE .)


state 4

    (1) start -> statement .

    $end            reduce using rule 1 (start -> statement .)

>>>>>>> Updated swim.py
